<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm Problem Classification</title>
    <url>/blog/2023/02/12/Algorithm-Problem-Classification/</url>
    <content><![CDATA[<h2 id="Array-x2F-String-112"><a href="#Array-x2F-String-112" class="headerlink" title="Array&#x2F;String [112]"></a>Array&#x2F;String [112]</h2><h4 id="Simple-Pointers-39"><a href="#Simple-Pointers-39" class="headerlink" title="Simple Pointers [39]"></a>Simple Pointers [39]</h4><ul>
<li><p>26 Remove Duplicates from Sorted Array</p>
</li>
<li><p>80 Remove Duplicates from Sorted Array II</p>
</li>
<li><p>27 Remove Element</p>
</li>
<li><p>283 Move Zeroes</p>
</li>
<li><p>42 Trapping Rain Water</p>
</li>
<li><p>238 Product of Array Except Self</p>
</li>
<li><p>*135 Candy</p>
</li>
<li><p>209 Minimum Size Subarray Sum</p>
</li>
<li><p>*228 Summary Ranges</p>
</li>
<li><p>163 Missing Ranges (Premium)</p>
</li>
<li><p>56 Merge Intervals</p>
</li>
<li><p>57 Insert Interval</p>
</li>
<li><p>763 Partition Labels</p>
</li>
<li><p>*833. Find And Replace in String</p>
</li>
<li><p>*731 My Calendar II</p>
</li>
<li><p>161 One Edit Distance (Premium)</p>
</li>
<li><p>88 Merge Sorted Array</p>
</li>
<li><p>392 Is Subsequence</p>
</li>
<li><p>844 Backspace String Compare</p>
</li>
<li><p>*686 Repeated String Match</p>
</li>
<li><p>11 Container With Most Water</p>
</li>
<li><p>345 Reverse Vowels of a String</p>
</li>
<li><p>125 Valid Palindrome</p>
</li>
<li><p>*680 Valid Palindrome II</p>
</li>
<li><p>243 Shortest Word Distance (Premium)</p>
</li>
<li><p>244 Shortest Word Distance II (Premium)</p>
</li>
<li><p>245 Shortest Word Distance III (Premium)</p>
</li>
<li><p>349 Intersection of Two Arrays</p>
</li>
<li><p>350 Intersection of Two Arrays II</p>
</li>
<li><p>15 3Sum</p>
</li>
<li><p>16 3Sum Closest</p>
</li>
<li><p>18 4Sum</p>
</li>
<li><p>167 Two Sum II - Input Array Is Sorted</p>
</li>
<li><p>170 Two Sum III - Data structure design (Premium)</p>
</li>
<li><p>280 Wiggle Sort (Premium)</p>
<blockquote>
<p>*281 Wiggle Sort</p>
</blockquote>
</li>
<li><p>*376 Wiggle Subsequence</p>
</li>
<li><p>14 Longest Common Prefix</p>
</li>
<li><p>*31 Next Permutation</p>
</li>
<li><p>418 Sentence Screen Fitting (Premium)</p>
</li>
</ul>
<h4 id="Binary-Search-14"><a href="#Binary-Search-14" class="headerlink" title="Binary Search [14]"></a>Binary Search [14]</h4><ul>
<li><p>35 Search Insert Position</p>
</li>
<li><p>*4 Median of Two Sorted Arrays</p>
</li>
<li><p>153 Find Minimum in Rotated Sorted Array</p>
</li>
<li><p>154 Find Minimum in Rotated Sorted Array II</p>
</li>
<li><p>34 Find First and Last Position of Element in Sorted Array</p>
</li>
<li><p>374 Guess Number Higher or Lower</p>
</li>
<li><p>278 First Bad Version</p>
</li>
<li><p>33 Search in Rotated Sorted Array</p>
</li>
<li><p>81 Search in Rotated Sorted Array II</p>
</li>
<li><p>*300 Longest Increasing Subsequence</p>
</li>
<li><p>*315 Count of Smaller Numbers After Self</p>
</li>
<li><p>*354 Russian Doll Envelopes</p>
</li>
<li><p>274 H-Index</p>
</li>
<li><p>275 H-Index II</p>
<h4 id="HashMap-5"><a href="#HashMap-5" class="headerlink" title="HashMap [5]"></a>HashMap [5]</h4></li>
<li><p>242 Valid Anagram</p>
</li>
<li><p>249 Group Shifted Strings (Premium)</p>
</li>
<li><p>*336 Palindrome Pairs</p>
</li>
<li><p>356 Line Reflection (Premium)</p>
</li>
<li><p>*205 Isomorphic Strings</p>
<blockquote>
<ol start="290">
<li>Word Pattern</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="Sum-subarray-related-problems-3"><a href="#Sum-subarray-related-problems-3" class="headerlink" title="Sum subarray related problems [3]"></a>Sum subarray related problems [3]</h4><ul>
<li>1 Two Sum</li>
<li>325 Maximum Size Subarray Sum Equals k (Premium)</li>
<li>560 Subarray Sum Equals K</li>
</ul>
<h4 id="HashMap–Tracking-6"><a href="#HashMap–Tracking-6" class="headerlink" title="HashMap–Tracking [6]"></a>HashMap–Tracking [6]</h4><ul>
<li>3 Longest Substring Without Repeating Characters</li>
<li>Longest Substring with At Most K Distinct Characters (Google)</li>
<li>*30 Substring with Concatenation of All Words</li>
<li>76 Minimum Window Substring</li>
<li>*395 Longest Substring with At Least K Repeating Characters</li>
<li>567 Permutation in String</li>
</ul>
<h4 id="HashSet-1"><a href="#HashSet-1" class="headerlink" title="HashSet [1]"></a>HashSet [1]</h4><ul>
<li>*128 Longest Consecutive Sequence</li>
</ul>
<h4 id="Caching-4"><a href="#Caching-4" class="headerlink" title="Caching [4]"></a>Caching [4]</h4><ul>
<li>169 Majority Element</li>
<li>*229 Majority Element II</li>
<li>*334 Increasing Triplet Subsequence</li>
<li>Find the 2nd Largest Elements in an array<blockquote>
<ol start="215">
<li>Kth Largest Element in an Array</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="BFS-2"><a href="#BFS-2" class="headerlink" title="BFS [2]"></a>BFS [2]</h4><ul>
<li>127 Word Ladder</li>
<li>*126 Word Ladder I</li>
</ul>
<h4 id="Heap-8"><a href="#Heap-8" class="headerlink" title="Heap [8]"></a>Heap [8]</h4><ul>
<li>347 Top K Frequent Elements<blockquote>
<ol start="692">
<li>Top K Frequent Words</li>
</ol>
</blockquote>
</li>
<li>252 Meeting Rooms (Premium)</li>
<li>253 Meeting Rooms II (Premium)</li>
<li>370 Range Addition (Premium)</li>
<li>Merge k sorted arrays</li>
<li>23 Merge k Sorted Lists</li>
<li>358 Rearrange String k Distance Apart (Premium)</li>
<li>*857 Minimum Cost to Hire K Workers</li>
</ul>
<h4 id="TreeSet-6"><a href="#TreeSet-6" class="headerlink" title="TreeSet [6]"></a>TreeSet [6]</h4><ul>
<li>217 Contains Duplicate</li>
<li>219 Contains Duplicate II</li>
<li>*220 Contains Duplicate III</li>
<li>*363 Max Sum of Rectangle No Larger Than K</li>
<li>Maximum Sum Of Subarray Close To K</li>
<li>683 K Empty Slots (Premium)</li>
</ul>
<h4 id="Stream-deque-x2F-caching-x2F-heap-x2F-treeset-6"><a href="#Stream-deque-x2F-caching-x2F-heap-x2F-treeset-6" class="headerlink" title="Stream (deque&#x2F;caching&#x2F;heap&#x2F;treeset) [6]"></a>Stream (deque&#x2F;caching&#x2F;heap&#x2F;treeset) [6]</h4><ul>
<li>239 Sliding Window Maximum</li>
<li>295 Find Median from Data Stream</li>
<li>346 Moving Average from Data Stream (Premium)</li>
<li>*352 Data Stream as Disjoint Intervals</li>
<li>*382 Linked List Random Node<blockquote>
<p>*398. Random Pick Index</p>
</blockquote>
</li>
<li>*384 Shuffle an Array</li>
</ul>
<h4 id="Sort-6"><a href="#Sort-6" class="headerlink" title="Sort [6]"></a>Sort [6]</h4><ul>
<li>*148 Sort List (Merge Sort)</li>
<li>Quick sort</li>
<li>*215 Kth Largest Element in an Array (Quick Sort)</li>
<li>75 Sort Colors</li>
<li>*164 Maximum Gap</li>
<li>49 Group Anagrams</li>
</ul>
<h4 id="tracking-index-using-an-array-4"><a href="#tracking-index-using-an-array-4" class="headerlink" title="tracking index using an array [4]"></a>tracking index using an array [4]</h4><ul>
<li>263 Ugly Number</li>
<li>*264 Ugly Number II</li>
<li>*313 Super Ugly Number</li>
<li>*373 Find K Pairs with Smallest Sums</li>
</ul>
<h4 id="Rotate-2"><a href="#Rotate-2" class="headerlink" title="Rotate [2]"></a>Rotate [2]</h4><ul>
<li>*189 Rotate Array</li>
<li>151 Reverse Words in a String<h4 id="Finding-a-Number-3"><a href="#Finding-a-Number-3" class="headerlink" title="Finding a Number [3]"></a>Finding a Number [3]</h4></li>
<li>268 Missing Number</li>
<li>287 Find the Duplicate Number</li>
<li>*41 First Missing Positive<h4 id="using-index-to-add-elements-to-a-list-1"><a href="#using-index-to-add-elements-to-a-list-1" class="headerlink" title="using index to add elements to a list [1]"></a>using index to add elements to a list [1]</h4></li>
<li>*406 Queue Reconstruction by Height</li>
</ul>
<h4 id="Iterate-within-a-boundary-if-the-boundary-is-fixed-2"><a href="#Iterate-within-a-boundary-if-the-boundary-is-fixed-2" class="headerlink" title="Iterate within a boundary if the boundary is fixed [2]"></a>Iterate within a boundary if the boundary is fixed [2]</h4><ul>
<li>*401 Binary Watch</li>
<li>681 Next Closest Time (Premium)</li>
</ul>
<h2 id="Matrix-26"><a href="#Matrix-26" class="headerlink" title="Matrix [26]"></a>Matrix [26]</h2><h4 id="sorted-matrix-3"><a href="#sorted-matrix-3" class="headerlink" title="sorted matrix [3]"></a>sorted matrix [3]</h4><ul>
<li>74 Search a 2D Matrix</li>
<li>240 Search a 2D Matrix II</li>
<li>*378 Kth Smallest Element in a Sorted Matrix</li>
</ul>
<h4 id="queue-1"><a href="#queue-1" class="headerlink" title="queue [1]"></a>queue [1]</h4><ul>
<li>353 Design Snake Game (Premium)</li>
</ul>
<h4 id="union-find-disjoint-set-3"><a href="#union-find-disjoint-set-3" class="headerlink" title="union-find (disjoint set) [3]"></a>union-find (disjoint set) [3]</h4><ul>
<li>305 Number of Islands II (Premium)</li>
<li>323 Number of Connected Components in an Undirected Graph (Premium)</li>
<li>*947 Most Stones Removed with Same Row or Column</li>
</ul>
<h4 id="DFS-8"><a href="#DFS-8" class="headerlink" title="DFS [8]"></a>DFS [8]</h4><ul>
<li>*329 Longest Increasing Path in a Matrix</li>
<li>79 Word Search</li>
<li>*212 Word Search II</li>
<li>200 Number of Islands</li>
<li>Find a Path in a Matrix</li>
<li>*37 Sudoku Solver</li>
<li>36 Valid Sudoku</li>
<li>286 Walls and Gates (Premium)</li>
</ul>
<h4 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS [1]"></a>BFS [1]</h4><ul>
<li>*130 Surrounded Regions</li>
</ul>
<h4 id="Others-9"><a href="#Others-9" class="headerlink" title="Others [9]"></a>Others [9]</h4><ul>
<li>73 Set Matrix Zeroes</li>
<li>54 Spiral Matrix</li>
<li>59 Spiral Matrix II</li>
<li>48 Rotate Image</li>
<li>*304 Range Sum Query 2D - Immutable</li>
<li>317 Shortest Distance from All Buildings (Premium)</li>
<li>296 Best Meeting Point (Premium)</li>
<li>*289 Game of Life</li>
<li>348 Design Tic-Tac-Toe (Premium)</li>
</ul>
<h4 id="matrix-multiplication-1"><a href="#matrix-multiplication-1" class="headerlink" title="matrix multiplication [1]"></a>matrix multiplication [1]</h4><ul>
<li>311 Sparse Matrix Multiplication (Premium)</li>
</ul>
<h2 id="Linked-List-22"><a href="#Linked-List-22" class="headerlink" title="Linked List [22]"></a>Linked List [22]</h2><ul>
<li>2 Add Two Numbers</li>
<li>143 Reorder List</li>
<li>141 Linked List Cycle</li>
<li>138 Copy List with Random Pointer</li>
<li>21 Merge Two Sorted Lists</li>
<li>328 Odd Even Linked List</li>
<li>83 Remove Duplicates from Sorted List</li>
<li>82 Remove Duplicates from Sorted List II</li>
<li>86 Partition List</li>
<li>160 Intersection of Two Linked Lists</li>
<li>203 Remove Linked List Elements</li>
<li>24 Swap Nodes in Pairs</li>
<li>206 Reverse Linked List</li>
<li>92 Reverse Linked List II</li>
<li>19 Remove Nth Node From End of List</li>
<li>234 Palindrome Linked List</li>
<li>237 Delete Node in a Linked List</li>
<li>25 Reverse Nodes in k-Group</li>
<li>*148 Sort List</li>
<li>Reverse Double Linked List</li>
<li>Print Linked List in Reversed Order</li>
<li>369 Plus One Linked List (Premium)</li>
</ul>
<h2 id="Tree-47"><a href="#Tree-47" class="headerlink" title="Tree [47]"></a>Tree [47]</h2><h4 id="travel-6"><a href="#travel-6" class="headerlink" title="travel [6]"></a>travel [6]</h4><ul>
<li>94 Binary Tree Inorder Traversal</li>
<li>144 Binary Tree Preorder Traversal</li>
<li>145 Binary Tree Postorder Traversal</li>
<li>102 Binary Tree Level Order Traversal</li>
<li>107 Binary Tree Level Order Traversal II</li>
<li>314 Binary Tree Vertical Order Traversal<blockquote>
<ul>
<li>*987 Vertical Order Traversal of a Binary Tree</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="dfs-x2F-bfs-37"><a href="#dfs-x2F-bfs-37" class="headerlink" title="dfs&#x2F;bfs [37]"></a>dfs&#x2F;bfs [37]</h4><ul>
<li>226 Invert Binary Tree</li>
<li>230 Kth Smallest Element in a BST</li>
<li>298 Binary Tree Longest Consecutive Sequence (Premium)</li>
<li>98 Validate Binary Search Tree</li>
<li>114 Flatten Binary Tree to Linked List</li>
<li>112 Path Sum</li>
<li>113 Path Sum II<blockquote>
<ul>
<li>437 Path Sum III</li>
</ul>
</blockquote>
</li>
<li>106 Construct Binary Tree from Inorder and Postorder Traversal</li>
<li>105 Construct Binary Tree from Preorder and Inorder Traversal</li>
<li>108 Convert Sorted Array to Binary Search Tree</li>
<li>109 Convert Sorted List to Binary Search Tree</li>
<li>111 Minimum Depth of Binary Tree</li>
<li>124 Binary Tree Maximum Path Sum </li>
<li>110 Balanced Binary Tree</li>
<li>101 Symmetric Tree</li>
<li>173 Binary Search Tree Iterator</li>
<li>199 Binary Tree Right Side View</li>
<li>235 Lowest Common Ancestor of a Binary Search Tree</li>
<li>236 Lowest Common Ancestor of a Binary Tree</li>
<li>*1026. Maximum Difference Between Node and Ancestor</li>
<li>508 Most Frequent Subtree Sum</li>
<li>*331 Verify Preorder Serialization of a Binary Tree</li>
<li>116 Populating Next Right Pointers in Each Node</li>
<li>117 Populating Next Right Pointers in Each Node II</li>
<li>96 Unique Binary Search Trees</li>
<li>95 Unique Binary Search Trees II </li>
<li>129 Sum Root to Leaf Numbers</li>
<li>222 Count Complete Tree Nodes</li>
<li>270 Closest Binary Search Tree Value (Premium)</li>
<li>257 Binary Tree Paths</li>
<li>104 Maximum Depth of Binary Tree</li>
<li>*99 Recover Binary Search Tree</li>
<li>100 Same Tree</li>
<li>*297 Serialize and Deserialize Binary Tree</li>
<li>285 Inorder Successor in BST (Premium)</li>
<li>510 Inorder Successor in BST II (Premium)</li>
<li>366 Find Leaves of Binary Tree (Premium)</li>
<li>333 Largest BST Subtree (Premium)</li>
<li>426 Convert Binary Search Tree to Sorted Doubly Linked List (Premium)</li>
</ul>
<h4 id="Trie-2"><a href="#Trie-2" class="headerlink" title="Trie [2]"></a>Trie [2]</h4><ul>
<li>208 Implement Trie (Prefix Tree)</li>
<li>*211 Design Add and Search Words Data Structure</li>
</ul>
<h4 id="Segment-Tree-amp-Binary-Index-Tree-2"><a href="#Segment-Tree-amp-Binary-Index-Tree-2" class="headerlink" title="Segment Tree &amp; Binary Index Tree [2]"></a>Segment Tree &amp; Binary Index Tree [2]</h4><ul>
<li>*307 Range Sum Query - Mutable</li>
<li>*218 The Skyline Problem</li>
</ul>
<h2 id="Stack-18"><a href="#Stack-18" class="headerlink" title="Stack [18]"></a>Stack [18]</h2><h4 id="Stack-and-Queue-data-structure-implementation-get-familiar-with-stack-and-queue-4"><a href="#Stack-and-Queue-data-structure-implementation-get-familiar-with-stack-and-queue-4" class="headerlink" title="Stack and Queue data structure implementation (get familiar with stack and queue) [4]"></a>Stack and Queue data structure implementation (get familiar with stack and queue) [4]</h4><ul>
<li>225 Implement Stack using Queues</li>
<li>232 Implement Queue using Stacks</li>
<li>Implement a Stack Using an Array</li>
<li>Implement a Queue using an Array</li>
</ul>
<h4 id="Stack-5"><a href="#Stack-5" class="headerlink" title="Stack [5]"></a>Stack [5]</h4><ul>
<li>150 Evaluate Reverse Polish Notation</li>
<li>20 Valid Parentheses</li>
<li>*32 Longest Valid Parentheses</li>
<li>155 Min Stack</li>
<li>*769 Max Chunks To Make Sorted</li>
</ul>
<h4 id="Stack–Largest-Rectangle-2"><a href="#Stack–Largest-Rectangle-2" class="headerlink" title="Stack–Largest Rectangle [2]"></a>Stack–Largest Rectangle [2]</h4><ul>
<li>*84 Largest Rectangle in Histogram</li>
<li>*85 Maximal Rectangle</li>
</ul>
<h4 id="Stack–Nested-Object-7"><a href="#Stack–Nested-Object-7" class="headerlink" title="Stack–Nested Object [7]"></a>Stack–Nested Object [7]</h4><ul>
<li>*385 Mini Parser</li>
<li>341 Flatten Nested List Iterator</li>
<li>339 Nested List Weight Sum (Premium)</li>
<li>364 Nested List Weight Sum II (Premium)</li>
<li>*388 Longest Absolute File Path</li>
<li>*394 Decode String</li>
<li>Evaluate Math Expression<h2 id="DFS-28"><a href="#DFS-28" class="headerlink" title="DFS [28]"></a>DFS [28]</h2></li>
<li>698 Partition to K Equal Sum Subsets</li>
<li>46 Permutations</li>
<li>47 Permutations II</li>
<li>*60 Permutation Sequence<blockquote>
<p>*31 Next Permutation</p>
</blockquote>
</li>
<li>*996 Number of Squareful Arrays</li>
<li>*22 Generate Parentheses</li>
<li>39 Combination Sum</li>
<li>40 Combination Sum II</li>
<li>216 Combination Sum III</li>
<li>*377 Combination Sum IV</li>
<li>*44 Wildcard Matching</li>
<li>*10 Regular Expression Matching</li>
<li>*809 Expressive Words</li>
<li>Get Target Using Number List And Arithmetic Operations</li>
<li>293 Flip Game (Premium)</li>
<li>294 Flip Game II (Premium)</li>
<li>290 Word Pattern</li>
<li>291 Word Pattern II (Premium)</li>
<li>87 Scramble String</li>
<li>*301 Remove Invalid Parentheses</li>
<li>*214 Shortest Palindrome</li>
<li>*386 Lexicographical Numbers</li>
<li>77 Combinations</li>
<li>17 Letter Combinations of a Phone Number</li>
<li>*93 Restore IP Addresses</li>
<li>254 Factor Combinations (Premium)</li>
<li>78 Subsets</li>
<li>90 Subsets II</li>
</ul>
<h2 id="Dynamic-Programming-31"><a href="#Dynamic-Programming-31" class="headerlink" title="Dynamic Programming [31]"></a>Dynamic Programming [31]</h2><ul>
<li>322 Coin Change</li>
<li>*131 Palindrome Partitioning</li>
<li>*132 Palindrome Partitioning II</li>
<li>198 House Robber</li>
<li>213 House Robber II</li>
<li>337 House Robber III</li>
<li>55 Jump Game</li>
<li>45 Jump Game II</li>
<li>121 Best Time to Buy and Sell Stock</li>
<li>122 Best Time to Buy and Sell Stock II<blockquote>
<ol start="309">
<li>Best Time to Buy and Sell Stock with Cooldown</li>
<li>Best Time to Buy and Sell Stock with Transaction Fee</li>
</ol>
</blockquote>
</li>
<li>*123 Best Time to Buy and Sell Stock III</li>
<li>*188 Best Time to Buy and Sell Stock IV</li>
<li>*174 Dungeon Game</li>
<li>*91 Decode Ways</li>
<li>*279 Perfect Squares</li>
<li>*139 Word Break</li>
<li>*140 Word Break II</li>
<li>727 Minimum Window Subsequence (Premium)</li>
<li>*221 Maximal Square</li>
<li>64 Minimum Path Sum</li>
<li>62 Unique Paths</li>
<li>*63 Unique Paths II</li>
<li>256 Paint House (Premium)</li>
<li>265 Paint House II (Premium)</li>
<li>53 Maximum Subarray</li>
<li>152 Maximum Product Subarray</li>
</ul>
<h4 id="DP–2D"><a href="#DP–2D" class="headerlink" title="DP–2D"></a>DP–2D</h4><ul>
<li>72 Edit Distance<blockquote>
<ol start="583">
<li>Delete Operation for Two Strings</li>
<li>Minimum ASCII Delete Sum for Two Strings</li>
</ol>
</blockquote>
</li>
<li>115 Distinct Subsequences Total</li>
<li>5 Longest Palindromic Substring</li>
<li>1143 Longest Common Subsequence<blockquote>
<ol start="516">
<li>Longest Palindromic Subsequence</li>
</ol>
</blockquote>
</li>
<li>Longest Common Substring</li>
</ul>
<h2 id="Data-Structure-Design-6"><a href="#Data-Structure-Design-6" class="headerlink" title="Data Structure Design [6]"></a>Data Structure Design [6]</h2><ul>
<li>*146 LRU Cache</li>
<li>380 Insert Delete GetRandom O(1)</li>
<li>*381 Insert Delete GetRandom O(1) - Duplicates allowed</li>
<li>Insert Delete GetMostFrequent O(1)</li>
<li>379 Design Phone Directory (Premium)</li>
<li>*355 Design Twitter</li>
</ul>
<h2 id="Bit-Manipulation-12"><a href="#Bit-Manipulation-12" class="headerlink" title="Bit Manipulation [12]"></a>Bit Manipulation [12]</h2><ul>
<li>136 Single Number</li>
<li>*137 Single Number II<blockquote>
<ol start="260">
<li>Single Number III</li>
</ol>
</blockquote>
</li>
<li><a href="https://app.codility.com/programmers/lessons/1-iterations/binary_gap/">Maximum Binary Gap</a></li>
<li>191 Number of 1 Bits</li>
<li>190 Reverse Bits</li>
<li>*187 Repeated DNA Sequences</li>
<li>201 Bitwise AND of Numbers Range</li>
<li>*371 Sum of Two Integers</li>
<li>338 Counting Bits</li>
<li>*318 Maximum Product of Word Lengths</li>
<li>*89 Gray Code</li>
<li>*393 UTF-8 Validation</li>
</ul>
<h2 id="Graph-6"><a href="#Graph-6" class="headerlink" title="Graph [6]"></a>Graph [6]</h2><h4 id="topological-sort"><a href="#topological-sort" class="headerlink" title="topological sort"></a>topological sort</h4><ul>
<li>*207 Course Schedule</li>
<li>*210 Course Schedule II</li>
<li>*310 Minimum Height Trees</li>
</ul>
<h4 id="BFS-x2F-DFS"><a href="#BFS-x2F-DFS" class="headerlink" title="BFS&#x2F;DFS"></a>BFS&#x2F;DFS</h4><ul>
<li><ol start="26">
<li>Graph Valid Tree (Premium)</li>
</ol>
</li>
<li>133 Clone Graph</li>
<li>*332 Reconstruct Itinerary</li>
</ul>
<h2 id="Math-x2F-Numbers"><a href="#Math-x2F-Numbers" class="headerlink" title="Math&#x2F;Numbers"></a>Math&#x2F;Numbers</h2><h4 id="power"><a href="#power" class="headerlink" title="power"></a>power</h4><ul>
<li>50 Pow(x,n)</li>
<li>231 Power of Two</li>
<li>326 Power of Three</li>
<li>342 Power of Four</li>
<li>*372 Super Pow</li>
</ul>
<h4 id="x2F"><a href="#x2F" class="headerlink" title="&#x2F;%"></a>&#x2F;%</h4><ul>
<li><p>7 Reverse Integer</p>
</li>
<li><p>9 Palindrome Number</p>
</li>
<li><p>*400 Nth Digit</p>
</li>
<li><p>*166 Fraction to Recurring Decimal</p>
</li>
<li><p>171 Excel Sheet Column Number</p>
</li>
<li><p>168 Excel Sheet Column Title</p>
</li>
<li><p>*172 Factorial Trailing Zeroes</p>
</li>
<li><p>202 Happy Number</p>
</li>
<li><p>204 Count Primes</p>
</li>
<li><p>*66 Plus One</p>
</li>
<li><p>29 Divide Two Integers</p>
</li>
<li><p>43 Multiply Strings</p>
</li>
<li><p>*149 Max Points on a Line</p>
</li>
<li><p>*343 Integer Break</p>
</li>
<li><p>258 Add Digits</p>
</li>
<li><p>*368 Largest Divisible Subset</p>
</li>
<li><p>357 Count Numbers with Unique Digits</p>
</li>
<li><p>*787 Rotated Digits</p>
</li>
<li><p>*402 Remove K Digits</p>
</li>
</ul>
<h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><ul>
<li>*179 Largest Number</li>
<li>120 Triangle</li>
<li>*8 String to Integer</li>
<li>28 Implement strStr()</li>
<li>6 ZigZag Conversion</li>
<li>67 Add Binary</li>
<li>58 Length of Last Word</li>
<li>299 Bulls and Cows</li>
<li>*71 Simplify Path</li>
<li>*165 Compare Version Numbers</li>
<li>118 Pascal’s Triangle</li>
<li>119 Pascal’s Triangle II</li>
<li>38 Count and Say</li>
<li>*224 Basic Calculator</li>
<li>*227 Basic Calculator II</li>
<li>*223 Rectangle Area</li>
<li>162 Find Peak Element</li>
<li>*273 Integer to English Words</li>
<li>68 Text Justification</li>
<li>134 Gas Station</li>
<li>*335 Self Crossing</li>
<li>*330 Patching Array</li>
<li>292 Nim Game</li>
<li>319 Bulb Switcher</li>
<li>276 Paint Fence (Premium)</li>
<li>339 Nested List Weight Sum (Premium)</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Blind-Curated-75</title>
    <url>/blog/2023/02/12/Blind-Curated-75/</url>
    <content><![CDATA[<h2 id="Blind-Curated-75-list"><a href="#Blind-Curated-75-list" class="headerlink" title="Blind Curated 75 list"></a>Blind Curated 75 list</h2><ul>
<li>*647 Palindromic Substrings (Medium)<blockquote>
<ol start="5">
<li>Longest Palindromic Substring</li>
<li>Shortest Palindrome</li>
</ol>
</blockquote>
</li>
<li>*572 Subtree of Another Tree (Easy)</li>
<li>*435 Non-overlapping Intervals (Medium)</li>
<li>*424 Longest Repeating Character Replacement (Medium)</li>
<li>*417 Pacific Atlantic Water Flow (Medium)</li>
<li>371 Sum of Two Integers (Medium)<blockquote>
<ol start="2">
<li>Add Two Numbers</li>
</ol>
</blockquote>
</li>
<li>347 Top K Frequent Elements (Medium)<blockquote>
<ol start="215">
<li>Kth Largest Element in an Array</li>
<li>Top K Frequent Words</li>
</ol>
</blockquote>
</li>
<li>*338 Counting Bits (Easy)<blockquote>
<ol start="191">
<li>Number of 1 Bits</li>
</ol>
</blockquote>
</li>
<li>322 Coin Change (Medium)<blockquote>
<p>*983. Minimum Cost For Tickets</p>
</blockquote>
</li>
<li>*300 Longest Increasing Subsequence (Medium)</li>
<li>*297 Serialize and Deserialize Binary Tree (Hard)</li>
<li>295 Find Median from Data Stream (Hard)<blockquote>
<p>*480. Sliding Window Median</p>
</blockquote>
</li>
<li>268 Missing Number (Easy)<blockquote>
<ol start="136">
<li>Single Number</li>
<li>Find the Duplicate Number</li>
</ol>
<p>*41. First Missing Positive<br>645. Set Mismatch<br>448. Find All Numbers Disappeared in an Array</p>
</blockquote>
</li>
<li>242 Valid Anagram (Easy)<blockquote>
<ol start="49">
<li>Group Anagrams</li>
<li>Find All Anagrams in a String</li>
</ol>
</blockquote>
</li>
<li>238 Product of Array Except Self (Medium)<blockquote>
<ol start="42">
<li>Trapping Rain Water</li>
<li>Maximum Product Subarray</li>
</ol>
</blockquote>
</li>
<li><ol start="235">
<li>Lowest Common Ancestor of a Binary Search Tree (Medium)<blockquote>
<ol start="236">
<li>Lowest Common Ancestor of a Binary Tree</li>
</ol>
</blockquote>
</li>
</ol>
</li>
<li>230 Kth Smallest Element in a BST (Medium)<blockquote>
<ol start="94">
<li>Binary Tree Inorder Traversal</li>
</ol>
<p>*671. Second Minimum Node In a Binary Tree</p>
</blockquote>
</li>
<li>226 Invert Binary Tree (Easy)</li>
<li>217 Contains Duplicate (Easy)<blockquote>
<p>219 Contains Duplicate II<br>220 Contains Duplicate III<br>*220. Contains Duplicate III</p>
</blockquote>
</li>
<li>213 House Robber II (Medium)<blockquote>
<ol start="198">
<li>House Robber</li>
</ol>
<p>*337. House Robber III</p>
</blockquote>
</li>
<li>*212 Word Search II (Hard)<blockquote>
<p>*980. Unique Paths III</p>
</blockquote>
</li>
<li>*211 Design Add and Search Words Data Structure (Medium)</li>
<li>208 Implement Trie (Prefix Tree) (Medium)<blockquote>
<p>*211 Design Add and Search Words Data Structure (Medium)<br>*648. Replace Words<br>*676. Implement Magic Dictionary</p>
</blockquote>
</li>
<li>*207 Course Schedule (Medium)</li>
<li>206 Reverse Linked List (Easy)<blockquote>
<ol start="92">
<li>Reverse Linked List II</li>
</ol>
<p>*234. Palindrome Linked List<br>25. Reverse Nodes in k-Group<br>2074. Reverse Nodes in Even Length Groups<br>2130. Maximum Twin Sum of a Linked List</p>
</blockquote>
</li>
<li>200 Number of Islands (Medium)<blockquote>
<p>*130. Surrounded Regions<br>695 Max Area of Island (Medium)<br>1905 Count Sub Islands (Medium)</p>
<ol start="1992">
<li>Find All Groups of Farmland<br>1254 Number of Closed Islands (Medium)<br>1020 Number of Enclaves (Medium)<br>733 Flood Fill (Easy)</li>
</ol>
</blockquote>
</li>
<li>198 House Robber (Easy)</li>
<li>191 Number of 1 Bits (Easy)</li>
<li>190 Reverse Bits (Easy)<blockquote>
<ol start="7">
<li>Reverse Integer</li>
<li>A Number After a Double Reversal</li>
</ol>
</blockquote>
</li>
<li>*153. Find Minimum in Rotated Sorted Array (Medium)<blockquote>
<ol start="33">
<li>Search in Rotated Sorted Array</li>
</ol>
<p>*154. Find Minimum in Rotated Sorted Array II</p>
</blockquote>
</li>
<li>152 Maximum Product Subarray (Medium)<blockquote>
<ol start="53">
<li>Maximum Subarray</li>
<li>Product of Array Except Self</li>
<li>Maximum Product of Three Numbers</li>
</ol>
<p>*713. Subarray Product Less Than K</p>
</blockquote>
</li>
<li>143 Reorder List (Medium)<blockquote>
<ol start="2095">
<li>Delete the Middle Node of a Linked List</li>
<li>Remove Nth Node From End of List</li>
<li>Remove Linked List Elements</li>
<li>Middle of the Linked List</li>
<li>Swapping Nodes in a Linked List</li>
</ol>
<p>*24. Swap Nodes in Pairs</p>
</blockquote>
</li>
<li>141 Linked List Cycle (Easy)<blockquote>
<ol start="142">
<li>Linked List Cycle II</li>
<li>Happy Number</li>
</ol>
</blockquote>
</li>
<li>*139 Word Break (Medium)<blockquote>
<p>*140. Word Break II</p>
</blockquote>
</li>
<li>133 Clone Graph (Medium)<blockquote>
<p>*138. Copy List with Random Pointer</p>
</blockquote>
</li>
<li>*128 Longest Consecutive Sequence (Medium)</li>
<li>125 Valid Palindrome<blockquote>
<ol start="234">
<li>Palindrome Linked List</li>
</ol>
<p>*680. Valid Palindrome II<br>2108. Find First Palindromic String in the Array</p>
</blockquote>
</li>
<li>*124 Binary Tree Maximum Path Sum (Hard)<blockquote>
<ol start="112">
<li>Path Sum</li>
<li>Path Sum II</li>
<li>Path Sum III</li>
<li>Sum Root to Leaf Numbers</li>
</ol>
<p>*687. Longest Univalue Path</p>
</blockquote>
</li>
<li>121 Best Time to Buy and Sell Stock (Easy)<blockquote>
<ol start="122">
<li>Best Time to Buy and Sell Stock II</li>
</ol>
<p>*123. Best Time to Buy and Sell Stock III<br>*188. Best Time to Buy and Sell Stock IV<br>*309. Best Time to Buy and Sell Stock with Cooldown<br>*714. Best Time to Buy and Sell Stock with Transaction Fee</p>
</blockquote>
</li>
<li>105 Construct Binary Tree from Preorder and Inorder Traversal<blockquote>
<ol start="106">
<li>Construct Binary Tree from Inorder and Postorder Traversal</li>
</ol>
</blockquote>
</li>
<li>104 Maximum Depth of Binary Tree (Easy)<blockquote>
<p>*110. Balanced Binary Tree<br>111 Minimum Depth of Binary Tree</p>
<ol start="559">
<li>Maximum Depth of N-ary Tree</li>
</ol>
</blockquote>
</li>
<li>102 Binary Tree Level Order Traversal (Medium)<blockquote>
<p>94 Binary Tree Inorder Traversal (Easy)<br>144 Binary Tree Preorder Traversal (Easy)<br>145 Binary Tree Postorder Traversal (Easy)<br>107 Binary Tree Level Order Traversal II (Medium)<br>103 Binary Tree Zigzag Level Order Traversal (Medium)<br>965 Univalued Binary Tree (Easy)</p>
<ol start="637">
<li>Average of Levels in Binary Tree</li>
<li>N-ary Tree Level Order Traversal</li>
<li>N-ary Tree Preorder Traversal</li>
<li>N-ary Tree Postorder Traversal</li>
<li>Cousins in Binary Tree</li>
</ol>
</blockquote>
</li>
<li>100 Same Tree (Easy)</li>
<li>98 Validate Binary Search Tree (Medium)<blockquote>
<p>450 Delete Node in a BST (Medium)<br>701 Insert into a Binary Search Tree (Medium)<br>700 Search in a Binary Search Tree (Easy)</p>
<ol start="94">
<li>Binary Tree Inorder Traversal</li>
<li>Find Mode in Binary Search Tree</li>
</ol>
</blockquote>
</li>
<li>*91 Decode Ways (Medium)</li>
<li>79 Word Search (Medium)<blockquote>
<p>*212. Word Search II</p>
</blockquote>
</li>
<li>76 Minimum Window Substring (Hard)<blockquote>
<p>209 Minimum Size Subarray Sum</p>
<ol start="567">
<li>Permutation in String</li>
</ol>
<p>*239 Sliding Window Maximum<br>*30. Substring with Concatenation of All Words<br>567 Permutation in String (Medium)</p>
</blockquote>
</li>
<li>*73 Set Matrix Zeroes (Medium)</li>
<li>70 Climbing Stairs (Easy)<blockquote>
<ol start="1137">
<li>N-th Tribonacci Number</li>
<li>Fibonacci Number</li>
<li>Min Cost Climbing Stairs</li>
</ol>
</blockquote>
</li>
<li>62 Unique Paths (Medium)<blockquote>
<ol start="63">
<li>Unique Paths II</li>
<li>Minimum Path Sum</li>
<li>Minimum Cost Homecoming of a Robot in a Grid</li>
</ol>
</blockquote>
</li>
<li>57 Insert Interval (Medium)</li>
<li>56 Merge Intervals (Medium)<blockquote>
<ol start="986">
<li>Interval List Intersections</li>
</ol>
</blockquote>
</li>
<li>55 Jump Game (Medium)<blockquote>
<ol start="45">
<li>Jump Game II</li>
</ol>
</blockquote>
</li>
<li>54 Spiral Matrix (Medium)<blockquote>
<ol start="59">
<li>Spiral Matrix II</li>
</ol>
<p>*885. Spiral Matrix III</p>
</blockquote>
</li>
<li>53 Maximum Subarray (Easy)<blockquote>
<ol start="121">
<li>Best Time to Buy and Sell Stock</li>
<li>Maximum Product Subarray</li>
</ol>
<p>*697. Degree of an Array</p>
</blockquote>
</li>
<li>49 Group Anagrams (Medium)<blockquote>
<ol start="242">
<li>Valid Anagram</li>
</ol>
</blockquote>
</li>
<li>48 Rotate Image (Medium)<blockquote>
<ol start="1886">
<li>Determine Whether Matrix Can Be Obtained By Rotation</li>
<li>Degree of an Array</li>
</ol>
</blockquote>
</li>
<li>39 Combination Sum (Medium)<blockquote>
<ol start="40">
<li>Combination Sum II</li>
<li>Combination Sum III</li>
<li>Letter Combinations of a Phone Number</li>
<li>Combinations</li>
</ol>
</blockquote>
</li>
<li>33 Search in Rotated Sorted Array (Medium)<blockquote>
<p>*81. Search in Rotated Sorted Array II<br>*153. Find Minimum in Rotated Sorted Array<br>*154. Find Minimum in Rotated Sorted Array II</p>
</blockquote>
</li>
<li>23 Merge k Sorted Lists (Hard)<blockquote>
<ol start="21">
<li>Merge Two Sorted Lists</li>
</ol>
<p>*264. Ugly Number II</p>
</blockquote>
</li>
<li>21 Merge Two Sorted Lists (Medium)</li>
<li>20 Valid Parentheses (Easy)<blockquote>
<ol start="22">
<li>Generate Parentheses</li>
</ol>
<p>*32. Longest Valid Parentheses</p>
</blockquote>
</li>
<li>19 Remove Nth Node From End of List (Medium)<blockquote>
<ol start="2095">
<li>Delete the Middle Node of a Linked List</li>
<li>Swapping Nodes in a Linked List</li>
</ol>
</blockquote>
</li>
<li>15 3Sum (Medium)<blockquote>
<ol start="16">
<li>3Sum Closest</li>
<li>4Sum</li>
</ol>
</blockquote>
</li>
<li>11 Container With Most Water (Medium)<blockquote>
<ol start="42">
<li>Trapping Rain Water</li>
</ol>
</blockquote>
</li>
<li>5 Longest Palindromic Substring (Medium)<blockquote>
<ol start="516">
<li>Longest Palindromic Subsequence</li>
</ol>
<p>*214. Shortest Palindrome<br>*336. Palindrome Pairs<br>647. Palindromic Substrings</p>
</blockquote>
</li>
<li>3 Longest Substring Without Repeating Characters (Medium)<blockquote>
<p>*1695. Maximum Erasure Value<br>*992. Subarrays with K Different Integers</p>
</blockquote>
</li>
<li>1 Two Sum (Easy)<blockquote>
<ol start="167">
<li>Two Sum II - Input Array Is Sorted</li>
</ol>
<p>*653. Two Sum IV - Input is a BST<br>560. Subarray Sum Equals K<br>2006. Count Number of Pairs With Absolute Difference K</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>經典必會Hard題</title>
    <url>/blog/2023/02/12/Hard/</url>
    <content><![CDATA[<ul>
<li>4 Median of Two Sorted Arrays</li>
<li>*10 Regular Expression Matching</li>
<li>23 Merge k Sorted Lists</li>
<li>25 Reverse Nodes in k-Group </li>
<li>*30 Substring with Concatenation of All Words</li>
<li>32 Longest Valid Parentheses</li>
<li>37 Sudoku Solver</li>
<li>*41 First Missing Positive</li>
<li>42 Trapping Rain Water </li>
<li>*44 Wildcard Matching</li>
<li>*60 Permutation Sequence</li>
<li>68 Text Justification</li>
<li>72 Edit Distance</li>
<li>76 Minimum Window Substring</li>
<li>84 Largest Rectangle in Histogram</li>
<li>85 Maximal Rectangle</li>
<li>87 Scramble String</li>
<li>*115 Distinct Subsequences</li>
<li>123 Best Time to Buy and Sell Stock III</li>
<li>*124 Binary Tree Maximum Path Sum</li>
<li>126 Word Ladder II</li>
<li>127 Word Ladder</li>
<li>132 Palindrome Partitioning II</li>
<li>135 Candy</li>
<li>140 Word Break II</li>
<li>154 Find Minimum in Rotated Sorted Array II</li>
<li>*164 Maximum Gap</li>
<li>174 Dungeon Game</li>
<li>188 Best Time to Buy and Sell Stock IV</li>
<li>*212 Word Search II</li>
<li>214 Shortest Palindrome</li>
<li>224 Basic Calculator</li>
<li>239 Sliding Window Maximum</li>
<li>*273 Integer to English Words</li>
<li>265 Paint House II (Premium)</li>
<li>295 Find Median from Data Stream</li>
<li>297 Serialize and Deserialize Binary Tree </li>
<li>301 Remove Invalid Parentheses</li>
<li>*315 Count of Smaller Numbers After Self</li>
<li>*329 Longest Increasing Path in a Matrix</li>
<li>*335 Self Crossing</li>
<li>*330 Patching Array</li>
<li>*336 Palindrome Pairs</li>
<li>352 Data Stream as Disjoint Intervals</li>
<li>*354 Russian Doll Envelopes</li>
<li>363 Max Sum of Rectangle No Larger Than K</li>
<li>381 Insert Delete GetRandom O(1) - Duplicates allowed</li>
<li>*410 Split Array Largest Sum</li>
<li>*480 Sliding Window Median</li>
<li>727 Minimum Window Subsequence (Premium)</li>
<li>768 Max Chunks To Make Sorted II</li>
<li>773 Sliding Puzzle</li>
<li>793 Preimage Size of Factorial Zeroes Function</li>
<li>857 Minimum Cost to Hire K Workers</li>
<li>895 Maximum Frequency Stack</li>
<li>*940 Distinct Subsequences II</li>
<li>980 Unique Paths III</li>
<li>*987 Vertical Order Traversal of a Binary Tree</li>
<li>*996 Number of Squareful Arrays</li>
<li>1373 Maximum Sum BST in Binary Tree</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2023/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo NeXt的設置(持續更新)</title>
    <url>/blog/2022/02/12/hexo%20NeXt/</url>
    <content><![CDATA[<h1 id="hexo-網誌框架-github-Page"><a href="#hexo-網誌框架-github-Page" class="headerlink" title="hexo 網誌框架 + github Page"></a><a href="https://hexo.io/zh-cn/">hexo 網誌框架 + github Page</a></h1><h2 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server # 啟動</span><br></pre></td></tr></table></figure>

<h2 id="Choose-theme"><a href="#Choose-theme" class="headerlink" title="Choose theme"></a><a href="https://hexo.io/themes/">Choose theme</a></h2><ul>
<li>很多人使用<a href="https://theme-next.iissnan.com/getting-started.html">NeXt</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>也可以下載穩定版本zip，解壓縮後重新命名成next，放到blog&#x2F;themes 底下，自己新增themes資料夾。<br>我自己也使用NeXt</p>
<ul>
<li>我遇到的問題<ul>
<li><a href="https://github.com/iissnan/hexo-theme-next/issues/2253">可能會無法正常啟動</a>，原因是hexo在5.0之後把swig刪除，需要自己安裝<code>npm i hexo-renderer-swig</code></li>
<li><a href="https://www.zhihu.com/question/353097489/answer/888107103">cannot GET &#x2F;20%&#x2F;</a></li>
</ul>
</li>
</ul>
<p><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/676805/">參考配置</a><br><a href="https://maoao530.github.io/2017/01/25/hexo-blog-seo/">參考配置2</a><br><a href="https://ed521.github.io/2020/05/hexo-next-upgrade/">參考配置3</a></p>
<h3 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h3><ul>
<li>去_config.yml(.&#x2F;_config.yml)<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment"># landscape</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-tw</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://a920604a.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server # 啟動</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="我的-themes下的配置文件-theme-x2F-next-x2F-config-yml"><a href="#我的-themes下的配置文件-theme-x2F-next-x2F-config-yml" class="headerlink" title="我的 themes下的配置文件(.theme&#x2F;next&#x2F;_config.yml)"></a>我的 themes下的配置文件(.theme&#x2F;next&#x2F;_config.yml)</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/home/||</span> <span class="string">home</span></span><br><span class="line">  <span class="string">目錄:</span> <span class="string">/archives/||</span> <span class="string">archive</span></span><br><span class="line">  <span class="string">分類:</span> <span class="string">/categories/||</span> <span class="string">th</span></span><br><span class="line">  <span class="string">標籤:</span> <span class="string">/tags/||</span> <span class="string">tags</span></span><br><span class="line">  <span class="string">關於我:</span> <span class="string">/about/||</span> <span class="string">user</span></span><br><span class="line"><span class="comment"># /|| 中間不能有空格</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span> <span class="comment"># 文章摘要</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/a920604a</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:a920604a@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">FB Page:</span> <span class="string">https://www.facebook.com/yu.an.1800</span> <span class="string">||</span> <span class="string">facebook</span></span><br><span class="line">  <span class="attr">Instagram:</span> <span class="string">https://instagram.com/yuan3509</span> <span class="string">||</span> <span class="string">instagram</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/animal3.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拜訪流量計算</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-user&quot;&gt;&lt;/i&gt;訪問人數</span></span><br><span class="line">  <span class="attr">site_uv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-eye&quot;&gt;&lt;/i&gt;總訪問量</span></span><br><span class="line">  <span class="attr">site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-file-o&quot;&gt;&lt;/i&gt;瀏覽</span></span><br><span class="line">  <span class="attr">page_pv_footer:</span> <span class="string">次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜尋功能 必須安裝 npm install hexo-generator-searchdb --save</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># npm install --save hexo-symbols-count-time </span></span><br><span class="line"><span class="string">字數統計以及閱讀時間</span></span><br></pre></td></tr></table></figure>


<h2 id="新增-pags-categories-about資料夾"><a href="#新增-pags-categories-about資料夾" class="headerlink" title="新增 pags, categories, about資料夾"></a>新增 pags, categories, about資料夾</h2><p><code>hexo g</code>會編譯並產生public目錄，底下為之後要部署的網誌</p>
<ul>
<li>新增 pags, categories, about資料夾<br>用命令方式新增，會自動在source 目錄底下新增該目錄並在目錄底下新增<code>index.md</code>，如下。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hexo new page <span class="string">&quot;home&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;archives&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="comment"># INFO  Validating config</span></span><br><span class="line"><span class="comment"># INFO  Created: ~/Desktop/project/blog/source/categories/index.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo new [layout] &lt;title&gt;</span></span><br><span class="line"><span class="comment"># 佈局	路徑</span></span><br><span class="line"><span class="comment"># post	source/_posts</span></span><br><span class="line"><span class="comment"># page	source</span></span><br><span class="line"><span class="comment"># draft	source/_drafts</span></span><br></pre></td></tr></table></figure>
在手動至<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/source/categories/index.md</span></span><br><span class="line"><span class="string">+</span> <span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="string">/source/tags/index.md</span></span><br><span class="line"><span class="string">+</span> <span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="做了哪些事"><a href="#做了哪些事" class="headerlink" title="做了哪些事"></a>做了哪些事</h4><ul>
<li>搜尋功能 <code>npm install hexo-generator-searchdb --save</code></li>
<li>上傳github  <code>npm install hexo-deployer-git --save</code></li>
<li>加載進度條<br><code>$ git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace</code><br>修改 next&#x2F;_config.yml<br><code>pace = true</code></li>
<li>網站運行時間<br>修改 next&#x2F;_config.yml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2022</span><br></pre></td></tr></table></figure></li>
<li><a href="https://www.chingow.cn/posts/c7372a12.html">sidebar 近期文章</a></li>
<li>顯示當前瀏覽進度<br>修改 next&#x2F;_config.yml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  sidebar: false</span><br><span class="line">  scrollpercent: true  #  瀏覽頁面時，顯示當前瀏覽紀錄</span><br></pre></td></tr></table></figure>
<ul>
<li>側邊欄移至左邊<br>Muse 和 Mist 則需要深度修改source code才能實現改變側邊欄位置<br>修改themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.sidebar-toggle &#123;</span><br><span class="line">  left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  left: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
修改themes&#x2F;next&#x2F;source&#x2F;js&#x2F;src&#x2F;motion.js<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-     &#123;paddingRight: SIDEBAR_WIDTH&#125;,</span><br><span class="line">+     &#123;paddingLeft: SIDEBAR_WIDTH&#125;,</span><br><span class="line"></span><br><span class="line">-   NexT.utils.isDesktop() &amp;&amp; $(&#x27;body&#x27;).velocity(&#x27;stop&#x27;).velocity(&#123;paddingRight: 0&#125;);</span><br><span class="line">+   NexT.utils.isDesktop() &amp;&amp; $(&#x27;body&#x27;).velocity(&#x27;stop&#x27;).velocity(&#123;paddingLeft: 0&#125;);</span><br></pre></td></tr></table></figure></li>
<li><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93670772">添加文章字數與所需閱讀時間</a></li>
</ul>
<h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><ul>
<li><p><a href="https://maoao530.github.io/2017/01/25/hexo-blog-seo/">更改背景顏色</a></p>
</li>
<li><p>更改blog背景</p>
</li>
<li><p><a href="https://teddybearfp.github.io/2019/03/29/Hexo-Next-%E4%BA%BA%E6%95%B8%E7%B5%B1%E8%A8%88-Busuanzi-LeanCloud/">人數統計</a></p>
</li>
<li><p><a href="https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">評論系統</a><code>npm install --save gitment</code></p>
</li>
<li><p>網站地圖 <code>npm install hexo-generator-sitemap --save</code></p>
</li>
<li><p>點擊愛心功能</p>
</li>
<li><p>鑲嵌音樂</p>
</li>
<li><p>請我喝一杯咖啡XD</p>
</li>
<li><p>下拉式選單</p>
</li>
<li><p>整理layout</p>
</li>
</ul>
<h2 id="佈署至GitHub-Pages"><a href="#佈署至GitHub-Pages" class="headerlink" title="佈署至GitHub Pages"></a>佈署至GitHub Pages</h2><p>安裝git套件<br><code>npm install hexo-deployer-git --save</code><br>至github新增repo</p>
<p>至_config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/a920604a/a920604a.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p><code>hexo g</code>生成網誌至public目錄<br>上傳至github <code>hexo d</code><br>public in<br><code>https://a920604a.github.io/a920604a.github.io</code></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Dijkstra</title>
    <url>/blog/2023/02/12/DataStruct/Dijkstra/</url>
    <content><![CDATA[<p>Dijkstra &#x3D; BFS 進階版</p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li><ol start="743">
<li>Network Delay Time</li>
</ol>
</li>
<li><ol start="1514">
<li>Path with Maximum Probability</li>
</ol>
</li>
<li><ol start="1631">
<li>Path With Minimum Effort</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Flood Fill</title>
    <url>/blog/2023/02/12/DataStruct/FloodFill/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li><p>733 Flood Fill (Easy) </p>
</li>
<li><p>200 Number of Islands (Medium)</p>
</li>
<li><p>1254 Number of Closed Islands (Medium)</p>
</li>
<li><p>1020 Number of Enclaves (Medium)</p>
</li>
<li><p>695 Max Area of Island (Medium)</p>
</li>
<li><p>1905 Count Sub Islands (Medium)</p>
</li>
<li><p>694 Number of Distinct Islands (Medium, Premium)</p>
</li>
<li><p>1992 Find All Groups of Farmland</p>
</li>
</ul>
<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>基本上都可以用<code>dfs</code> <code>bfs</code> 解決</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph</title>
    <url>/blog/2023/02/12/DataStruct/Graph/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li><p>797 All Paths From Source to Target (Medium) </p>
</li>
<li><p>133 Clone Graph (Medium)</p>
</li>
<li><p>207 Course Schedule (Medium)</p>
</li>
<li><p>210 Course Schedule II (Medium)</p>
</li>
<li><p>785 Is Graph Bipartite? (Medium)</p>
</li>
<li><p>886 Possible Bipartition (Medium)</p>
</li>
</ul>
<p>Union-Find</p>
<ul>
<li>323 Number of Connected Components in an Undirected Graph (Medium, Premium)</li>
<li>547 Number of Provinces (Medium)</li>
<li>130 Surrounded Regions (Medium)</li>
<li>990 Satisfiability of Equality Equations (Medium)</li>
</ul>
<p>Kruskal</p>
<ul>
<li>261 Graph Valid Tree (Medium, Premium)</li>
<li>1135 Connecting Cities With Minimum Cost (Medium, Premium)</li>
<li>1584 Min Cost to Connect All Points (Medium)</li>
</ul>
<p>Dijstrka</p>
<ul>
<li><p>743 Network Delay Time (Medium)</p>
</li>
<li><p>1514 Path with Maximum Probability (Medium)</p>
</li>
<li><p>1631 Path With Minimum Effort (Medium)</p>
</li>
<li><p>277 Find the Celebrity (Medium, Premium)</p>
</li>
</ul>
<p>補充</p>
<ul>
<li><p>787 Cheapest Flights Within K Stops (Medium) </p>
</li>
<li><p>847 Shortest Path Visiting All Nodes (Hard)</p>
</li>
</ul>
<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><h4 id="多個子樹的樹-圖的前身"><a href="#多個子樹的樹-圖的前身" class="headerlink" title="多個子樹的樹 - 圖的前身"></a>多個子樹的樹 - 圖的前身</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (TreeNode child : root.children)</span><br><span class="line">        <span class="built_in">traverse</span>(child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="圖"><a href="#圖" class="headerlink" title="圖"></a>圖</h4><p>圖可能會有環，所以需要另外空間去紀錄拜訪過的點</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有環的圖</span></span><br><span class="line">Graph graph;</span><br><span class="line">boolean[] visited;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*`图遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode neighbor : graph.<span class="built_in">neighbors</span>(s))</span><br><span class="line">        <span class="built_in">traverse</span>(neighbor);</span><br><span class="line">    <span class="comment">// 离开节点 s</span></span><br><span class="line">    visited[s] = <span class="literal">false</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有向圖含有環的時候才需要 visited 數組輔助。</span></span><br><span class="line"><span class="comment">// 如果沒有環，連visited 都可以省略了，等同於樹的遍歷</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Linked List</title>
    <url>/blog/2023/02/12/DataStruct/LinkedList/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li><p>19 Remove Nth Node From End of List (Medium)</p>
</li>
<li><p>21 Merge Two Sorted Lists</p>
</li>
<li><p>23 Merge k Sorted Lists</p>
</li>
<li><p>141 Linked List Cycle (Easy)</p>
</li>
<li><p>142 Linked List Cycle II (Medium)</p>
</li>
<li><p>160 Intersection of Two Linked Lists</p>
</li>
<li><p>876 Middle of the Linked List (Easy)</p>
</li>
<li><p>2 Add Two Numbers (Medium)</p>
</li>
<li><p>25 Reverse Nodes in k-Group (Hard)</p>
</li>
<li><p>83 Remove Duplicates from Sorted List (Easy)</p>
</li>
<li><p>206 Reverse Linked List(Easy)</p>
</li>
<li><p>92 Reverse Linked List II (Medium)</p>
</li>
<li><p>234 Palindrome Linked List (Easy)</p>
</li>
<li><p>203 Remove Linked List Elements</p>
</li>
<li><p>83 Remove Duplicates from Sorted List</p>
</li>
<li><p>*82 Remove Duplicates from Sorted List II</p>
</li>
</ul>
<p>補充</p>
<ul>
<li>2095 Delete the Middle Node of a Linked List (Medium)</li>
<li>2130 Maximum Twin Sum of a Linked List (Medium)</li>
<li>148 Sort List (Medium)</li>
</ul>
<h2 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode *next;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">ListNode</span>():<span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        ListNode *first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">LinkedList</span>():<span class="built_in">first</span>()&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Push_back</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Push_front</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Pop_back</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Pop_front</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;the list is empty&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* cur = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        std::cout&lt;&lt;cur-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cur = cur-&gt;next;    </span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Push_back</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    ListNode* newnode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        first = newnode;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* cur = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next)&#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Push_front</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    ListNode* newnode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        first = newnode;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newnode-&gt;next = first;</span><br><span class="line">    first = newnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;the list is empty&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* cur = first;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        ListNode * delnode = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> delnode;</span><br><span class="line">        first = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* post = cur-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(post-&gt;next)&#123;</span><br><span class="line">        post = post-&gt;next;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> post;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;the list is empty&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* cur = first;</span><br><span class="line">    <span class="comment">// if(cur-&gt;next==nullptr)&#123;</span></span><br><span class="line">    <span class="comment">//     ListNode * delnode = cur;</span></span><br><span class="line">    <span class="comment">//     cur = cur-&gt;next;</span></span><br><span class="line">    <span class="comment">//     delete delnode;</span></span><br><span class="line">    <span class="comment">//     first = cur;</span></span><br><span class="line">    <span class="comment">//     return;        </span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    ListNode * delnode = cur;</span><br><span class="line">    cur = cur-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> delnode;</span><br><span class="line">    first = cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Delete</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;the list is empty&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode * cur = first;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;val==x)&#123;</span><br><span class="line">        ListNode * delnode = cur;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> delnode;</span><br><span class="line">        first = cur;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode * post = cur-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(post)&#123;</span><br><span class="line">        <span class="keyword">if</span>(post-&gt;val==x)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        post = post-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(post==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    ListNode * delnode = post;</span><br><span class="line">    cur-&gt;next=post-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> delnode;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt;<span class="string">&quot;the list is empty&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(first-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        ListNode * delnode = first;</span><br><span class="line">        first = first-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> delnode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ListNode * cur = first; // bad idea</span></span><br><span class="line">    <span class="keyword">while</span>(first)&#123;</span><br><span class="line">        ListNode * delnode = first;</span><br><span class="line">        first = first-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> delnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkedList::Reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">nullptr</span> || first-&gt;next==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    ListNode *pre = <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode *cur = first;</span><br><span class="line">    ListNode *post = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(post)&#123;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = post;</span><br><span class="line">        post = post-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    first = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkedList l;</span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    l.<span class="built_in">Push_back</span>(<span class="number">5</span>);</span><br><span class="line">    l.<span class="built_in">Push_back</span>(<span class="number">8</span>);</span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line">    l.<span class="built_in">Push_front</span>(<span class="number">3</span>);</span><br><span class="line">    l.<span class="built_in">Push_front</span>(<span class="number">1</span>);</span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line">    <span class="comment">// l.Pop_front();</span></span><br><span class="line">    <span class="comment">// l.Pop_front();</span></span><br><span class="line">    <span class="comment">// l.Pop_back();</span></span><br><span class="line">    <span class="comment">// l.Pop_back();</span></span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line">    l.<span class="built_in">Reverse</span>();</span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line">    l.<span class="built_in">Delete</span>(<span class="number">3</span>);</span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line">    l.<span class="built_in">Clear</span>();</span><br><span class="line">    l.<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Math</title>
    <url>/blog/2023/02/12/DataStruct/Math/</url>
    <content><![CDATA[<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>a^a &#x3D; 0, a^0 &#x3D; a 滿足交換性</p>
<p>n &amp; (n-1) </p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>191 Number of 1 Bits (Easy)</li>
<li>231 Power of Two (Easy)</li>
<li>172 Factorial Trailing Zeroes (Easy)</li>
<li>793 Preimage Size of Factorial Zeroes Function (Hard)</li>
<li>204 Count Primes (Easy)</li>
<li>372 Super Pow (Medium)</li>
<li>448 Find All Numbers Disappeared in an Array (Easy)</li>
<li>654 Maximum Binary Tree (Medium)</li>
<li>382 Linked List Random Node (Medium)</li>
<li>398 Random Pick Index (Medium)</li>
<li>26 Remove Duplicates from Sorted Array (Easy)</li>
<li>83 Remove Duplicates from Sorted List (Easy)</li>
<li>27 Remove Element (Easy)</li>
<li>283 Move Zeroes (Easy)</li>
<li>292 Nim Game (Easy)</li>
<li>877 Stone Game (Medium)</li>
<li>319 Bulb Switcher (Medium)</li>
</ul>
<p>[補充]</p>
<ul>
<li>263 Ugly Number</li>
<li>264 Ugly Number II</li>
<li>1201 Ugly Number III</li>
<li>313 Super Ugly Number</li>
<li>279 Perfect Squares</li>
</ul>
<h2 id="Bit-manipulation"><a href="#Bit-manipulation" class="headerlink" title="Bit manipulation"></a>Bit manipulation</h2><h3 id="191-Number-of-1-Bits-Easy"><a href="#191-Number-of-1-Bits-Easy" class="headerlink" title="191 Number of 1 Bits (Easy)"></a>191 Number of 1 Bits (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        ret++;</span><br><span class="line">        n = n&amp;(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="190-Reverse-Bits-Easy"><a href="#190-Reverse-Bits-Easy" class="headerlink" title="190 Reverse Bits (Easy)"></a>190 Reverse Bits (Easy)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> <span class="title function_">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">uint32_t</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt)&#123;</span><br><span class="line">        ret &lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        cnt-=<span class="number">1</span>;</span><br><span class="line">        ret += n&amp;<span class="number">1</span>;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="231-Power-of-Two-Easy"><a href="#231-Power-of-Two-Easy" class="headerlink" title="231 Power of Two (Easy)"></a>231 Power of Two (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (n&amp;(n<span class="number">-1</span>)) ==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="338-Counting-Bits-Easy"><a href="#338-Counting-Bits-Easy" class="headerlink" title="338 Counting Bits (Easy)"></a>338 Counting Bits (Easy)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">countBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//  0       -&gt;  0</span></span><br><span class="line">        <span class="comment">//  1(00)   -&gt;  1</span></span><br><span class="line">        <span class="comment">//  2(01)   -&gt;  1</span></span><br><span class="line">        <span class="comment">//  3(10)   -&gt;  2</span></span><br><span class="line">        <span class="comment">//  4(011)  -&gt;  1</span></span><br><span class="line">        <span class="comment">//  5(100)  -&gt;  2</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">ret</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            ret[i] = ret[i&amp;(i<span class="number">-1</span>)]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Duplicates-and-Unique"><a href="#Duplicates-and-Unique" class="headerlink" title="Duplicates and Unique"></a>Duplicates and Unique</h2><h3 id="136-Single-Number-Easy"><a href="#136-Single-Number-Easy" class="headerlink" title="136 Single Number (Easy)"></a>136 Single Number (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// option 1 bit manipulation</span></span><br><span class="line">        <span class="comment">// a ^ a = 0 a ^ 0 = a，^有交換率，成對的數字變成０</span></span><br><span class="line">        <span class="comment">// int ret = 0;</span></span><br><span class="line">        <span class="comment">// for(int n:nums) ret^= n;</span></span><br><span class="line">        <span class="comment">// return ret;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// optnio 2 general case </span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">                sum += (n&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += (sum%<span class="number">2</span>)&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="137-Single-Number-II-Medium"><a href="#137-Single-Number-II-Medium" class="headerlink" title="137 Single Number II (Medium)"></a>137 Single Number II (Medium)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">                sum += (n&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += (sum%<span class="number">3</span>)&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="260-Single-Number-III-Medium"><a href="#260-Single-Number-III-Medium" class="headerlink" title="260 Single Number III (Medium)"></a>260 Single Number III (Medium)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> diff = <span class="number">0</span>; <span class="comment">// 0 到 4,294,967,295</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) diff ^=n;</span><br><span class="line">        diff &amp;= -diff;</span><br><span class="line">        <span class="comment">//-diff 110 =&gt; reverse bit and + 1 =&gt; 001 -&gt; 010       </span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&amp;diff) ret[<span class="number">0</span>]^=a;</span><br><span class="line">            <span class="keyword">else</span> ret[<span class="number">1</span>]^=a;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> ret;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="268-Missing-Number-Easy"><a href="#268-Missing-Number-Easy" class="headerlink" title="268 Missing Number (Easy)"></a>268 Missing Number (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// math</span></span><br><span class="line">        <span class="comment">// int n = nums.size();</span></span><br><span class="line">        <span class="comment">// int total = (n+1)*n/2;        </span></span><br><span class="line">        <span class="comment">// for(int n:nums) total -= n;        </span></span><br><span class="line">        <span class="comment">// return total;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// bit manipulation</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ret = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) ret ^= (i^nums[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="287-Find-the-Duplicate-Number-Medium-Two-pointer-and-cycle"><a href="#287-Find-the-Duplicate-Number-Medium-Two-pointer-and-cycle" class="headerlink" title="287 Find the Duplicate Number (Medium) Two pointer and cycle"></a>287 Find the Duplicate Number (Medium) Two pointer and cycle</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow =<span class="number">0</span>, fast =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">            slow = nums[slow]; </span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="389-Find-the-Difference"><a href="#389-Find-the-Difference" class="headerlink" title="389 Find the Difference"></a>389 Find the Difference</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// char ret =0;</span></span><br><span class="line">        <span class="comment">// for(char c:t) ret+=c;</span></span><br><span class="line">        <span class="comment">// for(char c:s) ret-=c;</span></span><br><span class="line">        <span class="comment">// return ret;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t) ret^= c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) ret^= c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">char</span>(ret+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="448-Find-All-Numbers-Disappeared-in-an-Array-Easy"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array-Easy" class="headerlink" title="448 Find All Numbers Disappeared in an Array (Easy)"></a>448 Find All Numbers Disappeared in an Array (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;            </span><br><span class="line">        <span class="keyword">if</span>(nums[idx]&gt;<span class="number">0</span>) nums[idx] *=<span class="number">-1</span>;            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) ret.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="442-Find-All-Duplicates-in-an-Array-Medium"><a href="#442-Find-All-Duplicates-in-an-Array-Medium" class="headerlink" title="442 Find All Duplicates in an Array (Medium)"></a>442 Find All Duplicates in an Array (Medium)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;  ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> idx = <span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[idx]&gt;<span class="number">0</span>) nums[idx] *= <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> ret.<span class="built_in">push_back</span>(<span class="built_in">abs</span>(nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h2 id="Two-pointer"><a href="#Two-pointer" class="headerlink" title="Two pointer"></a>Two pointer</h2><h3 id="26-Remove-Duplicates-from-Sorted-Array-Easy"><a href="#26-Remove-Duplicates-from-Sorted-Array-Easy" class="headerlink" title="26 Remove Duplicates from Sorted Array (Easy)"></a>26 Remove Duplicates from Sorted Array (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != nums[slow])&#123;</span><br><span class="line">                nums[++slow] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="80-Remove-Duplicates-from-Sorted-Array-II-Medium"><a href="#80-Remove-Duplicates-from-Sorted-Array-II-Medium" class="headerlink" title="80 Remove Duplicates from Sorted Array II (Medium)"></a>80 Remove Duplicates from Sorted Array II (Medium)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, count = <span class="number">1</span>, fast = <span class="number">1</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] == nums[slow] &amp;&amp; count==<span class="number">0</span>) fast++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[fast] == nums[slow]) count--;</span><br><span class="line">                <span class="keyword">else</span> count =<span class="number">1</span>;</span><br><span class="line">                nums[++slow] = nums[fast++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="27-Remove-Element-Easy"><a href="#27-Remove-Element-Easy" class="headerlink" title="27 Remove Element (Easy)"></a>27 Remove Element (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val) nums[slow++] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="283-Move-Zeroes-Easy"><a href="#283-Move-Zeroes-Easy" class="headerlink" title="283 Move Zeroes (Easy)"></a>283 Move Zeroes (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != val) nums[slow++] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">removeElement</span>(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=p ;i&lt;n;++i) nums[i]=<span class="number">0</span>;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="203-Remove-Linked-List-Elements-Easy"><a href="#203-Remove-Linked-List-Elements-Easy" class="headerlink" title="203 Remove Linked List Elements (Easy)"></a>203 Remove Linked List Elements (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *fast = head, *ans = slow;</span><br><span class="line">        slow-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast-&gt;val != val)&#123;</span><br><span class="line">                slow-&gt;next= fast ;</span><br><span class="line">                slow =slow-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="83-Remove-Duplicates-from-Sorted-List-Easy"><a href="#83-Remove-Duplicates-from-Sorted-List-Easy" class="headerlink" title="83 Remove Duplicates from Sorted List (Easy)"></a>83 Remove Duplicates from Sorted List (Easy)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">       ListNode *slow = head, *fast = head;</span><br><span class="line">       <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">           <span class="keyword">if</span>(fast-&gt;val != slow-&gt;val)&#123;</span><br><span class="line">               slow-&gt;next = fast;</span><br><span class="line">               slow= slow-&gt;next;</span><br><span class="line">           &#125;</span><br><span class="line">           fast = fast-&gt;next;</span><br><span class="line">       &#125;</span><br><span class="line">       slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">       <span class="keyword">return</span> head;   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Matrix</title>
    <url>/blog/2023/02/12/DataStruct/Matrix/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>48 Rotate Image (Medium)</li>
<li>54 Spiral Matrix (Medium)</li>
<li>59 Spiral Matrix II (Medium)</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>PrefixSum</title>
    <url>/blog/2023/02/12/DataStruct/PrefixSum/</url>
    <content><![CDATA[<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>Prefix Sum 用於快速、频繁地計算一個索引區間内的元素之和。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array =         [-2    0   3   -5  2   -1]</span><br><span class="line">prefix sum = [0  -2   -2   1   -4  -2  -3]</span><br><span class="line">preSum[i] = preSum[i-1] + nums[i-1];   </span><br><span class="line"></span><br><span class="line">array = [a, b,  c,  d,    e, f]</span><br><span class="line">pre = [0,a, a+b, a+b+c, a+b+c+d, a+b+c+d+e, a+b+c+d+e+f]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Prefix diff</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array =      [8  2   6   3   1]</span><br><span class="line">diff =   [8  -6  4   -3  -2]</span><br><span class="line">diff[i] = nums[i] + nums[i-1];    </span><br><span class="line">// array[i..j] 的元素全部加 3，只需要diff[i]+=3</span><br><span class="line">array = [a, b,  c,  d,    e]</span><br><span class="line">diff = [a, (b-a), (c-b), (d-c), (e-d)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// array[1..3] 的元素全部加 3，只需要diff[i]+=3, diff[3+1]-=3</span><br><span class="line">array = [a, b+3, c+3, d+3, e]</span><br><span class="line">diff = [a, (b-a+3), (c-b), (d-c), (e-d-3)]]</span><br><span class="line"></span><br><span class="line">array[2...4] 的元素全部加 5</span><br><span class="line">array = [a, b, c+5, d+5, e+5]</span><br><span class="line">diff = [a, (b-a), (c-b+5), (d-c), (e-d)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>Prefix Sum</p>
<ul>
<li>303 Range Sum Query - Immutable (Easy)</li>
<li>304 Range Sum Query 2D - Immutable (Medium)</li>
<li><ol start="560">
<li>Subarray Sum Equals K (Medium)</li>
</ol>
</li>
</ul>
<p>Different Sum</p>
<ul>
<li>1094 Car Pooling (Medium)</li>
<li>1109 Corporate Flight Bookings (Medium)</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>Queue</title>
    <url>/blog/2023/02/12/DataStruct/Queue/</url>
    <content><![CDATA[<h3 id="Queue-可以array-、-linked-list實現"><a href="#Queue-可以array-、-linked-list實現" class="headerlink" title="Queue  可以array 、 linked list實現"></a>Queue  可以array 、 linked list實現</h3><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<ul>
<li>常用方法 push pop front back size empty swap emplace</li>
<li>back() front() push_back() pop_front()<h3 id="priority-queue-用vector-實作-但資料結構是-max-heap"><a href="#priority-queue-用vector-實作-但資料結構是-max-heap" class="headerlink" title="priority_queue 用vector 實作 但資料結構是 max-heap"></a>priority_queue 用vector 實作 但資料結構是 max-heap</h3></li>
<li>常用方法 push pop top size empty swap emplace</li>
<li>front() push_back() pop_back()</li>
<li>heap 插入刪除元素時間 O(logn)</li>
</ul>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul>
<li>存取方法 deq.at(i)&#x2F;deq[i] front back</li>
<li>容量 size empty resize max_size shrink_to_fit</li>
<li>修改器 push_back&#x2F;emplace_back pop_back push_front&#x2F;emplace_front pop_front insert&#x2F;emplace clear erase swap </li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
</ul>
<h2 id="implement-code"><a href="#implement-code" class="headerlink" title="implement code"></a>implement code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueStack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">QueueStack</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueStack::front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">while</span> (!sta.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp.<span class="built_in">push</span>(sta.<span class="built_in">top</span>());</span><br><span class="line">        sta.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = tmp.<span class="built_in">top</span>();</span><br><span class="line">    <span class="keyword">while</span> (!tmp.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        sta.<span class="built_in">push</span>(tmp.<span class="built_in">top</span>());</span><br><span class="line">        tmp.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueStack::back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sta.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The queue is empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sta.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueStack::size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sta.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueStack::empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QueueStack::pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sta.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The queue is empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">while</span> (!sta.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp.<span class="built_in">push</span>(sta.<span class="built_in">top</span>());</span><br><span class="line">        sta.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = tmp.<span class="built_in">top</span>();</span><br><span class="line">    tmp.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span> (!tmp.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        sta.<span class="built_in">push</span>(tmp.<span class="built_in">top</span>());</span><br><span class="line">        tmp.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return ret;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QueueStack::push</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    sta.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(QueueStack q)</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;q.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        tmp.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueueStack q;</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">6</span>);</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">print</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Segment Tree</title>
    <url>/blog/2023/02/12/DataStruct/SegmentTree/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie</title>
    <url>/blog/2023/02/12/DataStruct/Trie/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>208 Implement Trie (Prefix Tree) (Medium)</li>
<li>1804 Implement Trie II (Prefix Tree) (Medium, Premium)</li>
<li>648 Replace Words (Medium)</li>
<li>211 Design Add and Search Words Data Structure (Medium)</li>
<li>677 Map Sum Pairs (Medium)</li>
</ul>
<p>[補充]</p>
<ul>
<li><p>139 Word Break (Medium)</p>
</li>
<li><p>140 Word Break II (Hard)</p>
</li>
<li><p>212 Word Search II (Hard)</p>
</li>
<li><p>336 Palindrome Pairs (Hard)</p>
</li>
<li><p>676 Implement Magic Dictionary (Medium)</p>
</li>
<li><p>720 Longest Word in Dictionary (Medium)</p>
<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2></li>
<li><p>Binary Tree </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left, right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>N-ary Tree </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode[] children;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TrieNode</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&lt;V&gt;&#123;</span><br><span class="line">    V val = null;</span><br><span class="line">    TrieNode&lt;V&gt; [] children = <span class="keyword">new</span> TrieNode[<span class="number">256</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Implement-Trie-Prefix-Tree"><a href="#Implement-Trie-Prefix-Tree" class="headerlink" title="Implement Trie (Prefix Tree)"></a>Implement Trie (Prefix Tree)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode * children[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="built_in">TrieNode</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isWord = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode * &amp; child:<span class="keyword">this</span>-&gt;children) child = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;isWord;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:prefix)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TrieNode* <span class="title">put</span><span class="params">(TrieNode* node, string key, <span class="type">int</span> val, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) node = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">        <span class="keyword">if</span>(i == key.<span class="built_in">size</span>())&#123;</span><br><span class="line">            node-&gt;val = val;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = key[i];</span><br><span class="line">        node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="built_in">put</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], key, val, i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(string key, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">// iterative</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TrieNode *p = root;</span></span><br><span class="line">        <span class="comment">// for(char c:key)&#123;</span></span><br><span class="line">        <span class="comment">//     if(!p-&gt;children[c-&#x27;a&#x27;]) p-&gt;children[c-&#x27;a&#x27;] = new TrieNode();</span></span><br><span class="line">        <span class="comment">//     p=p-&gt;children[c-&#x27;a&#x27;];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// p-&gt;val = val;</span></span><br><span class="line">        <span class="comment">// p-&gt;isWord = true;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//recursive</span></span><br><span class="line">        root = <span class="built_in">put</span>(root, key, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 從節點 node 開始搜索 key，如果存在返回對應節點，否則返回 null</span></span><br><span class="line">    <span class="function">TrieNode* <span class="title">getNode</span><span class="params">(TrieNode *node, string key)</span></span>&#123;</span><br><span class="line">        TrieNode *p = node;</span><br><span class="line">        <span class="comment">// 從節點 node 開始搜索 key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p ) &#123;</span><br><span class="line">                <span class="comment">// 無往向下搜索</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下搜索</span></span><br><span class="line">            <span class="type">char</span> c = key[i];</span><br><span class="line">            p = p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搜索 key 對應的值，不存在則返回 null</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(string prefix)</span></span>&#123;</span><br><span class="line">        TrieNode * x = <span class="built_in">getNode</span>(root, prefix);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">nullptr</span> || x-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// x 為空或 x 的 val 字段為空都说明 key 没有對應的值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搜尋所有前綴為prefix 所有鍵</span></span><br><span class="line">    <span class="comment">// keysWithPrefix(&quot;th&quot;) -&gt; [&quot;that&quot;, &quot;the&quot;, &quot;them&quot;]</span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">keysWithPrefix</span><span class="params">(string prefix)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        TrieNode * x = <span class="built_in">getNode</span>(root, prefix);</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="literal">nullptr</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="comment">// DFS 遍歷以 x 為根的這棵 Trie 樹</span></span><br><span class="line">        <span class="built_in">traverse</span>(x, prefix, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍歷以 node 節點為根的 Trie 樹，找到所有鍵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TrieNode *node, string path, vector&lt;string&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node-&gt;val!=<span class="number">0</span>) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;c&lt;=<span class="string">&#x27;z&#x27;</span> ; ++c)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="built_in">traverse</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], path, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍歷函数，嘗試在「以 node 為根的 Trie 樹中」匹配 pattern[i..]</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TrieNode * node, string path, string pattern, <span class="type">int</span> i, vector&lt;string&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==pattern.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;val!=<span class="number">0</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = pattern[i];</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j = <span class="string">&#x27;a&#x27;</span> ;j&lt;=<span class="string">&#x27;z&#x27;</span>;++j)&#123;</span><br><span class="line">                path.<span class="built_in">push_back</span>(j);</span><br><span class="line">                <span class="built_in">traverse</span>(node-&gt;children[j-<span class="string">&#x27;a&#x27;</span>], path,pattern, i+<span class="number">1</span>, ret);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="built_in">traverse</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], path,pattern, i+<span class="number">1</span>, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="implement-Trie-ans-API"><a href="#implement-Trie-ans-API" class="headerlink" title="implement Trie ans API"></a>implement Trie ans API</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode * children[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="built_in">TrieNode</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isWord = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode * &amp; child:<span class="keyword">this</span>-&gt;children) child = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判斷是否有word 在trie</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;isWord;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 從節點 node 開始搜索 key，如果存在返回對應節點，否則返回 null</span></span><br><span class="line">    <span class="function">TrieNode* <span class="title">getNode</span><span class="params">(TrieNode *node, string key)</span></span>&#123;</span><br><span class="line">        TrieNode *p = node;</span><br><span class="line">        <span class="comment">// 從節點 node 開始搜索 key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p ) &#123;</span><br><span class="line">                <span class="comment">// 無往向下搜索</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下搜索</span></span><br><span class="line">            <span class="type">char</span> c = key[i];</span><br><span class="line">            p = p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:prefix)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在所有键中寻找 word 的最短前缀</span></span><br><span class="line">    <span class="function">string <span class="title">shortestPrefixOf</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = word[i];</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                ret+=<span class="built_in">string</span>(<span class="number">1</span>,c);</span><br><span class="line">                p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(p-&gt;isWord) <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通配符 . 匹配任意字符，判断是否存在匹配的键</span></span><br><span class="line">    <span class="comment">// hasKeyWithPattern(&quot;.ip&quot;) -&gt; true</span></span><br><span class="line">    <span class="comment">// hasKeyWithPattern(&quot;.i&quot;) -&gt; false</span></span><br><span class="line">    <span class="comment">// 判断是和否存在前缀为 prefix 的键</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasKeyWithPattern</span><span class="params">(TrieNode* node, string pattern, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==pattern.<span class="built_in">size</span>()) <span class="keyword">return</span> node-&gt;isWord;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> c = pattern[i];</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], pattern, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 嘗試所有可能</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">hasKeyWithPattern</span>(node-&gt;children[j], pattern, i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="comment">// 都沒匹配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie* obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj-&gt;insert(word);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;search(word);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Replace-Words"><a href="#Replace-Words" class="headerlink" title="Replace Words"></a>Replace Words</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode *children[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="built_in">TrieNode</span> ()&#123;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode* &amp;child:<span class="keyword">this</span>-&gt;children) child = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isWord = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span> ()&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord= <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bool startsWith(string word)&#123;</span></span><br><span class="line">    <span class="comment">//     TrieNode *p = root;</span></span><br><span class="line">    <span class="comment">//     for(char c:word)&#123;</span></span><br><span class="line">    <span class="comment">//         if(!p-&gt;children[c-&#x27;a&#x27;]) return false;</span></span><br><span class="line">    <span class="comment">//         p=p-&gt;children[c-&#x27;a&#x27;];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return true;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function">string <span class="title">shortestPrefixOf</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = word[i];</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                ret+=<span class="built_in">string</span>(<span class="number">1</span>,c);</span><br><span class="line">                p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(p-&gt;isWord) <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string sentence)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n= sentence.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;string&gt; words ;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n &amp;&amp; sentence[j]==<span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=j;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sentence[i] ==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                words.<span class="built_in">push_back</span>(sentence.<span class="built_in">substr</span>(j, i-j));</span><br><span class="line">                j=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        words.<span class="built_in">push_back</span>(sentence.<span class="built_in">substr</span>(j, i-j));</span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">replaceWords</span><span class="params">(vector&lt;string&gt;&amp; dictionary, string sentence)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 將dictionary 放入Trie  </span></span><br><span class="line">        Trie *t = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(string s:dictionary)&#123;</span><br><span class="line">            t-&gt;<span class="built_in">insert</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; words = <span class="built_in">split</span>(sentence);</span><br><span class="line">        string ret ;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len; ++i)&#123;</span><br><span class="line">            string prefix = t-&gt;<span class="built_in">shortestPrefixOf</span>(words[i]);</span><br><span class="line">            <span class="keyword">if</span>(!prefix.<span class="built_in">empty</span>()) ret+=prefix;</span><br><span class="line">            <span class="keyword">else</span> ret+=words[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>) ret+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Design-Add-and-Search-Words-Data-Structure-通配符"><a href="#Design-Add-and-Search-Words-Data-Structure-通配符" class="headerlink" title="Design Add and Search Words Data Structure 通配符"></a>Design Add and Search Words Data Structure 通配符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    TrieNode* children[<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">TrieNode</span>()&#123;</span><br><span class="line">        isWord = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode *&amp; child :children) child = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode * p =root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasKeyWithPattern</span><span class="params">(string pattern)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(p, pattern,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasKeyWithPattern</span><span class="params">(TrieNode* node, string pattern, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==pattern.<span class="built_in">size</span>()) <span class="keyword">return</span> node-&gt;isWord;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> c = pattern[i];</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], pattern, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 嘗試所有可能</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">hasKeyWithPattern</span>(node-&gt;children[j], pattern, i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="comment">// 都沒匹配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Trie *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WordDictionary</span>() &#123;</span><br><span class="line">        </span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root-&gt;<span class="built_in">insert</span>(word);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  root-&gt;<span class="built_in">hasKeyWithPattern</span>(word);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * WordDictionary* obj = new WordDictionary();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addWord(word);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;search(word);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>UnionFind</title>
    <url>/blog/2023/02/12/DataStruct/UnionFind/</url>
    <content><![CDATA[<p>method : connect、find、unionSet</p>
<ul>
<li>130 Surrounded Regions</li>
<li>990 Satisfiability of Equality Equations</li>
<li>547 Number of Provinces</li>
<li>947 Most Stones Removed with Same Row or Column</li>
</ul>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size, parent;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">        size = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="type">int</span> count = n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pRoot = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> qRoot = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">return</span>  pRoot == qRoot;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x != parent[x])&#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pRoot = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> qRoot = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(pRoot == qRoot ) <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(size[pRoot] &gt;= size[qRoot])&#123;</span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">            size[pRoot] += size[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            size[qRoot] += size[pRoot];            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap</title>
    <url>/blog/2023/02/12/DataStruct/heap/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>heap</p>
<ul>
<li><p>23 Merge k Sorted Lists (Hard)</p>
</li>
<li><p>347 Top K Frequent Elements (Medium)</p>
</li>
<li><p>692 Top K Frequent Words</p>
</li>
<li><p>857 Minimum Cost to Hire K Workers</p>
</li>
<li><p>252 Meeting Rooms (Premium)</p>
</li>
<li><p>253 Meeting Rooms II (Premium)</p>
</li>
<li><p>370 Range Addition (Premium)</p>
</li>
<li><p>358 Rearrange String k Distance Apart (Premium)</p>
</li>
</ul>
<p>two heap</p>
<ul>
<li>295 Find Median from Data Stream (Hard)</li>
<li>*480 Sliding Window Median (Hard)</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>nSum 問題</title>
    <url>/blog/2023/02/12/DataStruct/nSum/</url>
    <content><![CDATA[<p><strong>排序、雙指針</strong></p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>15 3Sum (Medium)</li>
<li>16 3Sum Closest</li>
<li>18 4Sum (Medium)</li>
<li>454 4Sum (Medium)</li>
<li>923 3Sum With Multiplicity (Medium)</li>
</ul>
<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先对数组排序</span></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 左右指针</span></span><br><span class="line">    <span class="type">int</span> lo = <span class="number">0</span>, hi = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="type">int</span> sum = nums[lo] + nums[hi];</span><br><span class="line">        <span class="comment">// 根据 sum 和 target 的比较，移动左右指针</span></span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            lo++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            hi--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;lo, hi&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Search</title>
    <url>/blog/2023/02/12/DataStruct/search/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Sort</title>
    <url>/blog/2023/02/12/DataStruct/sort/</url>
    <content><![CDATA[<h2 id="complexity"><a href="#complexity" class="headerlink" title="complexity"></a>complexity</h2><table>
<thead>
<tr>
<th>Complexity</th>
<th>Best case</th>
<th>Average case</th>
<th>Worst case</th>
<th>Memory space</th>
<th>Stable</th>
</tr>
</thead>
<tbody><tr>
<td>Bubble</td>
<td><code>O(N)</code></td>
<td><code>O(N^2)</code></td>
<td><code>O(N^2)</code></td>
<td>1</td>
<td>stable</td>
</tr>
<tr>
<td>Insertion</td>
<td><code>O(N)</code></td>
<td><code>O(N^2)</code></td>
<td><code>O(N^2)</code></td>
<td>1</td>
<td>stable</td>
</tr>
<tr>
<td>Selection</td>
<td><code>O(N^2)</code></td>
<td><code>O(N^2)</code></td>
<td><code>O(N^2)</code></td>
<td>1</td>
<td>non-stable</td>
</tr>
<tr>
<td>Merge</td>
<td><code>O(NlogN)</code></td>
<td><code>O(NlogN)</code></td>
<td><code>O(NlogN)</code></td>
<td><code>O(N)</code></td>
<td></td>
</tr>
<tr>
<td>Quick</td>
<td><code>O(NlogN)</code></td>
<td><code>O(NlogN)</code></td>
<td><code>O(N^2)</code></td>
<td><code>O(N)</code> or <code>O(logN)</code></td>
<td>non-stable</td>
</tr>
<tr>
<td>Radix</td>
<td><code>O(KN)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Count</td>
<td><code>O(N+K)</code></td>
<td><code>O(N+K)</code></td>
<td><code>O(N+K)</code></td>
<td><code>O(N+K)</code></td>
<td></td>
</tr>
<tr>
<td>Bucket</td>
<td><code>O(N+K)</code></td>
<td><code>O(N+K)</code></td>
<td><code>O(N^2)</code></td>
<td><code>O(N+K)</code></td>
<td>stable</td>
</tr>
<tr>
<td>Shell</td>
<td><code>O(NlogN)</code></td>
<td></td>
<td><code>O(N^2)</code>~&#96;O(nlog^2 N)&#96;</td>
<td>1</td>
<td>non-stable</td>
</tr>
<tr>
<td>Heap</td>
<td><code>O(NlogN)</code></td>
<td><code>O(NlogN)</code></td>
<td><code>O(NlogN)</code></td>
<td>1</td>
<td>non-stable</td>
</tr>
</tbody></table>
<p>Count sort 計算每個鍵值的出現次數，並用額外的陣列保存</p>
<h2 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #include &lt;stdlib&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void swap(int *a, int *b)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int temp = *a;</span></span><br><span class="line"><span class="comment">//     *a = *b;</span></span><br><span class="line"><span class="comment">//     *b = temp;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每輪確保最小值在前面 best case O(n^2)   可以是 stable</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min_idx = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[min_idx] &gt; nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                min_idx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[min_idx], nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 前i 個元素是已排序過的，插入第i+1 個元素 best case O(n) stable</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> key = nums[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">-1</span> &amp;&amp; nums[j] &gt; key)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每輪確保最大值在最後 best case O(n) stable</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>() - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j + <span class="number">1</span>] &lt; nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = nums[j];</span><br><span class="line">                nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = nums[r];</span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = l; j &lt; r; j++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[j] &lt; pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">swap</span>(nums[r], nums[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// O(nlogn) avg case, worse case O(n^2)</span></span><br><span class="line">    <span class="comment">// internal sortting , in-place</span></span><br><span class="line">    <span class="comment">// unstable</span></span><br><span class="line">    <span class="comment">// preferred for arrays</span></span><br><span class="line">    <span class="comment">// preorder</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">Partition</span>(nums, l, r);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums, l, pivot - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums, pivot + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(nums.begin() + l, nums.begin() + mid+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(nums.begin() + mid+<span class="number">1</span>, nums.begin() + r + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.<span class="built_in">size</span>() &amp;&amp; j &lt; right.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &lt;= right[j])</span><br><span class="line">            nums[k++] = left[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nums[k++] = right[j++];</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.<span class="built_in">size</span>())</span><br><span class="line">        nums[k++] = left[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; right.<span class="built_in">size</span>())</span><br><span class="line">        nums[k++] = right[j++];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// option 2</span></span><br><span class="line">    <span class="comment">// left.push_back(INT_MAX);</span></span><br><span class="line">    <span class="comment">// right.push_back(INT_MAX);</span></span><br><span class="line">    <span class="comment">// int j=0, k=0;</span></span><br><span class="line">    <span class="comment">// for(int i=l ;i&lt;=r ;++i)&#123;</span></span><br><span class="line">    <span class="comment">//     if(left[j]&lt;right[k])  nums[i] = left[j++];</span></span><br><span class="line">    <span class="comment">//     else nums[i] = right[k++];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// external sort , worse cse and avg case O(nlogn)</span></span><br><span class="line">    <span class="comment">// not in place , need eatra space</span></span><br><span class="line">    <span class="comment">// stable</span></span><br><span class="line">    <span class="comment">// preferred for linked list</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(nums, l, mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(nums, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">Merge</span>(nums, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// void (*f[3])(vector&lt;int&gt; &amp;) = &#123;SelectSort, InsertSort, BubbleSort&#125;;</span></span><br><span class="line">    <span class="built_in">void</span> (*f[<span class="number">1</span>])(vector&lt;<span class="type">int</span>&gt; &amp;) = &#123;SelectSort&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; test = &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; test1 = &#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; test2 = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : test1)</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        (*f[i])(test1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : test1)</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> (*fp[<span class="number">1</span>])(vector&lt;<span class="type">int</span>&gt; &amp;, <span class="type">int</span>, <span class="type">int</span>) = &#123;MergeSort&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; test3 = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : test3)</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        (*fp[i])(test3, <span class="number">0</span>, test3.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : test3)</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack</title>
    <url>/blog/2023/02/12/DataStruct/stack/</url>
    <content><![CDATA[<h2 id="complexity"><a href="#complexity" class="headerlink" title="complexity"></a>complexity</h2><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(k)</td>
<td>O(k)</td>
</tr>
<tr>
<td>search</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<ul>
<li>常用方法 push pop top empty size swap emplace</li>
</ul>
<h2 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StackArray</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DoubleCapacity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> *arr;</span><br><span class="line">    <span class="built_in">StackArray</span>() : <span class="built_in">top</span>(<span class="number">-1</span>), <span class="built_in">capacity</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="type">int</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetCapacity</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StackArray::DoubleCapacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *newarr = <span class="keyword">new</span> <span class="type">int</span>[capacity * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; capacity; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        newarr[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    capacity *=<span class="number">2</span>;</span><br><span class="line">    arr = newarr;</span><br><span class="line">    <span class="keyword">delete</span>[] newarr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StackArray::Push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == capacity <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">DoubleCapacity</span>();</span><br><span class="line">	&#125;</span><br><span class="line">    arr[++top] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StackArray::Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;this stack is empty&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    top--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackArray::Top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;the stack is empty!!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackArray::IsEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackArray::GetCapacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackArray::GetSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> top + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(StackArray a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> *arr = a.arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">GetSize</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; *(arr + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt;<span class="string">&quot;capacity is :\t&quot;</span>&lt;&lt;a.<span class="built_in">GetCapacity</span>() &lt;&lt; <span class="string">&quot; top is :\t&quot;</span> &lt;&lt; a.<span class="built_in">Top</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackArray a;</span><br><span class="line">    a.<span class="built_in">Push</span>(<span class="number">8</span>);</span><br><span class="line">    a.<span class="built_in">Push</span>(<span class="number">820</span>);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    a.<span class="built_in">Push</span>(<span class="number">7</span>);</span><br><span class="line">    a.<span class="built_in">Push</span>(<span class="number">6</span>);</span><br><span class="line">    a.<span class="built_in">Push</span>(<span class="number">5</span>);</span><br><span class="line">    a.<span class="built_in">Push</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    a.<span class="built_in">Pop</span>();</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Search</title>
    <url>/blog/2023/02/12/DataStruct/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B/</url>
    <content><![CDATA[<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>O(logN)，想法簡單，細節是魔鬼。溢位、mid是加一減一、while()用&lt;&#x3D; 還是&lt;。<br>注意搜尋區間和while終止條件<br>搜尋左右邊界，只要修改<code>nums[mid] ==target</code> 條件處</p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>34 Find First and Last Position of Element in Sorted Array (Medium)</li>
<li>35 Search Insert Position (Easy)</li>
<li>209 Minimum Size Subarray Sum</li>
<li>*354 Russian Doll Envelopes (Hard)</li>
<li>392 Is Subsequence (Easy)</li>
<li>658 Find K Closest Elements</li>
<li>704 Binary Search (Easy)</li>
<li>793 Preimage Size of Factorial Zeroes Function (Hard)</li>
<li>875 Koko Eating Bananas (Medium)</li>
<li>2594 Minimum Time to Repair Cars (Medium)</li>
<li>1011 Capacity To Ship Packages Within D Days (Medium)</li>
<li>1870 Minimum Speed to Arrive on Time</li>
<li>1898 Maximum Number of Removable Characters</li>
<li>2226 Maximum Candies Allocated to K Children</li>
<li>410 Split Array Largest Sum (Hard)</li>
</ul>
<p>補充</p>
<ul>
<li>*4 Median of Two Sorted Arrays</li>
<li>33 Search in Rotated Sorted Array</li>
<li>81 Search in Rotated Sorted Array II</li>
<li>69 Sqrt(x)</li>
<li>153 Find Minimum in Rotated Sorted Array</li>
<li>154 Find Minimum in Rotated Sorted Array II</li>
<li>167 Two Sum II - Input Array Is Sorted</li>
<li>274 H-Index</li>
<li>275 H-Index II</li>
<li>278 First Bad Version</li>
<li>*300 Longest Increasing Subsequence</li>
<li>*315 Count of Smaller Numbers After Self (Hard)</li>
<li>334 Increasing Triplet Subsequence</li>
<li>374 Guess Number Higher or Lower</li>
<li>475 Heaters</li>
<li>611 Valid Triangle Number</li>
<li>633 Sum of Square Numbers</li>
<li>1283 Find the Smallest Divisor Given a Threshold</li>
<li>1894 Find the Student that Will Replace the Chalk</li>
<li>2187 Minimum Time to Complete Trips (Medium)</li>
</ul>
<h2 id="Binary-Search-框架與變形"><a href="#Binary-Search-框架與變形" class="headerlink" title="Binary Search 框架與變形"></a>Binary Search 框架與變形</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) <span class="comment">// 停止搜索</span></span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>盡量不要出現else，所有情況都寫清楚。</li>
<li>終止條件left &#x3D;&#x3D; right<br>QA</li>
</ul>
<ol>
<li>為什麼 while 迴圈條件是<code>&lt;=</code> 而不是 <code>&lt;</code><br>因為right ＝ nums.leagth-1 ，而不是nums.length，區別相當於：前者是<code>[left, right]</code>，後者是<code>[left, right)</code>，因為索引大小為nums.length是越界的。</li>
</ol>
<p>也可以這樣寫</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[left] == target ? left : <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<p>左側邊界的二元搜尋(較普及的寫法)<br>[1,2,2,2,3] 尋找所有２的位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// option 1 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// option 2 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 搜索区间为 [left, right]</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// if else ...</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [mid+1, right]</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [left, mid-1]</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 收缩右侧边界</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target) <span class="comment">// 检查越界</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>因為 <code>while(left&lt; right)</code> ，終止條件<code>left == right</code>，搜尋區間 <code>[left, right)</code></li>
<li>因為 搜尋區間 <code>[left, right)</code> ，會 分成兩區間 <code>[left, mid)</code> 和 <code>[mid+1, right)</code></li>
<li>返回left 和 right 都一樣意思，因為終止條件是 left&#x3D;&#x3D; right</li>
</ul>
<p>右側邊界的二元搜尋</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">right_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(l==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 注意</span></span><br><span class="line">    <span class="keyword">return</span> nums[l<span class="number">-1</span>]==target?l<span class="number">-1</span>:<span class="number">-1</span>;  <span class="comment">// 注意</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>因為終止條件是 left&#x3D;&#x3D; right ， 所以return left-1 和 return right-1 都一樣。</li>
<li>因為left &#x3D; mid + 1;  while迴圈結束時，nums[left] 一定不等於target，而nums[left-1]可能是target</li>
</ul>
<p>統一左右兩側邊界的二元搜尋</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">right_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                <span class="comment">// return mid;</span></span><br><span class="line">                r = mid<span class="number">-1</span>; <span class="comment">// left bound</span></span><br><span class="line">                <span class="comment">// l = mid+1 ; // right bound</span></span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid <span class="number">-1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// left bound</span></span><br><span class="line">        <span class="keyword">if</span>(l&gt;= nums.<span class="built_in">size</span>() || nums[l]!=target) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">        <span class="comment">//right bound</span></span><br><span class="line">        <span class="comment">// if(r&lt;0 || nums[r]!=target) return -1;</span></span><br><span class="line">        <span class="comment">// return r;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>位元操作</title>
    <url>/blog/2023/02/12/DataStruct/%E4%BD%8D%E5%85%83%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li><p>136 Single Number (Easy) </p>
</li>
<li><p>137 Single Number II (Medium)</p>
</li>
<li><p>260 Single Number III (Medium)</p>
</li>
<li><p>268 Missing Number (Easy)</p>
</li>
<li><p>389 Find the Difference (Easy)</p>
</li>
<li><p>190 Reverse Bits (Easy)</p>
</li>
<li><p>191 Number of 1 Bits (Easy)</p>
</li>
<li><p>231 Power of Two (Easy)</p>
</li>
<li><p>405 Convert a Number to Hexadecimal (Easy)</p>
</li>
<li><p>342 Power of Four (Easy)</p>
</li>
<li><p>326 Power of Three (Easy)</p>
</li>
<li><p>1009 Complement of Base 10 Integer (Easy)</p>
</li>
<li><p>371 Sum of Two Integers (Medium)</p>
</li>
<li><p>397 Integer Replacement (Medium)</p>
</li>
<li><p>89 Gray Code</p>
</li>
<li><p>461 Hamming Distance</p>
</li>
<li><p>1342 Number of Steps to Reduce a Number to Zero</p>
</li>
<li><p>868 Binary Gap</p>
</li>
<li><p>1486 XOR Operation in an Array</p>
</li>
<li><p>1720 Decode XORed Array</p>
</li>
<li><p>476 Number Complement</p>
</li>
<li><p>201 Bitwise AND of Numbers Range</p>
</li>
</ul>
<p>[補充]</p>
<ul>
<li><p>2119 A Number After a Double Reversal</p>
</li>
<li><p>338 Counting Bits</p>
</li>
<li><p>7 Reverse Integer</p>
</li>
<li><p>29 Divide Two Integers (Medium)</p>
</li>
<li><p>67 Add Binary (Easy)</p>
</li>
<li><p>387 First Unique Character in a String (Easy)</p>
</li>
<li><p>1356 Sort Integers by The Number of 1 Bits (Easy)</p>
</li>
<li><p>693 Binary Number with Alternating Bits (Easy)</p>
</li>
<li><p>762 Prime Number of Set Bits in Binary Representation (Easy)</p>
</li>
</ul>
<h2 id="without"><a href="#without" class="headerlink" title="without"></a>without</h2><ul>
<li>兩數字相加，但硬體不支援<code>+</code> <code>-</code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(a)&#123;</span><br><span class="line">        <span class="type">int</span> carry = (a&amp;b&amp;<span class="number">0x7fffffff</span>)&lt;&lt;<span class="number">1</span>, sum = a^b;</span><br><span class="line">        a = carry, b = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>一數字是否為三的倍數，但硬體不支援<code>*</code> <code>/</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> input = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> remainder = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(input != <span class="number">0</span>)&#123;</span><br><span class="line">    remainder += input &amp; <span class="number">0x3</span>;</span><br><span class="line">    input = input&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(input == <span class="number">0</span> &amp;&amp; remainder &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">        input = remainder<span class="number">-3</span>;</span><br><span class="line">        remainder = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// binary search</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">multipleOf3</span> <span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> h = n ;</span><br><span class="line">    <span class="keyword">while</span>(h-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> m = l + (h-l)/<span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">3</span>*m &lt;= n) l = m ;</span><br><span class="line">        <span class="keyword">else</span> h = m ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>*l == n ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bit Manipulation </span></span><br><span class="line"><span class="comment">// log(n)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsThreesMultiple</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (number &lt; <span class="number">10</span>)</span><br><span class="line">		<span class="keyword">return</span> number == <span class="number">0</span> || number == <span class="number">3</span> || number == <span class="number">6</span> || number == <span class="number">9</span>;</span><br><span class="line">	<span class="type">int</span> oddSums = <span class="number">0</span>, evenSums = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">			oddSums += (number &amp; (<span class="number">1</span> &lt;&lt; i) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			evenSums += (number &amp; (<span class="number">1</span> &lt;&lt; i) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">IsThreesMultiple</span>(oddSums - evenSums &gt;= <span class="number">0</span> ? oddSums - evenSums : evenSums - oddSums);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>從兩個數字中找出最大的一個而不使用判斷描述<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((a + b) + <span class="built_in">abs</span>((a - b))) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>整數變號<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">negative</span><span class="params">(<span class="type">int</span>&amp; x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ~x + <span class="number">1</span>;          <span class="comment">// -x;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">negative</span><span class="params">(<span class="type">int</span>&amp; x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x ^ <span class="number">-1</span>) + <span class="number">1</span>;    <span class="comment">// -x;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul>
<li>善用xor a^a&#x3D;0 a^0 &#x3D; a，且滿足交換率。1720</li>
<li>a^a&#x3D;0 a^0 &#x3D; a 可以抓出陣列中唯一出現一次的元素，其餘出現兩次。136</li>
<li>ret ^&#x3D; i ^ *(nums + i); 0~n 陣列中哪個數字是 </li>
<li>n &#x3D; n &amp; (n - 1); 可以用來找 n在二進位有多少個1  191, 231</li>
<li>0~n 陣列中 標記陣列中拜訪過元素為負數，就可以知道哪個數字重複了</li>
<li>快慢指針，如果有重複的值會被找出，且不會修改陣列元素</li>
</ul>
<h2 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h2><h2 id="hackerrank"><a href="#hackerrank" class="headerlink" title="hackerrank"></a>hackerrank</h2><p><a href="https://www.hackerrank.com/domains/algorithms?filters%5Bsubdomains%5D%5B%5D=bit-manipulation">Bit Manipulation</a></p>
<h3 id="Lonely-Integer"><a href="#Lonely-Integer" class="headerlink" title="Lonely Integer"></a>Lonely Integer</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lonelyinteger</span><span class="params">(<span class="type">int</span> a_count, <span class="type">int</span>* a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a_count;++i) ret^=a[i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Maximizing-XOR"><a href="#Maximizing-XOR" class="headerlink" title="Maximizing XOR"></a>Maximizing XOR</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maximizingXor</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = l;j&lt;=r;++j)&#123;</span><br><span class="line">            <span class="type">int</span> xor= i^j;</span><br><span class="line">            ret = max(ret, xor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// option 2 </span></span><br><span class="line">    <span class="type">int</span> xor = l^r, mx =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(xor)&#123;</span><br><span class="line">        mx |= xor;</span><br><span class="line">        xor&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Counter-game"><a href="#Counter-game" class="headerlink" title="Counter game"></a>Counter game</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">counterGame</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// the count of reducing the power of 2 to 1</span></span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span> &amp;&amp; n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// the count of reducing a number to the power of 2</span></span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;Richard&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Louise&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Xor-sequence"><a href="#Xor-sequence" class="headerlink" title="Xor-sequence"></a>Xor-sequence</h3><h3 id="Sum-vs-XOR"><a href="#Sum-vs-XOR" class="headerlink" title="Sum vs XOR"></a>Sum vs XOR</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">sumXor</span><span class="params">(<span class="type">long</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// option 0 =&gt; time out</span></span><br><span class="line">    <span class="comment">// long ret = 0;</span></span><br><span class="line">    <span class="comment">// for(long i =0;i&lt;=n ;++i)&#123;</span></span><br><span class="line">    <span class="comment">//     if( (n+i) == (n^i)) ret++;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return ret;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// option 1 bit manipulation</span></span><br><span class="line">    <span class="comment">// find the number of zeros in binary repr.</span></span><br><span class="line">    <span class="comment">// Arrangement and Combine</span></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((n&amp;<span class="number">1</span>) ==<span class="number">0</span>)ret++;</span><br><span class="line">        n &gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>,ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-Great-XOR"><a href="#The-Great-XOR" class="headerlink" title="The Great XOR"></a>The Great XOR</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">theGreatXor</span><span class="params">(<span class="type">long</span> x)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// option 0 time out </span></span><br><span class="line">    <span class="comment">// long ret = 0.0;</span></span><br><span class="line">    <span class="comment">// for(long i=1;i&lt;x ;++i)&#123;</span></span><br><span class="line">    <span class="comment">//     if( (x^i) &gt; x) ret++;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return ret;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// option 1 bit manipulation</span></span><br><span class="line">    <span class="type">long</span> ret = <span class="number">0</span>;    </span><br><span class="line">    <span class="type">int</span> b =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="comment">// this bit is zeros</span></span><br><span class="line">        <span class="keyword">if</span>((x&amp;<span class="number">1</span>)==<span class="number">0</span>) ret += (<span class="number">1L</span>&lt;&lt;b);</span><br><span class="line">        b++;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Yet-Another-Minimax-Problem"><a href="#Yet-Another-Minimax-Problem" class="headerlink" title="Yet Another Minimax Problem"></a>Yet Another Minimax Problem</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k =n<span class="number">-2</span> ;k&gt;<span class="number">-1</span> ;k--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*(a+k) &lt; *(a+k+<span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//reverse the whole arr</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="comment">// swap i j</span></span><br><span class="line">            <span class="type">int</span> temp = *(a+i);</span><br><span class="line">            *(a+i) = *(a+j);</span><br><span class="line">            *(a+j) = temp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> l;</span><br><span class="line">        <span class="keyword">for</span>(l=n<span class="number">-1</span>;l&gt;k;l--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*(a+l) &gt; *(a+k)) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// swap k l</span></span><br><span class="line">        <span class="type">int</span> temp = *(a+l);</span><br><span class="line">        *(a+l) = *(a+k);</span><br><span class="line">        *(a+k) = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//reverse k+1 to end</span></span><br><span class="line">        <span class="type">int</span> i= k+<span class="number">1</span>, j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="type">int</span> temp = *(a+i);</span><br><span class="line">            *(a+i) = *(a+j);</span><br><span class="line">            *(a+j) = temp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">numb</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, c = a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        c = i *a;</span><br><span class="line">        a =c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(INT_MAX, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">anotherMinimaxProblem</span><span class="params">(<span class="type">int</span> a_count, <span class="type">int</span>* a)</span> &#123;</span><br><span class="line">    <span class="comment">// option 0 time out</span></span><br><span class="line">    <span class="type">int</span> count = numb(a_count);</span><br><span class="line">    <span class="type">int</span> ret = INT_MAX;</span><br><span class="line">    <span class="keyword">while</span>(count)&#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a_count<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="type">int</span> temp = *(a+i)^ *(a+i+<span class="number">1</span>);</span><br><span class="line">            score = max(temp,score);</span><br><span class="line">        &#125;</span><br><span class="line">        ret = min(score, ret);</span><br><span class="line">        nextPermutation(a_count, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Sansa-and-XOR"><a href="#Sansa-and-XOR" class="headerlink" title="Sansa and XOR"></a>Sansa and XOR</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sansaXor</span><span class="params">(<span class="type">int</span> arr_count, <span class="type">int</span>* arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr_count%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr_count ; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        ret ^= *(arr+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="AND-Product"><a href="#AND-Product" class="headerlink" title="AND Product"></a>AND Product</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">andProduct</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">// find leftmost bit &amp; operation is 1 inn a&amp;b bit array</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a!=b)&#123;</span><br><span class="line">        a &gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        b &gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        i++;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (b&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>








<h3 id="Time-Complexity-Primality"><a href="#Time-Complexity-Primality" class="headerlink" title="Time Complexity: Primality"></a>Time Complexity: Primality</h3><p><a href="https://www.hackerrank.com/challenges/bitwise-operators-in-c/problem">Bitwise Operators</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">primality</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// option 0 判斷多個 是否為質數</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="string">&quot;Not prime&quot;</span>;     </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">primes</span><span class="params">(n+<span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>  i= <span class="number">2</span>;i&lt;=n/i;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(primes[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+i ; j&lt;=n ;j+=i) primes[j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>(primes[n]) <span class="keyword">return</span> <span class="string">&quot;Prime&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Not prime&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// option 1 快速判斷一個數是否為質數</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;Not prime&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span> || n==<span class="number">3</span> || n==<span class="number">5</span> ) <span class="keyword">return</span> <span class="string">&quot;Prime&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span> || n%<span class="number">3</span> ==<span class="number">0</span> || n%<span class="number">5</span> ==<span class="number">0</span>  )  <span class="keyword">return</span> <span class="string">&quot;Not prime&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n/i;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;Not prime&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Prime&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="十進制轉為二進制，並表示"><a href="#十進制轉為二進制，並表示" class="headerlink" title="十進制轉為二進制，並表示"></a>十進制轉為二進制，並表示</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面試題目"><a href="#面試題目" class="headerlink" title="面試題目"></a>面試題目</h2><p><a href="">十進制轉為十六進制</a></p>
<ol>
<li>get-set-clear-inverse 第18位元的bit值<blockquote>
<p>set 一般set 是設定為1<br>inverse &#x3D; flip &#x3D; Toggling</p>
</blockquote>
</li>
</ol>
<p>a. write a function to get bit18 value of an unsigned integer data and return 0 or 1<br>b. write a function to set bit18 value of an unsigned integer data<br>c. write a function to clear bit18 value of an unsigned integer data<br>d. write a function to inverse bit18 value of an unsigned integer data</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; (<span class="number">1</span>&lt;&lt;<span class="number">17</span>) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">set</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> &amp;n)</span>&#123;</span><br><span class="line">    n = (n | (<span class="number">1</span>&lt;&lt;<span class="number">17</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> &amp;n)</span>&#123;</span><br><span class="line">    n = (n &amp; ~(<span class="number">1</span>&lt;&lt;<span class="number">17</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inverse</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> &amp;n)</span>&#123;</span><br><span class="line">    n = (n^ (<span class="number">1</span>&lt;&lt;<span class="number">17</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>union</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BYTE_struct</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> BYTE4;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> BYTE3;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> BYTE2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> BYTE1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">LongFlag</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> All;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BYTE_struct</span> <span class="title">BYTEMODE</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line">LongFlag flag;</span><br><span class="line">flag.All = <span class="number">0x1234567</span>;</span><br><span class="line">flag.BYTE_struct.BYTE1 = <span class="number">0xFA</span>;</span><br><span class="line">flag.BYTE_struct.BYTE2 &amp;= <span class="number">0xAA</span>;</span><br><span class="line">flag.BYTE_struct.BYTE3 &amp;= <span class="number">0x55</span>;</span><br><span class="line">flag.BYTE_struct.BYTE4 = <span class="number">0x11</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>請問flag.All 的結果</p>
<p>fa224511        </p>
<ol start="3">
<li><p>迴圈印出的數字 + 陷阱</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">10</span>;i&gt;=<span class="number">10</span> ; i--)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>會印出負的數字，死回圈</p>
</li>
<li><p>解釋下列function功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二進制中有多少個1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        a++;</span><br><span class="line">        x = x&amp;(x<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 是否為２的次方</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">func</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n&amp;(n<span class="number">-1</span>) ==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>big and little endian + 指標</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>memory space</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>0x1000</td>
<td>0x01</td>
</tr>
<tr>
<td>0x1001</td>
<td>0x23</td>
</tr>
<tr>
<td>0x1002</td>
<td>0x45</td>
</tr>
<tr>
<td>0x1003</td>
<td>0x67</td>
</tr>
<tr>
<td>0x1004</td>
<td>0x89</td>
</tr>
<tr>
<td>0x1005</td>
<td>0xAB</td>
</tr>
<tr>
<td>0x1006</td>
<td>0xCD</td>
</tr>
<tr>
<td>0x1007</td>
<td>0xEF</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> *ptr = <span class="number">0x1000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, *ptr+<span class="number">1</span>); </span><br><span class="line"><span class="comment">// 0x67452302</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, *(ptr+<span class="number">1</span>));  </span><br><span class="line"><span class="comment">// 0x89674523</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>指標</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = a;</span><br><span class="line">*(p++) += <span class="number">100</span>;  <span class="comment">// 等同 *p++ += 100;</span></span><br><span class="line">*(++p) += <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 101  2   103 4   5   6</span></span><br></pre></td></tr></table></figure>


<ol start="7">
<li>觀念 變數存活範圍</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAY_SIZE(20);</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">func_a</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i ;</span><br><span class="line">    <span class="type">char</span> array_a[ARRAY_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ARRAY_SIZE;++i)&#123;</span><br><span class="line">        array_a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;array_a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> *buf_ptr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    buf_ptr = func_a();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ARRAY_SIZE; ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, buf_ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函數返回，因陣列變數只存活於函數當中，所以返回時會釋放，所以再去取該記憶體位置會得到亂碼</span></span><br><span class="line"><span class="comment">// 可以改成用malloc或 new 在返回</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>刷題</title>
    <url>/blog/2023/02/12/DataStruct/%E5%88%B7%E9%A1%8C/</url>
    <content><![CDATA[<h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><h2 id="基礎資料結構"><a href="#基礎資料結構" class="headerlink" title="基礎資料結構"></a>基礎資料結構</h2><h3 id="Prefix-Sum-and-diff-6"><a href="#Prefix-Sum-and-diff-6" class="headerlink" title="Prefix Sum and diff [6]"></a>Prefix Sum and diff [6]</h3><ul>
<li>*303 Range Sum Query - Immutable (Easy)</li>
<li>*304 Range Sum Query 2D - Immutable (Medium)</li>
<li>*560 Subarray Sum Equals K (Medium)</li>
<li>*370 Range Addition (Medium, Premium)</li>
<li>*1094 Car Pooling (Medium)</li>
<li>*1109 Corporate Flight Bookings (Medium)</li>
</ul>
<h3 id="Sliding-Window-5"><a href="#Sliding-Window-5" class="headerlink" title="Sliding Window [5]"></a>Sliding Window [5]</h3><ul>
<li>*76 Minimum Window Substring (Hard)</li>
<li>*567 Permutation in String (Medium)</li>
<li>*438 Find All Anagrams in a String (Medium)</li>
<li>*3 Longest Substring Without Repeating Characters (Medium)</li>
<li>*239 Sliding Window Maximum (Hard)</li>
</ul>
<h3 id="Binary-Search-8"><a href="#Binary-Search-8" class="headerlink" title="Binary Search [8]"></a>Binary Search [8]</h3><ul>
<li><p>704 Binary Search (Easy)</p>
</li>
<li><p>34 Find First and Last Position of Element in Sorted Array (Medium)</p>
</li>
<li><p>875 Koko Eating Bananas (Medium)</p>
</li>
<li><p>1011 Capacity To Ship Packages Within D Days (Medium)</p>
</li>
<li><p>35 Search Insert Position (Easy)</p>
</li>
<li><p>*354 Russian Doll Envelopes (Hard)</p>
</li>
<li><p>*392 Is Subsequence (Easy)</p>
</li>
<li><p>*793 Preimage Size of Factorial Zeroes Function (Hard)</p>
</li>
</ul>
<h3 id="Linked-List-13"><a href="#Linked-List-13" class="headerlink" title="Linked List [13]"></a>Linked List [13]</h3><ul>
<li><p>19 Remove Nth Node From End of List (Medium)</p>
</li>
<li><p>21 Merge Two Sorted Lists</p>
</li>
<li><p>23 Merge k Sorted Lists</p>
</li>
<li><p>141 Linked List Cycle (Easy)</p>
</li>
<li><p>142 Linked List Cycle II (Medium)</p>
</li>
<li><p>160 Intersection of Two Linked Lists</p>
</li>
<li><p>876 Middle of the Linked List (Easy)</p>
</li>
<li><p>2 Add Two Numbers (Medium)</p>
</li>
<li><p>25 Reverse Nodes in k-Group (Hard)</p>
</li>
<li><p>83 Remove Duplicates from Sorted List (Easy)</p>
</li>
<li><p>206 Reverse Linked List(Easy)</p>
</li>
<li><p>92 Reverse Linked List II (Medium)</p>
</li>
<li><p>234 Palindrome Linked List (Easy)</p>
</li>
<li><p>203 Remove Linked List Elements (Easy)</p>
<h3 id="Stack-and-Queue-2"><a href="#Stack-and-Queue-2" class="headerlink" title="Stack and Queue [2]"></a>Stack and Queue [2]</h3></li>
<li><p>232 Implement Queue using Stacks (Easy)</p>
</li>
<li><p>225 Implement Stack using Queues (Easy)</p>
</li>
</ul>
<h3 id="括號問題-5"><a href="#括號問題-5" class="headerlink" title="括號問題 [5]"></a>括號問題 [5]</h3><ul>
<li>20 Valid Parentheses (Easy)</li>
<li>*921 Minimum Add to Make Parentheses Valid (Medium)</li>
<li>*1541 Minimum Insertions to Balance a Parentheses String  (Medium)</li>
<li>*32 Longest Valid Parentheses (Hard)</li>
<li>1249 Minimum Remove to Make Valid Parentheses (Medium)</li>
</ul>
<h3 id="Monotonic-stack-and-Monotonic-queue-9"><a href="#Monotonic-stack-and-Monotonic-queue-9" class="headerlink" title="Monotonic stack and Monotonic queue [9]"></a>Monotonic stack and Monotonic queue [9]</h3><ul>
<li>496 Next Greater Element I (Easy)</li>
<li>503 Next Greater Element II (Medium)</li>
<li>739 Daily Temperatures (Medium)</li>
<li>*316 Remove Duplicate Letters (Medium)</li>
<li>*1081 Smallest Subsequence of Distinct Characters (Medium)</li>
<li>42 Trapping Rain Water (Hard)</li>
<li>*239 Sliding Window Maximum (Hard)</li>
<li>*316 Remove Duplicate Letters (Medium)</li>
<li>*1081 Smallest Subsequence of Distinct Characters (Medium)</li>
</ul>
<h3 id="Design-data-structure-8"><a href="#Design-data-structure-8" class="headerlink" title="Design data structure [8]"></a>Design data structure [8]</h3><ul>
<li><p>*146 LRU Cache (Medium)</p>
</li>
<li><p>*460 LFU Cache (Hard)</p>
</li>
<li><p>*380 Insert Delete GetRandom O(1) (Medium)</p>
<blockquote>
<p>*381 Insert Delete GetRandom O(1) - Duplicates allowed</p>
</blockquote>
</li>
<li><p>*710 Random Pick with Blacklist (Hard) </p>
</li>
<li><p>295 Find Median from Data Stream (Hard)</p>
</li>
<li><p>*355 Design Twitter (Medium)</p>
</li>
<li><p>*341 Flatten Nested List Iterator (Medium)</p>
</li>
<li><p>*895 Maximum Frequency Stack (Hard)</p>
</li>
</ul>
<p>[補充]</p>
<ul>
<li>*1206 Design Skiplist (Hard)</li>
<li>705 Design HashSet (Easy)</li>
<li>706 Design HashMap (Easy)</li>
<li>707 Design Linked List (Medium)    </li>
<li>641 Design Circular Deque (Medium)</li>
<li>622 Design Circular Queue (Medium)</li>
<li>225 Implement Stack using Queues (Easy)</li>
<li>232 Implement Queue using Stacks (Easy)</li>
<li>2241 Design an ATM Machine</li>
<li>*535 Encode and Decode TinyURL (Medium)</li>
<li>1396 Design Underground System</li>
</ul>
<h3 id="Heap-4"><a href="#Heap-4" class="headerlink" title="Heap [4]"></a>Heap [4]</h3><ul>
<li>215 Kth Largest Element in an Array (Medium) </li>
<li>23 Merge k Sorted Lists (Hard)</li>
<li>295 Find Median from Data Stream (Hard)</li>
<li>703 Kth Largest Element in a Stream (Easy)</li>
</ul>
<h3 id="Binary-Tree-30"><a href="#Binary-Tree-30" class="headerlink" title="Binary Tree [30]"></a>Binary Tree [30]</h3><ul>
<li><p>226 Invert Binary Tree (Easy)</p>
</li>
<li><p>114 Flatten Binary Tree to Linked List (Medium)</p>
</li>
<li><p>116 Populating Next Right Pointers in Each Node (Medium)</p>
</li>
<li><p>654 Maximum Binary Tree (Medium)</p>
</li>
</ul>
<p>Construct Binary Tree from</p>
<ul>
<li><p>105 Construct Binary Tree from Preorder and Inorder Traversal (Medium)</p>
</li>
<li><p>106 Construct Binary Tree from Inorder and Postorder Traversal (Medium)</p>
</li>
<li><p>889 Construct Binary Tree from Preorder and Postorder Traversal (Medium)</p>
</li>
<li><p>652 Find Duplicate Subtrees (Medium)</p>
</li>
<li><p>*297 Serialize and Deserialize Binary Tree (Hard)</p>
</li>
<li><p>236 Lowest Common Ancestor of a Binary Tree (Medium)</p>
</li>
<li><p>*1373 Maximum Sum BST in Binary Tree (Hard)</p>
</li>
<li><p>104 Maximum Depth of Binary Tree (Easy)</p>
</li>
<li><p>111 Minimum Depth of Binary Tree (Easy) </p>
</li>
<li><p>*669 Trim a Binary Search Tree (Medium)</p>
</li>
<li><p>543 Diameter of Binary Tree (Easy)</p>
</li>
<li><p>366 Find Leaves of Binary Tree (Medium, Premium)</p>
</li>
<li><p>*124 Binary Tree Maximum Path Sum (Hard)</p>
</li>
<li><p>515 Find Largest Value in Each Tree Row (Medium)</p>
</li>
<li><p>100 Same Tree (Easy) </p>
</li>
<li><p>222 Count Complete Tree Nodes (Medium)</p>
</li>
</ul>
<p>traverse</p>
<ul>
<li>94 Binary Tree Inorder Traversal (Easy)</li>
<li>102 Binary Tree Level Order Traversal (Medium)</li>
<li>107 Binary Tree Level Order Traversal II (Medium)</li>
<li>103 Binary Tree Zigzag Level Order Traversal (Medium)</li>
<li>144 Binary Tree Preorder Traversal (Easy)</li>
<li>145 Binary Tree Postorder Traversal (Easy)</li>
<li>965 Univalued Binary Tree (Easy)</li>
</ul>
<p>N-ary Tree</p>
<ul>
<li><p>559 Maximum Depth of N-ary Tree (Easy)</p>
</li>
<li><p>589 N-ary Tree Preorder Traversal (Easy)</p>
</li>
<li><p>590 N-ary Tree Postorder Traversal (Easy)</p>
</li>
<li><p>429 N-ary Tree Level Order Traversal</p>
</li>
<li><p>*341 Flatten Nested List Iterator (Medium)</p>
</li>
</ul>
<h3 id="Binary-Search-Tree-14"><a href="#Binary-Search-Tree-14" class="headerlink" title="Binary Search Tree [14]"></a>Binary Search Tree [14]</h3><ul>
<li>230 Kth Smallest Element in a BST (Medium)</li>
<li>538 Convert BST to Greater Tree (Medium)</li>
<li>1038 Binary Search Tree to Greater Sum Tree (Medium)</li>
</ul>
<p>operation</p>
<ul>
<li><p>450 Delete Node in a BST (Medium)</p>
</li>
<li><p>701 Insert into a Binary Search Tree (Medium)</p>
</li>
<li><p>700 Search in a Binary Search Tree (Easy)</p>
</li>
<li><p>98 Validate Binary Search Tree (Medium)</p>
</li>
<li><p>*96 Unique Binary Search Trees (Medium)</p>
</li>
<li><p>*95 Unique Binary Search Trees II (Medium)</p>
</li>
<li><p>*1373 Maximum Sum BST in Binary Tree (Hard)</p>
</li>
<li><p>501 Find Mode in Binary Search Tree (Easy)</p>
</li>
<li><p>530 Minimum Absolute Difference in BST (Easy)</p>
</li>
<li><p>783 Minimum Distance Between BST Nodes (Easy)</p>
</li>
<li><p>235 Lowest Common Ancestor of a Binary Search Tree (Easy)</p>
</li>
</ul>
<h2 id="Trie-5"><a href="#Trie-5" class="headerlink" title="*Trie [5]"></a>*Trie [5]</h2><ul>
<li>208 Implement Trie (Prefix Tree) (Medium)</li>
<li>1804 Implement Trie II (Prefix Tree) (Medium, Premium)</li>
<li>648 Replace Words (Medium)</li>
<li>211 Design Add and Search Words Data Structure (Medium)</li>
<li>677 Map Sum Pairs (Medium)</li>
</ul>
<h2 id="DFS-x2F-BFS-21"><a href="#DFS-x2F-BFS-21" class="headerlink" title="DFS&#x2F;BFS [21]"></a>DFS&#x2F;BFS [21]</h2><ul>
<li>46 Permutations (Medium)</li>
<li>47 Permutations II (Medium)</li>
<li>51 N-Queens (Hard)</li>
<li>52 N-Queens (Hard) </li>
<li>*698 Partition to K Equal Sum Subsets (Medium)</li>
<li>78 Subsets (Medium)</li>
<li>77 Combinations (Medium)</li>
<li>37 Sudoku Solver (Hard)</li>
<li>22 Generate Parentheses (Medium)</li>
<li>17 Letter Combinations of a Phone Number (Medium)</li>
<li>401 Binary Watch (Easy)</li>
</ul>
<p>islands</p>
<ul>
<li>200 Number of Islands (Medium)</li>
<li>1254 Number of Closed Islands (Medium)</li>
<li>1020 Number of Enclaves (Medium)</li>
<li>695 Max Area of Island (Medium)</li>
<li>*1905 Count Sub Islands (Medium)</li>
<li>694 Number of Distinct Islands (Medium, Premium)</li>
</ul>
<p>BFS</p>
<ul>
<li>111 Minimum Depth of Binary Tree (Easy)</li>
<li>752 Open the Lock (Medium)</li>
<li>*773 Sliding Puzzle (Hard)</li>
<li>*542 01 Matrix (Medium)</li>
<li>*994 Rotting Oranges (Medium)</li>
</ul>
<h3 id="Graph-17"><a href="#Graph-17" class="headerlink" title="*Graph [17]"></a>*Graph [17]</h3><ul>
<li><p>797 All Paths From Source to Target (Medium) </p>
</li>
<li><p>133 Clone Graph (Medium)</p>
</li>
<li><p>*207 Course Schedule (Medium)</p>
</li>
<li><p>210 Course Schedule II (Medium)</p>
</li>
<li><p>785 Is Graph Bipartite? (Medium)</p>
</li>
<li><p>886 Possible Bipartition (Medium)</p>
</li>
<li><p>277 Find the Celebrity (Medium, Premium)</p>
</li>
</ul>
<p>Union-Find</p>
<ul>
<li>323 Number of Connected Components in an Undirected Graph (Medium, Premium)</li>
<li>547 Number of Provinces (Medium)</li>
<li>130 Surrounded Regions (Medium)</li>
<li>990 Satisfiability of Equality Equations (Medium)</li>
</ul>
<p>Kruskal</p>
<ul>
<li>261 Graph Valid Tree (Medium, Premium)</li>
<li>1135 Connecting Cities With Minimum Cost (Medium, Premium)</li>
<li>1584 Min Cost to Connect All Points (Medium)</li>
</ul>
<p>Dijkstra</p>
<ul>
<li>743 Network Delay Time (Medium)</li>
<li>1514 Path with Maximum Probability (Medium)</li>
<li>1631 Path With Minimum Effort (Medium)</li>
</ul>
<h3 id="動態規劃基本問題-8"><a href="#動態規劃基本問題-8" class="headerlink" title="動態規劃基本問題 [8]"></a>動態規劃基本問題 [8]</h3><ul>
<li><p>509 Fibonacci Number  (Easy)</p>
</li>
<li><p>322 Coin Change (Medium)</p>
</li>
<li><p>*983 Minimum Cost For Tickets (Medium)</p>
</li>
<li><p>931 Minimum Falling Path Sum (Medium)</p>
<blockquote>
<p>120 Triangle (Medium)</p>
</blockquote>
</li>
<li><p>64 Minimum Path Sum (Medium)</p>
</li>
<li><p>70 Climbing Stairs (Easy)</p>
</li>
<li><p>62 Unique Paths (Easy)</p>
</li>
</ul>
<h3 id="子序列問題-12"><a href="#子序列問題-12" class="headerlink" title="子序列問題  [12]"></a>子序列問題  [12]</h3><ul>
<li><p>53 Maximum Subarray (Easy) </p>
</li>
<li><p>300 Longest Increasing Subsequence (Medium) </p>
</li>
<li><p>354 Russian Doll Envelopes</p>
</li>
<li><p>1143 Longest Common Subsequence (Medium)</p>
</li>
<li><p>583 Delete Operation for Two Strings (Medium)</p>
</li>
<li><p>712 Minimum ASCII Delete Sum for Two Strings (Medium)</p>
</li>
<li><p>*72 Edit Distance (Hard)</p>
</li>
<li><p>1312 Minimum Insertion Steps to Make a String Palindrome</p>
</li>
<li><p>516 Longest Palindromic Subsequence (Medium)</p>
</li>
<li><p>*5 Longest Palindromic Substring (Medium)</p>
</li>
<li><p>*647 Palindromic Substrings</p>
</li>
<li><p>*10 Regular Expression Matching (Hard)</p>
</li>
</ul>
<h3 id="背包問題-3"><a href="#背包問題-3" class="headerlink" title="背包問題 [3]"></a>背包問題 [3]</h3><ul>
<li>*518 Coin Change 2 (Medium)</li>
<li>*416 Partition Equal Subset Sum (Medium)<blockquote>
<p>698 Partition to K Equal Sum Subsets</p>
</blockquote>
</li>
<li>*494 Target Sum (Medium)</li>
</ul>
<h3 id="股票問題-6"><a href="#股票問題-6" class="headerlink" title="股票問題 [6]"></a>股票問題 [6]</h3><ul>
<li>121 Best Time to Buy and Sell Stock (Easy)</li>
<li>122 Best Time to Buy and Sell Stock II (Easy)</li>
<li>123 Best Time to Buy and Sell Stock III (Hard)</li>
<li>188 Best Time to Buy and Sell Stock IV (Hard)</li>
<li>309 Best Time to Buy and Sell Stock with Cooldown (Medium)</li>
<li>714 Best Time to Buy and Sell Stock with Cooldown (Medium)</li>
</ul>
<h3 id="搶劫問題-3"><a href="#搶劫問題-3" class="headerlink" title="搶劫問題 [3]"></a>搶劫問題 [3]</h3><ul>
<li>198 House Robber (Medium)</li>
<li>213 House Robber II (Medium)</li>
<li>337 House Robber III (Medium)</li>
</ul>
<h3 id="貪心問題-Greedy-8"><a href="#貪心問題-Greedy-8" class="headerlink" title="貪心問題 Greedy [8]"></a>貪心問題 Greedy [8]</h3><ul>
<li><p>134 Gas Station (Medium)</p>
</li>
<li><p>1024 Video Stitching (Medium)</p>
</li>
<li><p>453 Minimum Moves to Equal Array Elements (Easy)</p>
</li>
<li><p>435 Non-overlapping Intervals (Medium)</p>
</li>
<li><p>452 Minimum Number of Arrows to Burst Balloons (Medium)</p>
</li>
<li><p>55 Jump Game (Medium)</p>
</li>
<li><p>45 Jump Game II (Medium)</p>
</li>
<li><p>870 Advantage Shuffle (Medium)</p>
</li>
<li><p>2592 Maximize Greatness of an Array (Medium)</p>
</li>
</ul>
<blockquote>
<ol start="881">
<li>Boats to Save People</li>
<li>Broken Calculator</li>
<li>Smallest String With A Given Numeric Value</li>
<li>Minimum Domino Rotations For Equal Row</li>
<li>Candy</li>
<li>Two City Scheduling</li>
</ol>
</blockquote>
<h3 id="遊戲問題-10"><a href="#遊戲問題-10" class="headerlink" title="遊戲問題 [10]"></a>遊戲問題 [10]</h3><ul>
<li><p>174 Dungeon Game (Hard)</p>
</li>
<li><p>514 Freedom Trail (Hard)</p>
</li>
<li><p>787 Cheapest Flights Within K Stops (Medium) </p>
</li>
<li><p>887 Super Egg Drop (Hard)</p>
</li>
<li><p>312 Burst Balloons (Hard)</p>
</li>
<li><p>877 Stone Game (Medium)</p>
</li>
<li><p>651 4 Keys Keyboard (Medium)</p>
</li>
<li><p>292 Nim Game (Easy)</p>
</li>
<li><p>877 Stone Game (Medium)</p>
</li>
<li><p>319 Bulb Switcher (Medium)</p>
</li>
</ul>
<h2 id="Other-algo-and-Math"><a href="#Other-algo-and-Math" class="headerlink" title="Other algo and Math"></a>Other algo and Math</h2><h3 id="Math-7"><a href="#Math-7" class="headerlink" title="Math [7]"></a>Math [7]</h3><ul>
<li><p>204 Count Primes (Easy)</p>
</li>
<li><p>172 Factorial Trailing Zeroes (Easy)</p>
</li>
<li><p>793 Preimage Size of Factorial Zeroes Function (Hard)</p>
</li>
<li><p>382 Linked List Random Node (Medium)</p>
</li>
<li><p>398 Random Pick Index (Medium)</p>
</li>
<li><p>372 Super Pow (Medium)</p>
</li>
<li><p>453 Minimum Moves to Equal Array Elements (Easy)</p>
<blockquote>
<p>263 Ugly Number (Easy)<br>*264 Ugly Number II (Medium)<br>202 Happy Number (Easy)<br>204 Count Primes (Medium)<br>*279 Perfect Squares (Medium)</p>
</blockquote>
</li>
</ul>
<h3 id="nSum-問題-5"><a href="#nSum-問題-5" class="headerlink" title="nSum 問題 [5]"></a>nSum 問題 [5]</h3><ul>
<li>15 3Sum (Medium)</li>
<li>16 3Sum Closest</li>
<li>18 4Sum (Medium)</li>
<li>454 4Sum (Medium)</li>
<li>923 3Sum With Multiplicity (Medium)</li>
</ul>
<h3 id="區間問題-6"><a href="#區間問題-6" class="headerlink" title="區間問題 [6]"></a>區間問題 [6]</h3><ul>
<li><p>56 Merge Intervals (Medium)</p>
<blockquote>
<p>57 Insert Interval (Medium)</p>
</blockquote>
</li>
<li><p>986 Interval List Intersections (Medium)</p>
</li>
<li><p>1288 Remove Covered Intervals (Medium)</p>
</li>
<li><p>435 Non-overlapping Intervals (Medium)</p>
</li>
<li><p>452 Minimum Number of Arrows to Burst Balloons (Medium)</p>
</li>
<li><p>1024 Video Stitching (Medium)</p>
<blockquote>
<ol start="763">
<li>Partition Labels</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="計算機-3"><a href="#計算機-3" class="headerlink" title="計算機 [3]"></a>計算機 [3]</h3><ul>
<li>224 Basic Calculator (Hard)</li>
<li>227 Basic Calculator II (Medium)</li>
<li>772 Basic Calculator III (Hard)</li>
</ul>
<h3 id="高頻面試-5"><a href="#高頻面試-5" class="headerlink" title="高頻面試 [5]"></a>高頻面試 [5]</h3><ul>
<li><p>659 Split Array into Consecutive Subsequences (Medium)</p>
</li>
<li><p>391 Perfect Rectangle (Hard)</p>
</li>
<li><p>969 Pancake Sorting (Medium)</p>
</li>
<li><p>43 Multiply Strings (Medium)</p>
</li>
<li><p>855 Exam Room (Medium)</p>
</li>
</ul>
<h3 id="Other-Algo-4"><a href="#Other-Algo-4" class="headerlink" title="Other Algo  [4]"></a>Other Algo  [4]</h3><ul>
<li>241 Different Ways to Add Parentheses (Medium) </li>
<li>253 Meeting Rooms II (Medium, Premium)</li>
<li>134 Gas Station (Medium)</li>
<li>28 Implement strStr() (Easy)</li>
</ul>
<h3 id="Bit-Manipulation-9"><a href="#Bit-Manipulation-9" class="headerlink" title="Bit Manipulation [9]"></a>Bit Manipulation [9]</h3><ul>
<li><p>136 Single Number (Easy) </p>
</li>
<li><p>137 Single Number II (Medium)</p>
</li>
<li><p>260 Single Number III (Medium)</p>
</li>
<li><p>268 Missing Number (Easy)</p>
</li>
<li><p>389 Find the Difference (Easy)</p>
</li>
<li><p>190 Reverse Bits (Easy)</p>
</li>
<li><p>191 Number of 1 Bits (Easy)</p>
</li>
<li><p>231 Power of Two (Easy)</p>
</li>
<li><p>405 Convert a Number to Hexadecimal (Easy)</p>
<h3 id="Array-17"><a href="#Array-17" class="headerlink" title="Array [17]"></a>Array [17]</h3></li>
<li><p>448 Find All Numbers Disappeared in an Array (Easy)</p>
</li>
<li><p>26 Remove Duplicates from Sorted Array (Easy) </p>
<blockquote>
<ol start="80">
<li>Remove Duplicates from Sorted Array II</li>
</ol>
</blockquote>
</li>
<li><p>83 Remove Duplicates from Sorted List (Easy)</p>
<blockquote>
<ol start="82">
<li>Remove Duplicates from Sorted List II (Medium)</li>
</ol>
</blockquote>
</li>
<li><p>27 Remove Element (Easy)</p>
</li>
<li><p>283 Move Zeroes (Easy)</p>
</li>
<li><p>287 Find the Duplicate Number (Medium)</p>
</li>
<li><p>645 Set Mismatch</p>
</li>
<li><p>167 Two Sum II - Input array is sorted (Easy)</p>
</li>
<li><p>344 Reverse String (Easy)</p>
</li>
<li><p>541 Reverse String II (Easy)</p>
</li>
<li><p>345 Reverse Vowels of a String (Easy)</p>
</li>
<li><p>1 Two Sum (Easy)</p>
</li>
<li><p>350 Intersection of Two Arrays II (Easy)</p>
</li>
<li><p>349 Intersection of Two Arrays (Easy)</p>
</li>
<li><p>1002 Find Common Characters (Easy)</p>
</li>
<li><p>170 Two Sum III (Easy, Premium)</p>
</li>
<li><p>318 Maximum Product of Word Lengths (Medium)</p>
</li>
<li><p>912 Sort an Array (Medium)</p>
</li>
<li><p>315 Count of Smaller Numbers After Self (Hard)</p>
</li>
</ul>
<p>[補充]</p>
<ul>
<li>*1089 Duplicate Zeros (Easy)</li>
<li>941 Valid Mountain Array (Easy)</li>
<li>1299 Replace Elements with Greatest Element on Right Side (Easy)</li>
</ul>
<h2 id="Matrix-3"><a href="#Matrix-3" class="headerlink" title="Matrix [3]"></a>Matrix [3]</h2><ul>
<li>48 Rotate Image (Medium)</li>
<li>54 Spiral Matrix (Medium)</li>
<li>59 Spiral Matrix II (Medium)</li>
</ul>
<h2 id="一些觀念"><a href="#一些觀念" class="headerlink" title="一些觀念"></a>一些觀念</h2><ul>
<li>array </li>
<li>linked list<br>資料遍歷</li>
<li>線性訪問 for&#x2F;while</li>
<li>非線性訪問 遞迴</li>
</ul>
<p>基本操作就是增刪查改，訪問方式迭代&#x2F;遞迴<br>迭代與遞迴雖然時間複雜度都是O(N)，但是遞迴空間複雜度為O(N)，迭代則是O(1)</p>
<h3 id="quick-sort-vs-merge-sort"><a href="#quick-sort-vs-merge-sort" class="headerlink" title="quick sort vs merge sort"></a>quick sort vs merge sort</h3><p>quick sort &#x3D; preorder，這也說明了worse case 為什麼比merge sort差的原因<br>merge sort &#x3D; postorder</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/****** 前序遍历位置 ******/</span></span><br><span class="line">    <span class="comment">// 通过交换元素构建分界点 p</span></span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">partition</span>(nums, lo, hi);</span><br><span class="line">    <span class="comment">/************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(nums, lo, p - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(nums, p + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">sort</span>(nums, lo, mid);</span><br><span class="line">    <span class="built_in">sort</span>(nums, mid + <span class="number">1</span>, hi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****** 后序遍历位置 ******/</span></span><br><span class="line">    <span class="comment">// 合并两个排好序的子数组</span></span><br><span class="line">    <span class="built_in">merge</span>(nums, lo, mid, hi);</span><br><span class="line">    <span class="comment">/************************/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>小知識</p>
<ul>
<li>涉及到recursive，都可以視為樹的問題</li>
<li>很多動態規劃問題也是在拜訪一個樹</li>
<li>遞迴 其實就是stack概念</li>
</ul>
<p>小訣竅</p>
<ul>
<li>鏈接串列、子字串、數組題，用雙指針</li>
<li>快慢指針用於鏈接串列操作</li>
<li>左右指針用於數組操作，二元搜尋低一檔次</li>
<li>滑動窗口用於子字串</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>遞回</th>
<th>迭代</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>花費較多的時間、較無效率</td>
<td>執行時間較短</td>
</tr>
<tr>
<td></td>
<td>需要額外的 Stack 支持</td>
<td>不需要額外stack支持，但通常佔用儲存空間較大</td>
</tr>
<tr>
<td></td>
<td>程式可讀性、較為精簡</td>
<td>程式碼較冗長</td>
</tr>
<tr>
<td></td>
<td>易處理較複雜問題</td>
<td></td>
</tr>
</tbody></table>
<p>two pointer 雙指標問題<br>    - slow fast 鏈接串列<br>        - 環狀問題：第一次相遇後重置slow &#x3D; head ，fast &#x3D; 相遇點，再一起跑，這時快慢一致相遇點就是環狀起點。<br>    - left right pointer 數組 ：<br>        - Binary Search、變形的Binary Search<br>        - 數組 sum、數組 reverse、in-place 修改數組<br>        - Sliding window</p>
<ul>
<li>刪除&#x2F;搜尋 數組任意元素只要O(1)<ul>
<li>結合hash table 和 數組。hash插入搜尋刪除O(logn)  數組插入O(1)搜尋O(n)刪除O(n)</li>
<li>關鍵在於刪除元素時，先把該元素交換到數組尾部，在pop掉</li>
</ul>
</li>
</ul>
<ul>
<li>變形的Binary Search 找出自定義的函數，必須是單調遞減(遞增)函數、初始化left、right</li>
</ul>
<h2 id="好用的框架-summary"><a href="#好用的框架-summary" class="headerlink" title="好用的框架 summary"></a>好用的框架 summary</h2><p>字串的子序列或是匹配問題直接就上<strong>動態規劃</strong><br>遇到需要求出所有可能況狀首先考慮用<strong>遞迴</strong>。<br>x^0 &#x3D; 0, x^x &#x3D; 0, xor滿足交換率<br>雙指針分為 <strong>快慢指針和左右指針</strong>，快慢指針主要解決linked list問題，比如linked list是否有環，左右指針主要解決數組或字串問題，例如二元搜尋<br>快慢指針 判斷linked list是否有環、鏈表的環的起點、鏈表中點、鏈表中特定位置元素<br>左右指針 二元搜尋、兩數之和、反轉數組、移動窗口、子字串問題</p>
<h3 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># 初始化 base <span class="keyword">case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"># 进行状态转移</span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure>

<h3 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line">def <span class="built_in">backtrack</span>(路径, 选择列表):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.<span class="built_in">add</span>(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        <span class="built_in">backtrack</span>(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回溯算法關注的不是節點，而是樹枝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 计算从起点 start 到终点 target 的最近距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q; <span class="comment">// 核心数据结构</span></span><br><span class="line">    Set&lt;Node&gt; visited; <span class="comment">// 避免走回头路</span></span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">offer</span>(start); <span class="comment">// 将起点加入队列</span></span><br><span class="line">    visited.<span class="built_in">add</span>(start);</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>; <span class="comment">// 记录扩散的步数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q <span class="keyword">not</span> empty) &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">/* 将当前队列中的所有节点向四周扩散 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            Node cur = q.<span class="built_in">poll</span>();</span><br><span class="line">            <span class="comment">/* 划重点：这里判断是否到达终点 */</span></span><br><span class="line">            <span class="keyword">if</span> (cur is target)</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            <span class="comment">/* 将 cur 的相邻节点加入队列 */</span></span><br><span class="line">            <span class="keyword">for</span> (Node x : cur.<span class="built_in">adj</span>())</span><br><span class="line">                <span class="keyword">if</span> (x <span class="keyword">not</span> in visited) &#123;</span><br><span class="line">                    q.<span class="built_in">offer</span>(x);</span><br><span class="line">                    visited.<span class="built_in">add</span>(x);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 划重点：更新步数在这里 */</span></span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="樹的遍歷"><a href="#樹的遍歷" class="headerlink" title="樹的遍歷"></a>樹的遍歷</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 二叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.left)</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.right)</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;`</span><br><span class="line">    <span class="comment">// 增大窗口</span></span><br><span class="line">    window.<span class="built_in">add</span>(s[right]);</span><br><span class="line">    right++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (window needs shrink) &#123;</span><br><span class="line">        <span class="comment">// 缩小窗口</span></span><br><span class="line">        window.<span class="built_in">remove</span>(s[left]);</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)</span><br><span class="line">        <span class="comment">// 找到目标，做点什么</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        <span class="built_in">BST</span>(root.right, target);</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        <span class="built_in">BST</span>(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Graph-traverse"><a href="#Graph-traverse" class="headerlink" title="Graph traverse"></a>Graph traverse</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (TreeNode child : root.children)</span><br><span class="line">        <span class="built_in">traverse</span>(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有環的圖</span></span><br><span class="line">Graph graph;</span><br><span class="line">boolean[] visited;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode neighbor : graph.<span class="built_in">neighbors</span>(s))</span><br><span class="line">        <span class="built_in">traverse</span>(neighbor);</span><br><span class="line">    <span class="comment">// 离开节点 s</span></span><br><span class="line">    visited[s] = <span class="literal">false</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有向圖含有環的時候才需要 visited 數組輔助。</span></span><br><span class="line"><span class="comment">// 如果沒有環，連visited 都可以省略了，等同於樹的遍歷</span></span><br></pre></td></tr></table></figure>




<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://github.com/labuladong/fucking-algorithm">算法中文手冊</a></li>
<li><a href="https://github.com/geekxh/hello-algorithm">hello-algorithm</a></li>
<li><a href="https://www.programcreek.com/2013/08/leetcode-problem-classification/">Algorithm Problem Classification</a></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
  </entry>
  <entry>
    <title>動態規劃</title>
    <url>/blog/2023/02/12/DataStruct/%E5%8B%95%E6%85%8B%E8%A6%8F%E5%8A%83/</url>
    <content><![CDATA[<p>一般形式就是求極值，核心思想是窮舉 + 重疊子問題。狀態、選擇、base case</p>
<h2 id="動態規劃框架"><a href="#動態規劃框架" class="headerlink" title="動態規劃框架"></a>動態規劃框架</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># 初始化 base <span class="keyword">case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"># 进行状态转移</span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure>

<h2 id="壓縮動態規劃"><a href="#壓縮動態規劃" class="headerlink" title="壓縮動態規劃"></a>壓縮動態規劃</h2><p>注意到dp[i][j] 都是由 dp[i-1][..] 轉移過來的，之前的數據都不需要了，所以可以將二維壓縮成一維，節省空間複雜度。</p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>動態規劃一般形式，求極值</p>
<h3 id="動態規劃基本問題-8"><a href="#動態規劃基本問題-8" class="headerlink" title="動態規劃基本問題 [8]"></a>動態規劃基本問題 [8]</h3><ul>
<li><p>509 Fibonacci Number  (Easy)</p>
</li>
<li><p>322 Coin Change (Medium)</p>
</li>
<li><p>*983 Minimum Cost For Tickets (Medium)</p>
</li>
<li><p>931 Minimum Falling Path Sum (Medium)</p>
</li>
<li><p>64 Minimum Path Sum (Medium)</p>
</li>
<li><p>70 Climbing Stairs (Easy)</p>
</li>
<li><p>62 Unique Paths (Easy)</p>
<blockquote>
<p>*63 Unique Paths II (Medium)</p>
</blockquote>
</li>
</ul>
<h3 id="子序列問題-14"><a href="#子序列問題-14" class="headerlink" title="子序列問題  [14]"></a>子序列問題  [14]</h3><ul>
<li><p>53 Maximum Subarray (Easy) </p>
<blockquote>
<p>*918 Maximum Sum Circular Subarray (Medium)<br>1567 Maximum Length of Subarray With Positive Product (Medium)</p>
</blockquote>
</li>
<li><p>300 Longest Increasing Subsequence (Medium) </p>
</li>
<li><p>354 Russian Doll Envelopes</p>
</li>
<li><p>1143 Longest Common Subsequence (Medium)</p>
</li>
<li><p>583 Delete Operation for Two Strings (Medium)</p>
</li>
<li><p>712 Minimum ASCII Delete Sum for Two Strings (Medium)</p>
</li>
<li><p>72 Edit Distance (Hard)</p>
</li>
<li><p>1312 Minimum Insertion Steps to Make a String Palindrome</p>
</li>
<li><p>516 Longest Palindromic Subsequence (Medium)</p>
</li>
<li><p>*5 Longest Palindromic Substring (Medium)</p>
</li>
<li><p>647 Palindromic Substrings</p>
</li>
<li><p>10 Regular Expression Matching (Hard)</p>
</li>
</ul>
<h3 id="背包問題-3"><a href="#背包問題-3" class="headerlink" title="背包問題 [3]"></a>背包問題 [3]</h3><ul>
<li><p>518 Coin Change 2 (Medium)</p>
</li>
<li><p>416 Partition Equal Subset Sum (Medium)</p>
</li>
<li><p>494 Target Sum (Medium)</p>
</li>
<li><p>2466 Count Ways To Build Good Strings</p>
</li>
</ul>
<h3 id="股票問題-6"><a href="#股票問題-6" class="headerlink" title="股票問題 [6]"></a>股票問題 [6]</h3><ul>
<li>121 Best Time to Buy and Sell Stock (Easy)</li>
<li>188 Best Time to Buy and Sell Stock IV (Hard)</li>
</ul>
<ul>
<li>122 Best Time to Buy and Sell Stock II (Easy)</li>
<li>123 Best Time to Buy and Sell Stock III (Hard)</li>
<li>309 Best Time to Buy and Sell Stock with Cooldown (Medium)</li>
<li>714 Best Time to Buy and Sell Stock with Cooldown (Medium)</li>
</ul>
<h3 id="搶劫問題-3"><a href="#搶劫問題-3" class="headerlink" title="搶劫問題 [3]"></a>搶劫問題 [3]</h3><ul>
<li>198 House Robber (Medium)</li>
<li>213 House Robber II (Medium)</li>
<li>337 House Robber III (Medium)</li>
</ul>
<h3 id="貪心問題-8"><a href="#貪心問題-8" class="headerlink" title="貪心問題 [8]"></a>貪心問題 [8]</h3><ul>
<li><p>134 Gas Station (Medium)</p>
</li>
<li><p>1024 Video Stitching (Medium)</p>
</li>
<li><p>453 Minimum Moves to Equal Array Elements (Easy)</p>
</li>
<li><p>435 Non-overlapping Intervals (Medium)</p>
</li>
<li><p>452 Minimum Number of Arrows to Burst Balloons (Medium)</p>
</li>
<li><p>55 Jump Game (Medium)</p>
</li>
<li><p>45 Jump Game II (Medium)</p>
</li>
<li><p>870 Advantage Shuffle (Medium)</p>
</li>
</ul>
<h3 id="遊戲問題-10"><a href="#遊戲問題-10" class="headerlink" title="遊戲問題 [10]"></a>遊戲問題 [10]</h3><ul>
<li><p>174 Dungeon Game (Hard)</p>
</li>
<li><p>514 Freedom Trail (Hard)</p>
</li>
<li><p>787 Cheapest Flights Within K Stops (Medium) </p>
</li>
<li><p>887 Super Egg Drop (Hard)</p>
</li>
<li><p>312 Burst Balloons (Hard)</p>
</li>
<li><p>877 Stone Game (Medium)</p>
</li>
<li><p>651 4 Keys Keyboard (Medium)</p>
</li>
<li><p>292 Nim Game (Easy)</p>
</li>
<li><p>877 Stone Game (Medium)</p>
</li>
<li><p>319 Bulb Switcher (Medium)</p>
</li>
</ul>
<h2 id="補充-19"><a href="#補充-19" class="headerlink" title="補充 [19]"></a>補充 [19]</h2><ul>
<li><p>1137 N-th Tribonacci Number</p>
</li>
<li><p>746 Min Cost Climbing Stairs</p>
</li>
<li><p>204 Count Primes</p>
</li>
<li><p>740 Delete and Earn</p>
</li>
<li><p>120 Triangle</p>
</li>
<li><p>1014 Best Sightseeing Pair</p>
</li>
<li><p>397 Integer Replacement</p>
</li>
<li><p>1567 Maximum Length of Subarray With Positive Product (Medium)</p>
</li>
<li><p>377 Combination Sum IV</p>
</li>
<li><p>139 Word Break (Medium)</p>
</li>
<li><p>140 Word Break II (Hard)</p>
</li>
<li><p>*413 Arithmetic Slices</p>
</li>
<li><p>91 Decode Ways</p>
</li>
<li><p>279 Perfect Squares</p>
</li>
<li><p>799 Champagne Tower</p>
</li>
</ul>
<p>two dp</p>
<ul>
<li>918 Maximum Sum Circular Subarray</li>
<li>152 Maximum Product Subarray (Medium)</li>
<li>42 Trapping Rain Water</li>
<li>334 Increasing Triplet Subsequence</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>區間問題</title>
    <url>/blog/2023/02/12/DataStruct/%E5%8D%80%E9%96%93%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<p>本質上 就是線段問題，合併所有線段、找出線段的交集。可以用<strong>排序、畫圖技巧</strong></p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>56 Merge Intervals (Medium)</li>
<li>57 Insert Interval (Medium)</li>
</ul>
<ul>
<li>986 Interval List Intersections (Medium)</li>
<li>1288 Remove Covered Intervals (Medium)</li>
</ul>
<ul>
<li><p>763 Partition Labels</p>
</li>
<li><p>greedy</p>
<ul>
<li>435 Non-overlapping Intervals (Medium)</li>
<li>452 Minimum Number of Arrows to Burst Balloons (Medium)</li>
<li>1024 Video Stitching (Medium)</li>
</ul>
</li>
</ul>
<p>三種狀況，全交集、部分交集、沒交集</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>單調堆疊佇列</title>
    <url>/blog/2023/02/12/DataStruct/%E5%96%AE%E8%AA%BF%E5%A0%86%E7%96%8A%E4%BD%87%E5%88%97/</url>
    <content><![CDATA[<h2 id="monotonic-stack"><a href="#monotonic-stack" class="headerlink" title="monotonic stack"></a>monotonic stack</h2><h3 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h3><p>這個要用monotonic stack，我刷題目下來，這類monotonic stack 我覺得稍微困難，意思大概就是維護一個stack，每當number push into stack，會比較stack.top()，大於或小於(是大於還是小於看應用)，使得stack 裡面呈現monotonic ，所以稱之 monotonic stack。</p>
<ul>
<li>monotonic stack</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>() &lt;= nums[i]) &#123;</span><br><span class="line">    <span class="comment">// 将前面小于自己的元素都删除</span></span><br><span class="line">    <span class="comment">// 矮个起开，反正也被挡着了。。。</span></span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><ul>
<li>496 Next Greater Element I (Medium)</li>
<li>503 Next Greater Element II (Medium)</li>
<li>739 Daily Temperatures (Medium)</li>
<li>316 Remove Duplicate Letters (Medium)</li>
<li>1081 Smallest Subsequence of Distinct Characters (Medium)</li>
<li>42 Trapping Rain Water (Hard)</li>
<li>*316 Remove Duplicate Letters (Medium)</li>
<li>*1081 Smallest Subsequence of Distinct Characters (Medium)</li>
</ul>
<p>補充</p>
<ul>
<li>402 Remove K Digits</li>
<li>1019 Next Greater Node In Linked List (Medium)</li>
<li>901 Online Stock Span (Medium)</li>
<li>402 Remove K Digits (Medium)</li>
<li>84 Largest Rectangle in Histogram (Hard)<blockquote>
<p>85 Maximal Rectangle (Hard)</p>
</blockquote>
</li>
<li>42 Trapping Rain Water (Hard)</li>
<li>581 Shortest Unsorted Continuous Subarray</li>
</ul>
<h2 id="monotonic-queue"><a href="#monotonic-queue" class="headerlink" title="monotonic queue"></a>monotonic queue</h2><h2 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h2><ul>
<li>239 Sliding Window Maximum (Hard)</li>
</ul>
<h2 id="觀念-1"><a href="#觀念-1" class="headerlink" title="觀念"></a>觀念</h2><ul>
<li>遞減queue<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MonotonicQueue</span> &#123;</span><br><span class="line">    <span class="comment">// 双链表，支持头部和尾部增删元素</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 将前面小于自己的元素都删除</span></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; q.getLast() &lt; n) &#123;</span><br><span class="line">            q.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        q.addLast(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// O(1)</span></span><br><span class="line">        <span class="keyword">return</span> q.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == q.getFirst()) &#123;</span><br><span class="line">            q.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>monotonic stack</tag>
        <tag>monotonic queue</tag>
      </tags>
  </entry>
  <entry>
    <title>廣度優先搜尋&amp;深度優先搜尋</title>
    <url>/blog/2023/02/12/DataStruct/%E5%BB%A3%E5%BA%A6%E5%84%AA%E5%85%88%E6%90%9C%E5%B0%8B%EF%BC%86%E6%B7%B1%E5%BA%A6%E5%84%AA%E5%85%88%E6%90%9C%E5%B0%8B/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>46 Permutations (Medium)</li>
<li>47 Permutations II (Medium)</li>
<li>51 N-Queens (Hard)</li>
<li>52 N-Queens (Hard) </li>
<li>698 Partition to K Equal Sum Subsets (Medium)</li>
<li>78 Subsets (Medium)</li>
<li>77 Combinations (Medium)</li>
<li>37 Sudoku Solver (Hard)</li>
<li>22 Generate Parentheses (Medium)</li>
</ul>
<p>islands</p>
<ul>
<li>200 Number of Islands (Medium)</li>
<li>1254 Number of Closed Islands (Medium)</li>
<li>1020 Number of Enclaves (Medium)</li>
<li>695 Max Area of Island (Medium)</li>
<li>1905 Count Sub Islands (Medium)</li>
<li>694 Number of Distinct Islands (Medium, Premium)</li>
</ul>
<p>BFS</p>
<ul>
<li>111 Minimum Depth of Binary Tree (Easy)</li>
<li>752 Open the Lock (Medium)</li>
<li>773 Sliding Puzzle (Hard)</li>
<li>542 01 Matrix (Medium)</li>
<li>994 Rotting Oranges (Medium)</li>
</ul>
<p>[補充]</p>
<ul>
<li>112 Path Sum</li>
<li>113 Path Sum II</li>
<li>437 Path Sum III</li>
<li>733 Flood Fill (Easy)</li>
</ul>
<p>[補充]</p>
<ul>
<li>1091 Shortest Path in Binary Matrix</li>
<li>797 All Paths From Source to Target</li>
</ul>
<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>Backtracking &#x3D; DFS&#x3D; 運用遞迴依序窮舉各個維度的數值。暴力法<br>BFS，BFS 找到的路徑一定是最短的，用空間換取時間。一般來說些奧queue支持</p>
<p>複雜度分析，以求樹的高度、或求最短路徑為例。<br>DFS 需要O(logN) 空間，時間通常較多<br>BFS 需要O(N) 空間，時間通常較少</p>
<h2 id="Backtracking-觀念與框架"><a href="#Backtracking-觀念與框架" class="headerlink" title="Backtracking 觀念與框架"></a>Backtracking 觀念與框架</h2><p>本質上是DFS 決策樹的遍歷過程。所以算是暴力求解。路徑、當前選擇、結束條件。O(logN)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line">def <span class="built_in">backtrack</span>(路径, 选择列表):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.<span class="built_in">add</span>(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        <span class="built_in">backtrack</span>(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title function_">traversal</span><span class="params">(TreeNode root)</span> &#123;     </span><br><span class="line">    List&lt;TreeNode&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); </span><br><span class="line">    stack.add(root); </span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123; </span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.peek(); </span><br><span class="line">        res.add(node);         </span><br><span class="line">        stack.pop();                         </span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">           stack.push(node.right);</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">           stack.push(node.left);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BFS-觀念與框架"><a href="#BFS-觀念與框架" class="headerlink" title="BFS 觀念與框架"></a>BFS 觀念與框架</h2><p>找到路徑肯定是最短的，但代價就是空間複雜度比DFS大很多。用queue 輔助。O(N)。<strong>用空間換取時間</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算从起点 start 到终点 target 的最近距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q; <span class="comment">// 核心数据结构</span></span><br><span class="line">    Set&lt;Node&gt; visited; <span class="comment">// 避免走回头路</span></span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">offer</span>(start); <span class="comment">// 将起点加入队列</span></span><br><span class="line">    visited.<span class="built_in">add</span>(start);</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>; <span class="comment">// 记录扩散的步数或是樹的深度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q <span class="keyword">not</span> empty) &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">/* 将当前队列中的所有节点向四周扩散 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            Node cur = q.<span class="built_in">poll</span>();</span><br><span class="line">            <span class="comment">/* 划重点：这里判断是否到达终点 */</span></span><br><span class="line">            <span class="keyword">if</span> (cur is target)</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            <span class="comment">/* 将 cur 的相邻节点加入队列 */</span></span><br><span class="line">            <span class="keyword">for</span> (Node x : cur.<span class="built_in">adj</span>())</span><br><span class="line">                <span class="keyword">if</span> (x <span class="keyword">not</span> in visited) &#123;</span><br><span class="line">                    q.<span class="built_in">offer</span>(x);</span><br><span class="line">                    visited.<span class="built_in">add</span>(x);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 划重点：更新步数在这里 */</span></span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>樹</title>
    <url>/blog/2023/02/12/DataStruct/%E6%A8%B9/</url>
    <content><![CDATA[<h2 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><ul>
<li><p>226 Invert Binary Tree (Easy)</p>
</li>
<li><p>114 Flatten Binary Tree to Linked List (Medium)</p>
</li>
<li><p>116 Populating Next Right Pointers in Each Node (Medium)</p>
</li>
<li><p>654 Maximum Binary Tree (Medium)</p>
</li>
</ul>
<p>Construct Binary Tree from</p>
<ul>
<li><p>105 Construct Binary Tree from Preorder and Inorder Traversal (Medium)</p>
</li>
<li><p>106 Construct Binary Tree from Inorder and Postorder Traversal (Medium)</p>
</li>
<li><p>889 Construct Binary Tree from Preorder and Postorder Traversal (Medium)</p>
</li>
<li><p>652 Find Duplicate Subtrees (Medium)</p>
</li>
<li><p>*297 Serialize and Deserialize Binary Tree (Hard)</p>
</li>
<li><p>236 Lowest Common Ancestor of a Binary Tree (Medium)</p>
</li>
<li><p>1373 Maximum Sum BST in Binary Tree (Hard)</p>
</li>
<li><p>104 Maximum Depth of Binary Tree (Easy)</p>
</li>
<li><p>543 Diameter of Binary Tree (Easy)</p>
</li>
</ul>
<p>traverse</p>
<ul>
<li><p>94 Binary Tree Inorder Traversal (Easy)</p>
</li>
<li><p>102 Binary Tree Level Order Traversal (Medium)</p>
</li>
<li><p>107 Binary Tree Level Order Traversal II (Medium)</p>
</li>
<li><p>103 Binary Tree Zigzag Level Order Traversal (Medium)</p>
</li>
<li><p>144 Binary Tree Preorder Traversal (Easy)</p>
</li>
<li><p>145 Binary Tree Postorder Traversal (Easy)</p>
<blockquote>
<p>Morris Traversal <code>O(1)</code> space <code>O(n) time</code></p>
</blockquote>
</li>
<li><p>100 Same Tree (Easy) </p>
</li>
<li><p>104 Maximum Depth of Binary Tree (Easy) </p>
</li>
<li><p>111 Minimum Depth of Binary Tree (Easy) </p>
</li>
<li><p>222 Count Complete Tree Nodes (Medium)</p>
</li>
<li><p>501 Find Mode in Binary Search Tree (Easy)</p>
</li>
</ul>
<p>N-ary Tree</p>
<ul>
<li><p>559 Maximum Depth of N-ary Tree (Easy)</p>
</li>
<li><p>589 N-ary Tree Preorder Traversal (Easy)</p>
</li>
<li><p>590 N-ary Tree Postorder Traversal (Easy)</p>
</li>
<li><p>429 N-ary Tree Level Order Traversal</p>
</li>
<li><p>965 Univalued Binary Tree (Easy)</p>
</li>
<li><p>341 Flatten Nested List Iterator (Medium)</p>
</li>
</ul>
<p>Path Sum</p>
<ul>
<li>112 Path Sum (Easy)</li>
<li>113 Path Sum II (Medium)</li>
<li>*437 Path Sum III (Medium)</li>
<li>129 Sum Root to Leaf Numbers (Medium)</li>
<li>*124 Binary Tree Maximum Path Sum (Hard)</li>
<li>687 Longest Univalue Path</li>
</ul>
<p>[補充]</p>
<ul>
<li>430 Flatten a Multilevel Doubly Linked List (Medium)</li>
<li>117 Populating Next Right Pointers in Each Node II (Medium)</li>
<li>637 Average of Levels in Binary Tree</li>
<li>110 Balanced Binary Tree</li>
<li>814 Binary Tree Pruning</li>
<li>617 Merge Two Binary Trees (Easy)</li>
<li>117 Populating Next Right Pointers in Each Node II (Medium)</li>
</ul>
<h3 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h3><p><strong>快速排序是二元樹的前序遍歷，合併排序是二元樹的後序遍歷。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">Partition</span>(nums, l, r);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums, l, pivot - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums, pivot + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合併排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(nums, l, mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(nums, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">Merge</span>(nums, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>寫有關於樹的演算法，或是說寫有關於遞迴演算法，關鍵一直都是必須搞清楚明確函數的定義是什麼，相信這個定義，不要跳入遞迴細節。</p>
<h3 id="遍歷樹-框架"><a href="#遍歷樹-框架" class="headerlink" title="遍歷樹 框架"></a>遍歷樹 框架</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 二元樹遍歷框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序遍歷 TODO</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.left)</span><br><span class="line">    <span class="comment">// 中序遍歷 TODO</span></span><br><span class="line">    <span class="built_in">traverse</span>(root.right)</span><br><span class="line">    <span class="comment">// 後序遍歷 TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><p>Binary Search Tree  BST 中序遍歷是有序的</p>
<h3 id="BST-框架"><a href="#BST-框架" class="headerlink" title="BST 框架"></a>BST 框架</h3><h3 id="題目-1"><a href="#題目-1" class="headerlink" title="題目"></a>題目</h3><ul>
<li>230 Kth Smallest Element in a BST (Medium)</li>
<li>538 Convert BST to Greater Tree (Medium)</li>
<li>1038 Binary Search Tree to Greater Sum Tree (Medium)</li>
</ul>
<p>operation</p>
<ul>
<li><p>450 Delete Node in a BST (Medium)</p>
</li>
<li><p>701 Insert into a Binary Search Tree (Medium)</p>
</li>
<li><p>700 Search in a Binary Search Tree (Easy)</p>
</li>
<li><p>98 Validate Binary Search Tree (Medium)</p>
</li>
<li><p>96 Unique Binary Search Trees (Medium)</p>
</li>
<li><p>95 Unique Binary Search Trees II (Medium)</p>
</li>
<li><p>1373 Maximum Sum BST in Binary Tree (Hard)</p>
</li>
<li><p>501 Find Mode in Binary Search Tree (Easy)</p>
</li>
<li><p>530 Minimum Absolute Difference in BST (Easy)</p>
</li>
<li><p>783 Minimum Distance Between BST Nodes (Easy)</p>
</li>
<li><p>235 Lowest Common Ancestor of a Binary Search Tree (Easy)</p>
</li>
</ul>
<h3 id="觀念-1"><a href="#觀念-1" class="headerlink" title="觀念"></a>觀念</h3><p>判斷 BST 的合法性</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 限定以 root 为根的子树节点必须满足 max.val &gt; root.val &gt; min.val */</span></span><br><span class="line"><span class="function">boolean <span class="title">isValidBST</span><span class="params">(TreeNode root, TreeNode min, TreeNode max)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 若 root.val 不符合 max 和 min 的限制，说明不是合法 BST</span></span><br><span class="line">    <span class="keyword">if</span> (min != null &amp;&amp; root.val &lt;= min.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (max != null &amp;&amp; root.val &gt;= max.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 限定左子树的最大值是 root.val，右子树的最小值是 root.val</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root.left, min, root) </span><br><span class="line">        &amp;&amp; <span class="built_in">isValidBST</span>(root.right, root, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜尋一個數</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// option 1 brute force</span></span><br><span class="line"><span class="function">boolean <span class="title">isInBST</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 当前节点没找到就递归地去左右子树寻找</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isInBST</span>(root.left, target)</span><br><span class="line">        || <span class="built_in">isInBST</span>(root.right, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// option 2 binary search 真正BST精神 </span></span><br><span class="line"><span class="function">boolean <span class="title">isInBST</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isInBST</span>(root.right, target);</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isInBST</span>(root.left, target);</span><br><span class="line">    <span class="comment">// root 该做的事做完了，顺带把框架也完成了，妙</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  抽象出來</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BST</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == target)</span><br><span class="line">        <span class="comment">// 找到目标，做点什么</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) </span><br><span class="line">        <span class="built_in">BST</span>(root.right, target);</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target)</span><br><span class="line">        <span class="built_in">BST</span>(root.left, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入一個數，涉及到“改”，就要返回樹的結構</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 找到空位置插入新节点</span></span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">    <span class="comment">// if (root.val == val)</span></span><br><span class="line">    <span class="comment">//     BST 中一般不会插入已存在元素</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val) </span><br><span class="line">        root.right = <span class="built_in">insertIntoBST</span>(root.right, val);</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; val) </span><br><span class="line">        root.left = <span class="built_in">insertIntoBST</span>(root.left, val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>刪除一個數，先“查“再”改“。找到後判斷是否有子節點，及是否破壞結構</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象 框架</span></span><br><span class="line"><span class="function">TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">        <span class="comment">// 找到啦，进行删除</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">        <span class="comment">// 去左子树找</span></span><br><span class="line">        root.left = <span class="built_in">deleteNode</span>(root.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; key) &#123;</span><br><span class="line">        <span class="comment">// 去右子树找</span></span><br><span class="line">        root.right = <span class="built_in">deleteNode</span>(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">        <span class="comment">// 这两个 if 把情况 1 和 2 都正确处理了</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == null) <span class="keyword">return</span> root.right;</span><br><span class="line">        <span class="keyword">if</span> (root.right == null) <span class="keyword">return</span> root.left;</span><br><span class="line">        <span class="comment">// 处理情况 3</span></span><br><span class="line">        TreeNode minNode = <span class="built_in">getMin</span>(root.right);</span><br><span class="line">        root.val = minNode.val;</span><br><span class="line">        root.right = <span class="built_in">deleteNode</span>(root.right, minNode.val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">        root.left = <span class="built_in">deleteNode</span>(root.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; key) &#123;</span><br><span class="line">        root.right = <span class="built_in">deleteNode</span>(root.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode <span class="title">getMin</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// BST 最左边的就是最小的</span></span><br><span class="line">    <span class="keyword">while</span> (node.left != null) node = node.left;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>建造最大二元樹</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums is empty) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="comment">// 找到数组中的最大值</span></span><br><span class="line">    <span class="type">int</span> maxVal = Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; maxVal) &#123;</span><br><span class="line">            maxVal = nums[i];</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(maxVal);</span><br><span class="line">    <span class="comment">// 递归调用构造左右子树</span></span><br><span class="line">    root.left = <span class="built_in">constructMaximumBinaryTree</span>(nums[<span class="number">0.</span>.index<span class="number">-1</span>]);</span><br><span class="line">    root.right = <span class="built_in">constructMaximumBinaryTree</span>(nums[index+<span class="number">1.</span>.nums.length<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不同的二元搜尋樹，求樹的數量、列出每棵樹</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 主函数 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算闭区间 [1, n] 组成的 BST 个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">count</span>(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算闭区间 [lo, hi] 组成的 BST 个数 */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (lo &gt; hi) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lo; i &lt;= hi; i++) &#123;</span><br><span class="line">        <span class="comment">// i 的值作为根节点 root</span></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">count</span>(lo, i - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">count</span>(i + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="comment">// 左右子树的组合数乘积是 BST 的总数</span></span><br><span class="line">        res += left * right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备忘录</span></span><br><span class="line"><span class="type">int</span>[][] memo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 备忘录的值初始化为 0</span></span><br><span class="line">    memo = <span class="keyword">new</span> <span class="type">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">count</span>(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lo &gt; hi) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 查备忘录</span></span><br><span class="line">    <span class="keyword">if</span> (memo[lo][hi] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[lo][hi];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> mid = lo; mid &lt;= hi; mid++) &#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">count</span>(lo, mid - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">count</span>(mid + <span class="number">1</span>, hi);</span><br><span class="line">        res += left * right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果存入备忘录</span></span><br><span class="line">    memo[lo][hi] = res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 构造闭区间 [1, n] 组成的 BST </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">build</span>(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构造闭区间 [lo, hi] 组成的 BST */</span></span><br><span class="line"><span class="function">List&lt;TreeNode&gt; <span class="title">build</span><span class="params">(<span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">    List&lt;TreeNode&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (lo &gt; hi) &#123;</span><br><span class="line">        res.<span class="built_in">add</span>(null);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、穷举 root 节点的所有可能。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lo; i &lt;= hi; i++) &#123;</span><br><span class="line">        <span class="comment">// 2、递归构造出左右子树的所有合法 BST。</span></span><br><span class="line">        List&lt;TreeNode&gt; leftTree = <span class="built_in">build</span>(lo, i - <span class="number">1</span>);</span><br><span class="line">        List&lt;TreeNode&gt; rightTree = <span class="built_in">build</span>(i + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="comment">// 3、给 root 节点穷举所有左右子树的组合。</span></span><br><span class="line">        <span class="keyword">for</span> (TreeNode left : leftTree) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode right : rightTree) &#123;</span><br><span class="line">                <span class="comment">// i 作为根节点 root 的值</span></span><br><span class="line">                TreeNode root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">                root.left = left;</span><br><span class="line">                root.right = right;</span><br><span class="line">                res.<span class="built_in">add</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Graph 圖，用adjacent linked list 、adjacent matrix 存儲</p>
<p><strong>遍歷圖的框架</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (TreeNode child : root.children)</span><br><span class="line">        <span class="built_in">traverse</span>(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有環的圖</span></span><br><span class="line">Graph graph;</span><br><span class="line">boolean[] visited;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode neighbor : graph.<span class="built_in">neighbors</span>(s))</span><br><span class="line">        <span class="built_in">traverse</span>(neighbor);</span><br><span class="line">    <span class="comment">// 离开节点 s</span></span><br><span class="line">    visited[s] = <span class="literal">false</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>圖的所有路徑</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录所有路径</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="built_in">allPathsSourceTarget</span>(<span class="type">int</span>[][] graph) &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="built_in">traverse</span>(graph, <span class="number">0</span>, path);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图的遍历框架 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span> s, LinkedList&lt;Integer&gt; path)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加节点 s 到路径</span></span><br><span class="line">    path.<span class="built_in">addLast</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = graph.length;</span><br><span class="line">    <span class="keyword">if</span> (s == n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 到达终点</span></span><br><span class="line">        res.<span class="built_in">add</span>(<span class="keyword">new</span> LinkedList&lt;&gt;(path));</span><br><span class="line">        path.<span class="built_in">removeLast</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归每个相邻节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : graph[s]) &#123;</span><br><span class="line">        <span class="built_in">traverse</span>(graph, v, path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从路径移出节点 s</span></span><br><span class="line">    path.<span class="built_in">removeLast</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二元搜尋數子樹的最大鍵值總和</p>
<ol>
<li>確認子樹合法性(BST左小右大)</li>
<li>確認把自己加入是否還合法，比較左子樹最大值和柚子樹最小值</li>
<li>左右子樹之和</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
  </entry>
  <entry>
    <title>Sliding Window</title>
    <url>/blog/2023/02/12/DataStruct/%E7%A7%BB%E5%8B%95%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<p>two pointer 雙指針 O(N)</p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li>3 Longest Substring Without Repeating Characters (Medium)</li>
<li>76 Minimum Window Substring (Hard)</li>
<li>438 Find All Anagrams in a String (Medium)</li>
<li>567 Permutation in String (Medium)</li>
<li>239 Sliding Window Maximum (Hard)</li>
<li>424 Longest Repeating Character Replacement (Medium)</li>
</ul>
<p>補充</p>
<ul>
<li>187 Repeated DNA Sequences</li>
<li>209 Minimum Size Subarray Sum</li>
<li>*713 Subarray Product Less Than K</li>
<li>632 Smallest Range Covering Elements from K Lists (Hard)</li>
<li>1004 Max Consecutive Ones III (Medium)</li>
<li>*30 Substring with Concatenation of All Words (Hard)</li>
<li>209 Minimum Size Subarray Sum</li>
<li>*632. Smallest Range Covering Elements from K Lists</li>
<li>395 Longest Substring with At Least K Repeating Characters</li>
<li>1695 Maximum Erasure Value (Medium)</li>
</ul>
<h2 id="移動窗口框架"><a href="#移動窗口框架" class="headerlink" title="移動窗口框架"></a>移動窗口框架</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;`</span><br><span class="line">    <span class="comment">// 增大窗口</span></span><br><span class="line">    window.<span class="built_in">add</span>(s[right]);</span><br><span class="line">    right++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (window needs shrink) &#123;</span><br><span class="line">        <span class="comment">// 縮小窗口</span></span><br><span class="line">        window.<span class="built_in">remove</span>(s[left]);</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>組合、排列、子集</title>
    <url>/blog/2023/02/12/DataStruct/%E7%B5%84%E5%90%88%E3%80%81%E6%8E%92%E5%88%97%E3%80%81%E5%AD%90%E9%9B%86/</url>
    <content><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul>
<li><p>46 Permutations</p>
</li>
<li><p>47 Permutations II</p>
</li>
<li><p>31 Next Permutation</p>
</li>
<li><p>784 Letter Case Permutation</p>
</li>
<li><p>78 Subsets</p>
</li>
<li><p>90 Subsets II</p>
</li>
<li><p>2597 The Number of Beautiful Subsets</p>
</li>
<li><p>77 Combinations</p>
</li>
<li><p>39 Combination Sum</p>
</li>
<li><p>40 Combination Sum II</p>
</li>
<li><p>216 Combination Sum III</p>
</li>
</ul>
<h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><p>組合與排列最大差異，排列是有順序，組合沒有順序，所以排列數通常較大</p>
<ul>
<li><p>排列，每個元素都必須包含，所以每次都需要重頭拜訪，需要額外vector<bool> used來紀錄該元素是否拜訪過。當然也可迴圈遍歷find()檢查其值是否已包含，但較費時且也較不泛化。</p>
</li>
<li><p>組合沒有順序性可言，不必重頭拜訪，所以可以事先用排序，在借助vector<bool> used 或 if(i &gt; s &amp;&amp; nums[i] &#x3D;&#x3D; nums[i-1]) continue; 條件語句。</p>
</li>
<li><p>子集，沒有順序性可言，不必重頭拜訪。紀錄拜訪樹的每個路徑，不拜訪錯過的</p>
</li>
<li><p>陣列有重複元素，可以排序，搭配if(i &gt; s &amp;&amp; nums[i] &#x3D;&#x3D; nums[i-1]) continue;，去掉重複元素，或是vector<bool> used，去掉重複元素</p>
</li>
<li><p>78 Subsets</p>
</li>
<li><p>90 Subsets II</p>
</li>
<li><p>784 Letter Case Permutation</p>
</li>
</ul>
<p>DFS </p>
<h3 id="77-Combinations"><a href="#77-Combinations" class="headerlink" title="77 Combinations"></a>77 Combinations</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt; &amp;path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;ret)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == k)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">traverse</span>(i+<span class="number">1</span>, r, k, path, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">1</span>, n, k, path, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39 Combination Sum"></a>39 Combination Sum</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> s, vector&lt;<span class="type">int</span>&gt; &amp;candidates, <span class="type">int</span> target, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp;ret, vector&lt;<span class="type">int</span>&gt; &amp;path)</span></span>&#123;</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span>(target &lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;candidates.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            </span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(i, candidates, target - candidates[i], ret, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">0</span>, candidates, target, ret, path);</span><br><span class="line">        <span class="keyword">return</span> ret;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40 Combination Sum II"></a>40 Combination Sum II</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> l, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt;&amp;path)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r ;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == l || candidates[i] != candidates[i - <span class="number">1</span>])&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(candidates, target-candidates[i], i+<span class="number">1</span>,r, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">traverse</span>(candidates, target, <span class="number">0</span>,candidates.<span class="built_in">size</span>()<span class="number">-1</span> , path);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="216-Combination-Sum-III"><a href="#216-Combination-Sum-III" class="headerlink" title="216 Combination Sum III"></a>216 Combination Sum III</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> k, <span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt; &amp;path )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == k) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start ;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">        <span class="comment">// if(cur + i &gt; n) break; </span></span><br><span class="line">        path.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="built_in">traverse</span>(i+<span class="number">1</span>, k, target-i, path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">traverse</span>(<span class="number">1</span>, k, n, path);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h2 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a>Permutations</h2><h3 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46 Permutations"></a>46 Permutations</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; path)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();  ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>(), nums[i])!=path.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">traverse</span>(nums, path);</span><br><span class="line">    <span class="keyword">return</span> ret;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47 Permutations II"></a>47 Permutations II</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, vector&lt;<span class="type">int</span>&gt; &amp;path, vector&lt;<span class="type">bool</span>&gt; &amp; visited)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="comment">// ret.push_back(path);</span></span><br><span class="line">        ret.<span class="built_in">insert</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, visited);</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="built_in">traverse</span>(nums, path, visited);</span><br><span class="line">    <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31 Next Permutation"></a>31 Next Permutation</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k = n<span class="number">-2</span>;k&gt;<span class="number">-1</span> ;k--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[k]&lt;nums[k+<span class="number">1</span>]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> j ;</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>;j&gt;k;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt; nums[k]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">swap</span>(nums[j], nums[k]);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k+<span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="784-Letter-Case-Permutation"><a href="#784-Letter-Case-Permutation" class="headerlink" title="784 Letter Case Permutation"></a>784 Letter Case Permutation</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(string &amp;s, string &amp;path, <span class="type">int</span> l)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if(l&gt;= s.size()) reutrn;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="comment">// 因為只會有大小寫與數字</span></span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                path.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">                <span class="built_in">traverse</span>(s, path, i+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if(( s[i]&gt;=&#x27;a&#x27; &amp;&amp; s[i]&lt;=&#x27;z&#x27;) || (s[i]&gt;=&#x27;A&#x27; &amp;&amp; s[i]&lt;=&#x27;Z&#x27;))&#123;</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 選擇小寫</span></span><br><span class="line">                path.<span class="built_in">push_back</span>(<span class="built_in">tolower</span>(s[i]));</span><br><span class="line">                <span class="built_in">traverse</span>(s, path, i+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 選擇大寫</span></span><br><span class="line">                path.<span class="built_in">push_back</span>(<span class="built_in">toupper</span>(s[i]));</span><br><span class="line">                <span class="built_in">traverse</span>(s, path, i+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">traverse</span>(s, path, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h2><h3 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78 Subsets"></a>78 Subsets</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, vector&lt;<span class="type">int</span>&gt;&amp;path, <span class="type">int</span> l)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">    <span class="comment">// if(l&gt;=nums.size()) return;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, i+<span class="number">1</span>);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsets</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">traverse</span>(nums, path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90 Subsets II"></a>90 Subsets II</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, vector&lt;<span class="type">int</span>&gt;&amp;path, <span class="type">int</span> l)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;l || nums[i<span class="number">-1</span>]!=nums[i])&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">traverse</span>(nums, path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h2><h3 id="77-Combinations-1"><a href="#77-Combinations-1" class="headerlink" title="77. Combinations"></a>77. Combinations</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt; &amp; path, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() ==k)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=n;++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// [2,4] OK , [4,2] not OK -&gt; 只允許遞增，避免重複</span></span><br><span class="line">            <span class="built_in">traverse</span>(n,k,path, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(n,k,path, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="39-Combination-Sum-1"><a href="#39-Combination-Sum-1" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; path, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;candidates.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="comment">// option</span></span><br><span class="line">            <span class="keyword">if</span>(target &lt; candidates[i]) <span class="keyword">return</span>;</span><br><span class="line">            </span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="comment">// 因為可重複拿取同一元素</span></span><br><span class="line">            <span class="built_in">traverse</span>(candidates, target-candidates[i], path, i);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(candidates, target, path, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="40-Combination-Sum-II-1"><a href="#40-Combination-Sum-II-1" class="headerlink" title="40. Combination Sum II"></a>40. Combination Sum II</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt; &amp; path, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span> ) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;ret.<span class="built_in">push_back</span>(path); <span class="keyword">return</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=j;i&lt;candidates.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;j &amp;&amp; candidates[i<span class="number">-1</span>] == candidates[i]) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(candidates, target-candidates[i], path, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(candidates, target, path, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="216-Combination-Sum-III-1"><a href="#216-Combination-Sum-III-1" class="headerlink" title="216. Combination Sum III"></a>216. Combination Sum III</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> j, vector&lt;<span class="type">int</span>&gt;&amp; path)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(k == path.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = j;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">traverse</span>(k, n-i, i+<span class="number">1</span>, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(k, n, <span class="number">1</span>, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2>]]></content>
      <categories>
        <category>CS</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>資料結構與設計資料結構</title>
    <url>/blog/2023/02/12/DataStruct/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E8%A8%AD%E8%A8%88%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<h2 id="contain"><a href="#contain" class="headerlink" title="contain"></a><a href="https://en.cppreference.com/w/cpp/container">contain</a></h2><ul>
<li>Linked list</li>
</ul>
<table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1) begin</td>
<td>O(n)</td>
</tr>
<tr>
<td>delete</td>
<td>O(1) begin</td>
<td>O(n)</td>
</tr>
</tbody></table>
<p>如果是doubly linked list ，end的插入、刪除也是O(1)</p>
<h3 id="vector-陣列"><a href="#vector-陣列" class="headerlink" title="vector 陣列"></a><a href="https://zh.wikipedia.org/wiki/Vector_(STL)">vector 陣列</a></h3><ul>
<li>存取方法 back front vec.at(i)&#x2F;vec[i] data</li>
<li>修改器 push_back pop_back insert clear erase emplace_back emplace swap</li>
<li>容量 size empty resize reserve capacity shrink_to_fit</li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
</ul>
<h3 id="list-雙向連結串列"><a href="#list-雙向連結串列" class="headerlink" title="list 雙向連結串列"></a><a href="https://zh.wikipedia.org/wiki/List_(STL)">list</a> 雙向連結串列</h3><ul>
<li>存取方法 : back front </li>
<li>修改器 : push_front&#x2F;emplace_front pop_front push_back&#x2F;emplace_back pop_back insert&#x2F;emplace erase clear swap</li>
<li>容量 size empty resize </li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
<li>其他操作 merge sort reverse remove&#x2F;remove_if splice unique</li>
</ul>
<h3 id="forward-list-才是-singly-linked-list"><a href="#forward-list-才是-singly-linked-list" class="headerlink" title="forward_list 才是 singly-linked list"></a>forward_list 才是 singly-linked list</h3><ul>
<li>存取方法 : front </li>
<li>修改器 : push_front&#x2F;emplace_front pop_front emplace_after insert_after erase_after swap clear</li>
<li>容量 resize empty </li>
<li>疊代 begin end rbegin rend </li>
<li>其他操作 merge sort reverse remove&#x2F;remove_if splice_after unique</li>
</ul>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><ul>
<li>存取方法 : back front arr.at(i)&#x2F;arr[i] data</li>
<li>容量 size empty </li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
<li>其他操作 fill swap</li>
</ul>
<h3 id="string-我不在container-library"><a href="#string-我不在container-library" class="headerlink" title="string 我不在container library"></a>string 我不在container library</h3><p>存取方法 str.at(i)&#x2F;str[i] front back data c_str substr<br>容量 size empty resize reserve length capacity<br>修改器 push_back pop_back insert clear erase append copy replace swap +<br>find compare<br>疊代 begin end rbegin rend cbegin cend crbegin crend</p>
<h3 id="Queue-可以array-、-linked-list實現"><a href="#Queue-可以array-、-linked-list實現" class="headerlink" title="Queue  可以array 、 linked list實現"></a>Queue  可以array 、 linked list實現</h3><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<ul>
<li>常用方法 push pop front back size empty swap emplace</li>
<li>back() front() push_back() pop_front()<h3 id="priority-queue-用vector-實作-但資料結構是-max-heap"><a href="#priority-queue-用vector-實作-但資料結構是-max-heap" class="headerlink" title="priority_queue 用vector 實作 但資料結構是 max-heap"></a>priority_queue 用vector 實作 但資料結構是 max-heap</h3></li>
<li>常用方法 push pop top size empty swap emplace</li>
<li>front() push_back() pop_back()</li>
</ul>
<p>min heap</p>
<table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(logn)</td>
</tr>
<tr>
<td>find-min</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete-min</td>
<td>O(logn)</td>
<td>O(logn)</td>
</tr>
</tbody></table>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul>
<li>存取方法 deq.at(i)&#x2F;deq[i] front back</li>
<li>容量 size empty resize max_size shrink_to_fit</li>
<li>修改器 push_back&#x2F;emplace_back pop_back push_front&#x2F;emplace_front pop_front insert&#x2F;emplace clear erase swap </li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
</ul>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(k)</td>
<td>O(k)</td>
</tr>
<tr>
<td>search</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<ul>
<li>常用方法 push pop top empty size swap emplace</li>
</ul>
<h3 id="set-紅黑樹"><a href="#set-紅黑樹" class="headerlink" title="set   紅黑樹"></a>set   紅黑樹</h3><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(logN)</td>
<td>O(logN)</td>
</tr>
<tr>
<td>insert</td>
<td>O(logN)</td>
<td>O(logN)</td>
</tr>
<tr>
<td>delete</td>
<td>O(logN)</td>
<td>O(logN)</td>
</tr>
</tbody></table>
<ul>
<li>容量 size empty  max_size</li>
<li>修改器  insert clear erase swap  emplace emplace_hint merge extract </li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
<li>查詢 count find equal_range lower_bound upper_bound contain</li>
</ul>
<h3 id="unordered-set-hash-結構"><a href="#unordered-set-hash-結構" class="headerlink" title="unordered_set hash 結構"></a>unordered_set hash 結構</h3><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(1)</td>
<td>O(1) 分攤後</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(1) 分攤後</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
<td>O(1)  分攤後</td>
</tr>
</tbody></table>
<ul>
<li><p>容量 size empty  max_size</p>
</li>
<li><p>修改器 insert clear erase swap emplace emplace_hint merge extract </p>
</li>
<li><p>疊代 begin end cbegin cend </p>
</li>
<li><p>查詢 count find equal_range contain</p>
</li>
<li><p>hash方法 load_factor max_load_factor rehash reserve</p>
</li>
<li><p>bucket 接口 begin&#x2F;cbegin end&#x2F;cend bucket_count max_bucket_count bucket_size bucket </p>
<h3 id="map-紅黑樹"><a href="#map-紅黑樹" class="headerlink" title="map  紅黑樹"></a>map  紅黑樹</h3></li>
</ul>
<table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(logN)</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(logN)</td>
<td>O(n)</td>
</tr>
<tr>
<td>delete</td>
<td>O(logN)</td>
<td>O(n)</td>
</tr>
</tbody></table>
<ul>
<li>存取方法 deq.at(i)&#x2F;deq[i] </li>
<li>容量 size empty </li>
<li>修改器  insert clear erase swap  emplace emplace_hint merge extract  insert_or_assign try_emplace</li>
<li>疊代 begin end rbegin rend cbegin cend crbegin crend</li>
<li>查詢 count find equal_range lower_bound upper_bound contain</li>
</ul>
<h3 id="unordered-map-hash-結構"><a href="#unordered-map-hash-結構" class="headerlink" title="unordered_map hash 結構"></a>unordered_map hash 結構</h3><table>
<thead>
<tr>
<th>algorithm</th>
<th>Average</th>
<th>Worst case</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>search</td>
<td>O(1)</td>
<td>O(1) 分攤後</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
<td>O(1) 分攤後</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
<td>O(1)  分攤後</td>
</tr>
</tbody></table>
<ul>
<li><p>存取方法 deq.at(i)&#x2F;deq[i] </p>
</li>
<li><p>容量 size empty max_size</p>
</li>
<li><p>修改器  insert clear erase swap  emplace emplace_hint merge extract  insert_or_assign try_emplace</p>
</li>
<li><p>疊代 begin end cbegin cend </p>
</li>
<li><p>查詢 count find equal_range contain</p>
</li>
<li><p>hash方法 load_factor max_load_factor rehash reserve</p>
</li>
<li><p>bucket 接口 begin&#x2F;cbegin end&#x2F;cend bucket_count max_bucket_count bucket_size bucket</p>
</li>
</ul>
<h3 id="unordered-map-vs-map-and-unordered-set-vs-set"><a href="#unordered-map-vs-map-and-unordered-set-vs-set" class="headerlink" title="unordered_map vs. map and unordered_set vs set"></a>unordered_map vs. map and unordered_set vs set</h3><p>unordered ，是無序的，<br>map set 資料訪問順序是按照插入順序而定。<br>例如 map 內部結構紅黑樹來實現，保證查詢、插入、刪除都是O（logN），最壞和平均都是<br>unordered_set  unordered_map 因為是hash template to comput hash ，所以不能拿pair tuple vector 來當key，但是map set 可以拿pair tuple vector 來當key，因為 map set 是通過操作符 <code>&lt;</code> 比較大小，而pair是可以比較大小的</p>
<h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><p><img src="https://i.imgur.com/WwldmCl.png"></p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><table>
<thead>
<tr>
<th>case</th>
<th>Bubble sort</th>
<th>insertion sort</th>
<th>selection sort</th>
<th>merge sort</th>
<th>quick sort</th>
<th>Radix Sort</th>
</tr>
</thead>
<tbody><tr>
<td>best case</td>
<td>$N$</td>
<td>$N$</td>
<td>$N^2$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td>kN</td>
</tr>
<tr>
<td>average case</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$NlogN$</td>
<td>$NlogN$</td>
<td></td>
</tr>
<tr>
<td>worst case</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$N^2$</td>
<td>$NlogN$</td>
<td>$N^2$</td>
<td></td>
</tr>
<tr>
<td>Memory</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>Depends</td>
<td>logN</td>
<td></td>
</tr>
</tbody></table>
<h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><ul>
<li>linear search</li>
<li>binary search </li>
<li>exponential search</li>
<li>junpsearch</li>
<li>Interpolation search</li>
<li>FibonacciSearch</li>
</ul>
<h2 id="time-compleity"><a href="#time-compleity" class="headerlink" title="time compleity"></a>time compleity</h2><ul>
<li>陣列sum : O(n)</li>
<li>矩陣相加: O(n^2) </li>
<li>矩陣相乘: O(n^3)</li>
<li>階層運算：O(n!)</li>
<li>指數時間：O(2^n)</li>
<li>big O: upper bound</li>
<li>big omega: lower bound</li>
<li>big theta: tight bound<br>$1&lt;logn&lt;n&lt;nlogn&lt;n^2&lt;n^3&lt;2^n&lt;n!$</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> f(n-<span class="number">1</span>) + f(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(2^N)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(N-<span class="number">1</span>) + (N-<span class="number">2</span>) + (N-<span class="number">3</span>) + ... + <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="comment">// O(N^2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==nullptr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> sum(node.left) + node.val + sum(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(N) = O(2^(logN))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n* factorial(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>) +fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(2^N)</span></span><br><span class="line"><span class="comment">// but called n times is </span></span><br><span class="line"><span class="comment">// O(2^(N+1)) = O(2^N)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n , <span class="type">int</span> []memo)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(memo[n]&gt;<span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    </span><br><span class="line">    memo[n] = fib(n-<span class="number">1</span>, memo) + fib(n-<span class="number">2</span>,memo);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(n)</span></span><br></pre></td></tr></table></figure>


<h2 id="must-have-knowledge"><a href="#must-have-knowledge" class="headerlink" title="must-have knowledge"></a>must-have knowledge</h2><table>
<thead>
<tr>
<th>Data Structures</th>
<th>Algorithms</th>
<th>Concepts</th>
</tr>
</thead>
<tbody><tr>
<td>Linked Lists</td>
<td>Breadth-First Search</td>
<td>Bit Manipulation</td>
</tr>
<tr>
<td>Tree,Tries &amp; Graphs</td>
<td>Depth-First Search</td>
<td>Memory(Stack &amp; Heap)</td>
</tr>
<tr>
<td>Stack &amp; Queues</td>
<td>Binary Search</td>
<td>Recursion</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge Sort</td>
<td>Dynamic Programming</td>
</tr>
<tr>
<td>Vectors&#x2F;ArrayLists</td>
<td>Quick Sort</td>
<td>Big O Time &amp; Space</td>
</tr>
<tr>
<td>Hash tables</td>
<td>Prefix Sum</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Union Find </li>
<li>monotonic stack&#x2F;queue</li>
<li>Trie</li>
<li>Rolling Hash</li>
<li>skip list</li>
<li>Ordered Set</li>
<li>Graph</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Trie</tag>
        <tag>Stack</tag>
        <tag>Queue</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>NumberOfDiscIntersections</title>
    <url>/blog/2023/02/12/codility/*Fish/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/fish/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  4   3   2   1   5   </span></span><br><span class="line">    <span class="comment">//  &lt;-  -&gt;  &lt;-  &lt;-  &lt;-</span></span><br><span class="line">    <span class="comment">// monotonic stack</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">    <span class="comment">// 儲存往下游的魚</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>(),  eat = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(B[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>() &lt; A[i])&#123;</span><br><span class="line">                <span class="comment">// 往下游的魚被往上游的魚吃掉了</span></span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                eat++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>() &gt; A[i])&#123;</span><br><span class="line">                <span class="comment">// 往上游的魚被往下游的魚吃掉了</span></span><br><span class="line">                eat++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sta.<span class="built_in">push</span>(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - eat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Stacks and Queues</category>
      </categories>
  </entry>
  <entry>
    <title>MaxDoubleSliceSum</title>
    <url>/blog/2023/02/12/codility/*MaxDoubleSliceSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/9-maximum_slice_problem/max_double_slice_sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>Bi-direct Kadane’s Algorithm</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//      3   2   6   -1  4   5   -1  2</span></span><br><span class="line">    <span class="comment">//l     0   2   8   7   11  16  15  0</span></span><br><span class="line">    <span class="comment">//r     0   15  14  8   9   5   0   0</span></span><br><span class="line">    <span class="comment">//          14  10  17  12  11  16  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 14 =&gt; (X,Y,Z) = (0,1,6)</span></span><br><span class="line">    <span class="comment">// 10 =&gt; (X,Y,Z) = (0,2,6)</span></span><br><span class="line">    <span class="comment">// 17 =&gt; (X,Y,Z) = (0,3,6)</span></span><br><span class="line">    <span class="comment">// 12 =&gt; (X,Y,Z) = (0,4,6)</span></span><br><span class="line">    <span class="comment">// 11 =&gt; (X,Y,Z) = (0,5,6)</span></span><br><span class="line">    <span class="comment">// 16 =&gt; (X,Y,Z) = (0,6,7)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Bi-direct</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n,<span class="number">0</span>)</span>, <span class="title">right</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i) left[i] = <span class="built_in">max</span>(left[i<span class="number">-1</span>] + A[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">0</span> ;--i) right[i] = <span class="built_in">max</span>(right[i+<span class="number">1</span>]+A[i], <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i) ret= <span class="built_in">max</span>(ret, left[i<span class="number">-1</span>] + right[i+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Mamimum Slice problem</category>
      </categories>
  </entry>
  <entry>
    <title>StoneWall</title>
    <url>/blog/2023/02/12/codility/*StoneWall/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/stone_wall/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;H)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// monotonic stack</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">    <span class="type">int</span> n = H.<span class="built_in">size</span>(), block = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//  8   8   5   7   9   8   7   4   8</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>() &gt; H[i] )&#123;</span><br><span class="line">            </span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sta.<span class="built_in">empty</span>() || sta.<span class="built_in">top</span>() &lt; H[i] ) &#123;</span><br><span class="line">            sta.<span class="built_in">push</span>(H[i]);</span><br><span class="line">            block++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Stacks and Queues</category>
      </categories>
  </entry>
  <entry>
    <title>BinaryGap</title>
    <url>/blog/2023/02/12/codility/BinaryGap/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/1-iterations/binary_gap/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> i= <span class="number">0</span>, j=<span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(N&gt;<span class="number">0</span> &amp;&amp; (N&amp;<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        N&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    j=i;</span><br><span class="line">    <span class="keyword">while</span>(N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(N&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, i-j);</span><br><span class="line">            i=j ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">        N&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>iteration</category>
      </categories>
  </entry>
  <entry>
    <title>NumberOfDiscIntersections</title>
    <url>/blog/2023/02/12/codility/Brackets/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/brackets/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>經典stack 教材</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(string &amp;S)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:S)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span>) sta.<span class="built_in">push</span>(c);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span> &amp;&amp; c==<span class="string">&#x27;)&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span> &amp;&amp; c==<span class="string">&#x27;]&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c==<span class="string">&#x27;&#125;&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Stacks and Queues</category>
      </categories>
  </entry>
  <entry>
    <title>ChocolatesByNumbers</title>
    <url>/blog/2023/02/12/codility/ChocolatesByNumbers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/12-euclidean_algorithm/chocolates_by_numbers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li><code>O(N+M)</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s.<span class="built_in">find</span>(n)==s.<span class="built_in">end</span>())&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(n);</span><br><span class="line">        n = (n+M)%N;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  m == <span class="number">0</span> ? n : <span class="built_in">gcd</span>(m, n % m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="comment">// lcm = 20, gcd = 2</span></span><br><span class="line">    <span class="keyword">return</span> N/<span class="built_in">gcd</span>(N,M);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>codility</category>
        <category>Euclidean algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>CountDiv</title>
    <url>/blog/2023/02/12/codility/CountDiv/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/count_div/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="comment">// if(K==1) return B-A+1;</span></span><br><span class="line">    <span class="keyword">while</span>(A&lt;B &amp;&amp; A%K!=<span class="number">0</span>) A++;</span><br><span class="line">    <span class="keyword">while</span>(A&lt;B &amp;&amp; B%K!=<span class="number">0</span>) B--;</span><br><span class="line">    <span class="keyword">if</span>(A%K!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (B-A)/K+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Prefix Sum</category>
      </categories>
  </entry>
  <entry>
    <title>CountFactors</title>
    <url>/blog/2023/02/12/codility/CountFactors/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/10-prime_and_composite_numbers/count_factors/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> factors = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// i*i&lt;= N , will cause overflow</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">sqrt</span>(N); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i*i==N) factors++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(N%i==<span class="number">0</span>) factors+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(sqrt(n))</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Prime and composite numbers</category>
      </categories>
  </entry>
  <entry>
    <title>CyclicRotation</title>
    <url>/blog/2023/02/12/codility/CyclicRotation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/2-arrays/cyclic_rotation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">empty</span>()) <span class="keyword">return</span> A;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    K %=n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) ret[i] = A[(n-K+i)%n];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="option-2-reverse"><a href="#option-2-reverse" class="headerlink" title="option 2 - reverse"></a>option 2 - reverse</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">empty</span>()) <span class="keyword">return</span> A;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    K %=n;</span><br><span class="line">    <span class="built_in">reverse</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">begin</span>()+n-K);</span><br><span class="line">    <span class="built_in">reverse</span>(A.<span class="built_in">begin</span>()+n-K, A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">reverse</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Array</category>
      </categories>
  </entry>
  <entry>
    <title>Distinct</title>
    <url>/blog/2023/02/12/codility/Distinct/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/distinct/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-set"><a href="#option-1-set" class="headerlink" title="option 1 - set"></a>option 1 - set</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) s.<span class="built_in">insert</span>(a);</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2 -"></a>option 2 -</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>optino 1 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>Dominator</title>
    <url>/blog/2023/02/12/codility/Dominator/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/8-leader/dominator/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> cand = A[<span class="number">0</span>], count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cand == A[i]) count++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">if</span>(count ==<span class="number">0</span>)&#123;</span><br><span class="line">                cand = A[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// check more than half </span></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) count+=(a==cand?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(count&lt;=n/<span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// find the index of dominator</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] == cand) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Leader</category>
      </categories>
  </entry>
  <entry>
    <title>EquiLeader</title>
    <url>/blog/2023/02/12/codility/EquiLeader/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/8-leader/equi_leader/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>事先算好 dominator 與 其次數，再不斷地計算兩區間的dominator個數是否大於其區間大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dominator</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> nums[l];</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> cand = nums[l], count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l+<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cand == nums[i] ) count++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                count =<span class="number">1</span>;</span><br><span class="line">                cand = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check more than half</span></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == cand) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&lt;=(r-l+<span class="number">1</span>)/<span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> cand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="comment">// test case    answer</span></span><br><span class="line">    <span class="comment">// [4,3,4,4,4,2]    2</span></span><br><span class="line">    <span class="comment">// [0,0]    1</span></span><br><span class="line">    <span class="comment">// [4, 4, 2, 5, 3, 4, 4, 4]  3</span></span><br><span class="line">    <span class="comment">// [2, 1, 1, 3] 0</span></span><br><span class="line">    <span class="comment">// [2, 1, 1, 1, 3]  1</span></span><br><span class="line">    <span class="comment">// 事先算好 dominator 與 其次數，再不斷地計算兩區間的dominator個數是否大於其區間大小</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>(), count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cand = <span class="built_in">dominator</span>(A, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cand==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) count+=(cand ==a?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;count&lt;&lt;&quot; &quot;&lt;&lt;cand&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = count;</span><br><span class="line">    count = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;<span class="built_in">i</span>&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] == cand)&#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// two intervals [0,i], [i+1, n-1]</span></span><br><span class="line">        <span class="keyword">if</span>( l&gt;(i+<span class="number">1</span>)/<span class="number">2</span> &amp;&amp; r&gt; (n<span class="number">-1</span>-i<span class="number">-1</span>+<span class="number">1</span>)/<span class="number">2</span> )  &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;&quot;0-&quot;&lt;&lt;i&lt;&lt;&quot;, &quot;&lt;&lt;i+1&lt;&lt;&quot;-&quot;&lt;&lt;n-1&lt;&lt;&quot;\t&quot;;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Leader</category>
      </categories>
  </entry>
  <entry>
    <title>FrogJmp</title>
    <url>/blog/2023/02/12/codility/FrogJmp/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/frog_jmp/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> X, <span class="type">int</span> Y, <span class="type">int</span> D)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    Y -=X;</span><br><span class="line">    <span class="keyword">if</span>(Y%D!=<span class="number">0</span>) <span class="keyword">return</span> Y/D+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Y/D;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Time Complexity</category>
      </categories>
  </entry>
  <entry>
    <title>FrogRiverOne</title>
    <url>/blog/2023/02/12/codility/FrogRiverOne/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/frog_river_one/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> X, vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="comment">// 第幾秒落葉會不滿整個[1..X]地方</span></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(A[i]);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()==X) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Counting Elements</category>
      </categories>
  </entry>
  <entry>
    <title>GenomicRangeQuery</title>
    <url>/blog/2023/02/12/codility/GenomicRangeQuery/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/genomic_range_query/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(string &amp;S, vector&lt;<span class="type">int</span>&gt; &amp;P, vector&lt;<span class="type">int</span>&gt; &amp;Q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; dna = &#123; </span><br><span class="line">        &#123;<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;C&#x27;</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;G&#x27;</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;T&#x27;</span>,<span class="number">4</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//      C   A   G   C   C   T   A</span></span><br><span class="line">    <span class="comment">//A     1   1   6   6   6   6   6</span></span><br><span class="line">    <span class="comment">//C     0   3   3   3   4   +   +</span></span><br><span class="line">    <span class="comment">//G     2   2   2   +   +   +   +</span></span><br><span class="line">    <span class="comment">//T     5   5   5   5   5   5   +</span></span><br><span class="line">    <span class="type">int</span> n = S.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">A</span>(n, n+<span class="number">1</span>),<span class="built_in">C</span>(n,n+<span class="number">1</span>), <span class="built_in">G</span>(n,n+<span class="number">1</span>), <span class="built_in">T</span>(n,n+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> a = n<span class="number">-1</span>, c = n<span class="number">-1</span>, g= n<span class="number">-1</span>, t = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            A[i] = i;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) C[i] = C[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) G[i] = G[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) T[i] = T[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(S[i]==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">            C[i] = i;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) A[i] = A[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) G[i] = G[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) T[i] = T[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(S[i] == <span class="string">&#x27;G&#x27;</span>)&#123;</span><br><span class="line">            G[i] = i;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) A[i] = A[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) C[i] = C[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) T[i] = T[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(S[i] == <span class="string">&#x27;T&#x27;</span>)&#123;</span><br><span class="line">            T[i] = i;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) A[i] = A[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) C[i] = C[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) G[i] = G[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for(int a:A) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int a:C) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int a:G) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int a:T) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">    n = P.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> s = P[i], e = Q[i];</span><br><span class="line">        <span class="type">int</span> mn = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;s&lt;&lt;&quot; &quot;&lt;&lt;e&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(A[s] &gt;= s &amp;&amp; A[s]&lt;=e) mn = <span class="built_in">min</span>(mn, dna[<span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(C[s] &gt;= s &amp;&amp; C[s]&lt;=e) mn = <span class="built_in">min</span>(mn, dna[<span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(G[s] &gt;= s &amp;&amp; G[s]&lt;=e) mn = <span class="built_in">min</span>(mn, dna[<span class="string">&#x27;G&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(T[s] &gt;= s &amp;&amp; T[s]&lt;=e) mn = <span class="built_in">min</span>(mn, dna[<span class="string">&#x27;T&#x27;</span>]);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(mn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n+m)</code> m is the number of query</li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Prefix Sum</category>
      </categories>
  </entry>
  <entry>
    <title>MaxCounters</title>
    <url>/blog/2023/02/12/codility/MaxCounters/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/max_counters/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(<span class="type">int</span> N, vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> counter = <span class="number">0</span>, before = <span class="number">0</span>, n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a!=N+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 延遲assign max counter</span></span><br><span class="line">            <span class="keyword">if</span>(before!=<span class="number">0</span> &amp;&amp; ret[a<span class="number">-1</span>]!=before) ret[a<span class="number">-1</span>] = <span class="built_in">max</span>(before, ret[a<span class="number">-1</span>]);</span><br><span class="line">            ret[a<span class="number">-1</span>]++;</span><br><span class="line">            <span class="comment">// update max counter</span></span><br><span class="line">            counter = <span class="built_in">max</span>(counter, ret[a<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            before = counter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int a:ret) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int a:ret) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp;a:ret)&#123;</span><br><span class="line">        a = <span class="built_in">max</span>(a, before);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n+m)</code>, m is the number of array A</li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Counting Elements</category>
      </categories>
  </entry>
  <entry>
    <title>MaxProductOfThree</title>
    <url>/blog/2023/02/12/codility/MaxProductOfThree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/max_product_of_three/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>三值相乘最大值，只會發生在最小兩個（負數）乘以最大，或是前三大（正數)相乘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(A[<span class="number">0</span>]*A[<span class="number">1</span>]*A[n<span class="number">-1</span>],A[n<span class="number">-3</span>]*A[n<span class="number">-2</span>]*A[n<span class="number">-1</span>] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>MaxProfit</title>
    <url>/blog/2023/02/12/codility/MaxProfit/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/9-maximum_slice_problem/max_profit/">problem</a></h2><p>一次的股票交易最大可以獲得多少獲益</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mn = A[<span class="number">0</span>], profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A)&#123;</span><br><span class="line">        mn = <span class="built_in">min</span>(mn, a);</span><br><span class="line">        profit = <span class="built_in">max</span>(profit, a-mn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Mamimum Slice problem</category>
      </categories>
  </entry>
  <entry>
    <title>MaxSliceSum</title>
    <url>/blog/2023/02/12/codility/MaxSliceSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/9-maximum_slice_problem/max_slice_sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>Kadane’s Algorithm</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> local = <span class="number">0</span>, global = <span class="number">-1000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A)&#123;</span><br><span class="line">        local = <span class="built_in">max</span>(a, a+local);</span><br><span class="line">        global = <span class="built_in">max</span>(global, local);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> global;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Mamimum Slice problem</category>
      </categories>
  </entry>
  <entry>
    <title>MinAvgTwoSlice</title>
    <url>/blog/2023/02/12/codility/MinAvgTwoSlice/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/min_avg_two_slice/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-prefix-sum"><a href="#option-1-prefix-sum" class="headerlink" title="option 1 - prefix sum"></a>option 1 - prefix sum</h4><p>最小區間只會存在於兩個是數字或是三個數字，因為如果有超過3個數字，代表還可以在拆分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// prefix sum</span></span><br><span class="line">    <span class="comment">//  4   2   2   5   1   5   8</span></span><br><span class="line">    <span class="comment">//  4   6   8   13  14  19  27</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">    prefix[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) prefix[i] = prefix[i<span class="number">-1</span>] + A[i];</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> mn = prefix[<span class="number">1</span>]/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">double</span> slice = (prefix[i]-prefix[i<span class="number">-2</span>])/ <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>( slice &lt; mn) &#123;</span><br><span class="line">            mn = slice;</span><br><span class="line">            idx = i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            slice = (prefix[i]-prefix[i<span class="number">-3</span>])/<span class="number">3.0</span>;</span><br><span class="line">            <span class="keyword">if</span>( slice&lt; mn)&#123;</span><br><span class="line">                mn = slice;</span><br><span class="line">                idx = i<span class="number">-2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="option-2-最小區間只會存在於兩個是數字或是三個數字，因為如果有超過3個數字，代表還可以在拆分"><a href="#option-2-最小區間只會存在於兩個是數字或是三個數字，因為如果有超過3個數字，代表還可以在拆分" class="headerlink" title="option 2 - 最小區間只會存在於兩個是數字或是三個數字，因為如果有超過3個數字，代表還可以在拆分"></a>option 2 - 最小區間只會存在於兩個是數字或是三個數字，因為如果有超過3個數字，代表還可以在拆分</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">double</span> mn = <span class="number">100000</span>;</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="type">double</span> slice = (A[i]+A[i+<span class="number">1</span>])/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(slice &lt; mn)&#123;</span><br><span class="line">            mn =slice;</span><br><span class="line">            idx = i;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">2</span>&lt;n)&#123;</span><br><span class="line">            slice = (A[i] + A[i+<span class="number">1</span>] + A[i+<span class="number">2</span>])/<span class="number">3.0</span>;</span><br><span class="line">            <span class="keyword">if</span>(slice &lt; mn)&#123;</span><br><span class="line">                mn =slice;</span><br><span class="line">                idx = i;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Prefix Sum</category>
      </categories>
  </entry>
  <entry>
    <title>MinPerimeterRectangle</title>
    <url>/blog/2023/02/12/codility/MinPerimeterRectangle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/10-prime_and_composite_numbers/min_perimeter_rectangle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> perimeter = (N+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i*i&lt;=N ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(N%i ==<span class="number">0</span>)&#123;</span><br><span class="line">            perimeter = <span class="built_in">min</span>(perimeter, i+N/i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*perimeter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(sqrt(n))</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Prime and composite numbers</category>
      </categories>
  </entry>
  <entry>
    <title>MissingInteger</title>
    <url>/blog/2023/02/12/codility/MissingInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/missing_integer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>(), c =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] == c) c++;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n<span class="number">-1</span> &amp;&amp; A[i] == A[i+<span class="number">1</span>] ) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><pre><code>- time complexity `O(nlogn)`
- space complexity `O(1)`
</code></pre>
]]></content>
      <categories>
        <category>codility</category>
        <category>Counting Elements</category>
      </categories>
  </entry>
  <entry>
    <title>NumberOfDiscIntersections</title>
    <url>/blog/2023/02/12/codility/Nesting/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/nesting/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>經典stack 教材</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(string &amp;S)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:S)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span>) sta.<span class="built_in">push</span>(c);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span> &amp;&amp; c==<span class="string">&#x27;)&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span> &amp;&amp; c==<span class="string">&#x27;]&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c==<span class="string">&#x27;&#125;&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Stacks and Queues</category>
      </categories>
  </entry>
  <entry>
    <title>OddOccurrencesInArray</title>
    <url>/blog/2023/02/12/codility/OddOccurrencesInArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/2-arrays/odd_occurrences_in_array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) ret^=a;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Array</category>
      </categories>
  </entry>
  <entry>
    <title>PassingCars</title>
    <url>/blog/2023/02/12/codility/PassingCars/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/5-prefix_sums/passing_cars/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  0   1   0   1   1</span></span><br><span class="line">    <span class="comment">//  0   1   1   2   3</span></span><br><span class="line">    <span class="comment">// count the number of one</span></span><br><span class="line">    <span class="type">int</span> ones = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) ones+=(a==<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, n =A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            count+=ones;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">1000000000</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ones--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Prefix Sum</category>
      </categories>
  </entry>
  <entry>
    <title>PermCheck</title>
    <url>/blog/2023/02/12/codility/PermCheck/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/4-counting_elements/perm_check/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> pre = A[<span class="number">0</span>], n=A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(pre!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre+<span class="number">1</span>!=A[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        pre++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="option-2-hash-table"><a href="#option-2-hash-table" class="headerlink" title="option 2 - hash table"></a>option 2 - hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">st</span><span class="params">(A.begin(), A.end())</span></span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>, n=A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(ret&lt;=n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">find</span>(ret)==st.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="option-3-swap"><a href="#option-3-swap" class="headerlink" title="option 3 - swap"></a>option 3 - swap</h4><p>放到正確的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (A[i] &gt; <span class="number">0</span> &amp;&amp; A[i] &lt;= n &amp;&amp; A[A[i] - <span class="number">1</span>] != A[i]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(A[i], A[A[i] - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int a:A) cout&lt;&lt;a&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] != i + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Counting Elements</category>
      </categories>
  </entry>
  <entry>
    <title>PermMissingElem</title>
    <url>/blog/2023/02/12/codility/PermMissingElem/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-XOR"><a href="#option-1-XOR" class="headerlink" title="option 1 - XOR"></a>option 1 - XOR</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>(), ret = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) ret^= ((i+<span class="number">1</span>)^A[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>(), total = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) total+=(i+<span class="number">1</span>-A[i]);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Time Complexity</category>
      </categories>
  </entry>
  <entry>
    <title>TapeEquilibrium</title>
    <url>/blog/2023/02/12/codility/TapeEquilibrium/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/3-time_complexity/tape_equilibrium/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>, ret = <span class="number">100000</span>, n = A.<span class="built_in">size</span>(), sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) total +=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i) &#123;</span><br><span class="line">        sum+=A[i];</span><br><span class="line">        ret = <span class="built_in">min</span>(ret, <span class="built_in">abs</span>(total<span class="number">-2</span>*sum) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Time Complexity</category>
      </categories>
  </entry>
  <entry>
    <title>Triangle</title>
    <url>/blog/2023/02/12/codility/Triangle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/triangle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>注意避免 overflow</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(</span><br><span class="line">            A[i<span class="number">-1</span>] &gt; A[i+<span class="number">1</span>] - A[i]</span><br><span class="line">            <span class="comment">// A[i+1] + A[i-1] &gt; A[i] &amp;&amp; \</span></span><br><span class="line"><span class="comment">            // A[i] + A[i+1] &gt; A[i-1] &amp;&amp; \</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line">        ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>CountSemiprimes</title>
    <url>/blog/2023/02/12/codility/%5B66%25%5DCountSemiprimes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(<span class="type">int</span> N, vector&lt;<span class="type">int</span>&gt; &amp;P, vector&lt;<span class="type">int</span>&gt; &amp;Q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">1</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// create [1, N] ]vector using Sieve of Eratosthenes</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(N+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(N) ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i] == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;i*j &lt;=N ; ++j) dp[i*j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;N+<span class="number">1</span> ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i] == <span class="literal">false</span>) primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int d:primes) cout&lt;&lt;d&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; semiprime;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;primes.<span class="built_in">size</span>();++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i;j&lt;primes.<span class="built_in">size</span>() ; ++j)&#123;</span><br><span class="line">            <span class="comment">// if(primes[i&lt; * primes[j]=Ｎ);</span></span><br><span class="line">            <span class="keyword">if</span>(primes[i]*primes[j] &gt; N) <span class="keyword">break</span>;</span><br><span class="line">            semiprime.<span class="built_in">push_back</span>(primes[i]*primes[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(semiprime.<span class="built_in">begin</span>(), semiprime.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// for(int s:semiprime) cout&lt;&lt;s&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// create prefix sum</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(N+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//  4   6   9   10  14  15  21  22  25  26</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  </span></span><br><span class="line">    <span class="comment">//  0   0   0   0   1   1   2   2   2   3   4   4   4   4   5   6   6   6   6   6   6   7   8   8   8   9   10</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N+<span class="number">1</span> ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == semiprime[j])&#123;</span><br><span class="line">            ++j;</span><br><span class="line">            prefix[i] = ++cur;</span><br><span class="line">        &#125;</span><br><span class="line">        prefix[i] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int p:prefix) cout&lt;&lt;p&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;P.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(prefix[Q[i]] - prefix[P[i]<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>speed complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Sieve of Eratosthenes</category>
      </categories>
  </entry>
  <entry>
    <title>CountNonDivisible</title>
    <url>/blog/2023/02/12/codility/%5B77%25%5DCountNonDivisible/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/11-sieve_of_eratosthenes/count_non_divisible/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>[77%] time out</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v, ret;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:A) v.<span class="built_in">push_back</span>(a);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; index, visited;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) index[v[i]]= i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited.<span class="built_in">find</span>(A[i]) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="comment">// search less than value and can divid</span></span><br><span class="line">            <span class="type">int</span> idx = index[A[i]], count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=idx; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[i]% v[j] ==<span class="number">0</span>) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[A[i]] = n-count;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(visited[A[i]]);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>Sieve of Eratosthenes</category>
      </categories>
  </entry>
  <entry>
    <title>NumberOfDiscIntersections</title>
    <url>/blog/2023/02/12/codility/%5B81%25%5DNumberOfDiscIntersections/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://app.codility.com/programmers/lessons/6-sorting/number_of_disc_intersections/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>[81%] brute force &#x3D;&gt; time out<br>用全部減去不會交集的數量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you can use includes, for example:</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can write to stdout for debugging purposes, e.g.</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;this is a debug message&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code in C++14 (g++ 6.2.0)</span></span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">long</span> total = (<span class="type">long</span>)n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r = i+<span class="number">1</span>;r&lt;n;++r)&#123;</span><br><span class="line">            <span class="comment">// count non-intersection</span></span><br><span class="line">            <span class="keyword">if</span> (r- A[i]- i &gt; A[r]) &#123; <span class="comment">//right&gt;A[i]+i+A[right] will cause overflow</span></span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total-sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>brute force<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>codility</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>1007. Minimum Domino Rotations For Equal Row</title>
    <url>/blog/2023/02/12/leetcode/1007_MinimumDominoRotationsForEqualRow/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDominoRotations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; tops, vector&lt;<span class="type">int</span>&gt;&amp; bottoms)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = tops.<span class="built_in">size</span>() , count  = <span class="number">0</span>, cand = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span> ; ++i)&#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tops[j] == i || bottoms[j] == i) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count == n)&#123;</span><br><span class="line">                cand = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cand == <span class="number">-1</span>) <span class="keyword">return</span> cand;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> top_n = <span class="number">0</span>, bottom_n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tops[i] == cand) top_n++;</span><br><span class="line">            <span class="keyword">if</span>(bottoms[i] == cand) bottom_n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(n-top_n, n-bottom_n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(6n)</code></li>
<li>space complecity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>100. Same Tree</title>
    <url>/blog/2023/02/12/leetcode/100_SameTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/same-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-backtracking"><a href="#option-1-backtracking" class="headerlink" title="option 1 - backtracking"></a>option 1 - backtracking</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!p || !q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val != q-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left) &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right, q-&gt;right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!q &amp;&amp; !p) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!q ^ !p) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        queue&lt;TreeNode *&gt;q1, q2;</span><br><span class="line">        q1.<span class="built_in">push</span>(p);</span><br><span class="line">        q2.<span class="built_in">push</span>(q);</span><br><span class="line">        <span class="keyword">while</span>(!q1.<span class="built_in">empty</span>() &amp;&amp; !q2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size  = q1.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(size !=q2.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode *t1 = q1.<span class="built_in">front</span>(), *t2 = q2.<span class="built_in">front</span>();</span><br><span class="line">                q1.<span class="built_in">pop</span>();</span><br><span class="line">                q2.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(t1-&gt;val !=t2-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(t1-&gt;left &amp;&amp; t2-&gt;left)&#123;</span><br><span class="line">                    q1.<span class="built_in">push</span>(t1-&gt;left);</span><br><span class="line">                    q2.<span class="built_in">push</span>(t2-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!t1-&gt;left ^ !t2-&gt;left) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(t1-&gt;right &amp;&amp; t2-&gt;right)&#123;</span><br><span class="line">                    q1.<span class="built_in">push</span>(t1-&gt;right);</span><br><span class="line">                    q2.<span class="built_in">push</span>(t2-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!t1-&gt;right ^ !t2-&gt;right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!q1.<span class="built_in">empty</span>() || !q2.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code> n is node</li>
<li>space complexity <code>O(h)</code> h is height or depth</li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code> n is node</li>
<li>space complexity <code>O(n)</code> n is node</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1011. Capacity To Ship Packages Within D Days</title>
    <url>/blog/2023/02/12/leetcode/1011_CapacityToShipPackagesWithinDDays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">problem</a></h2><p>輸送帶上有 i 個重量為 <code>weight[i]</code>的貨品，要<code>days</code> 天內將所有貨品運送完，每天裝載貨品最大總和不能超過最大載貨量，求運送船的最低運送能力。</p>
<h2 id="solutin"><a href="#solutin" class="headerlink" title="solutin"></a>solutin</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> cap)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = weights.<span class="built_in">size</span>(), days = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;)&#123;</span><br><span class="line">            <span class="type">int</span> c = cap;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; c&gt;=weights[i])&#123;</span><br><span class="line">                c-=weights[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            days++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> days;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shipWithinDays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> days)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w:weights)&#123;</span><br><span class="line">            l = <span class="built_in">max</span>(w,l);</span><br><span class="line">            r+=w;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> cap = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">            <span class="comment">// 運送能力 cap 下需要 evalday 才可以運送完</span></span><br><span class="line">            <span class="type">int</span> evalday = <span class="built_in">cost</span>(weights, cap);</span><br><span class="line">            <span class="comment">// 減少運送能力，看是否還能運送完，因為題目要求最低運送能力</span></span><br><span class="line">            <span class="keyword">if</span>(evalday == days) r = cap;</span><br><span class="line">            <span class="comment">// 花太多天，運送太慢，加快速度 </span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(evalday &gt; days) l = cap +<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 花太少天，運送太快，放慢速度</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(evalday &lt; days) r = cap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>101. Symmetric Tree</title>
    <url>/blog/2023/02/12/leetcode/101_SymmetricTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/symmetric-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">sym</span><span class="params">(TreeNode *l, TreeNode *r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l &amp;&amp; !r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!l || !r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(l-&gt;val != r-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sym</span>(l-&gt;left, r-&gt;right) &amp;&amp; <span class="built_in">sym</span>(l-&gt;right, r-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sym</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        queue&lt;pair&lt;TreeNode*,<span class="type">int</span>&gt;&gt; q  ;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;root, depth&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; rec;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size; ++i)&#123;</span><br><span class="line">                <span class="keyword">auto</span> [p,d] = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;p-&gt;left, d+<span class="number">1</span>&#125;);</span><br><span class="line">                    rec.<span class="built_in">push_back</span>(p-&gt;left-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> rec.<span class="built_in">push_back</span>(<span class="number">-101</span>);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right)&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;p-&gt;right, d+<span class="number">1</span>&#125;);</span><br><span class="line">                    rec.<span class="built_in">push_back</span>(p-&gt;right-&gt;val);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> rec.<span class="built_in">push_back</span>(<span class="number">-101</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// check is palindrome</span></span><br><span class="line">            <span class="type">int</span> l=<span class="number">0</span>, r = rec.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="keyword">if</span>(rec[l++]!=rec[r--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1020. Number of Enclaves</title>
    <url>/blog/2023/02/12/leetcode/1020_NumberofEnclaves/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-enclaves/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先將周圍島嶼淹沒，再去算剩下島嶼面積</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; grid, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&lt;<span class="number">0</span> || j&gt;m<span class="number">-1</span> || grid[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i+<span class="number">1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i<span class="number">-1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i,j<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numEnclaves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(grid, i, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(grid, i, m<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m ; ++j)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(grid, <span class="number">0</span>, j);</span><br><span class="line">            <span class="built_in">dfs</span>(grid, n<span class="number">-1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;m<span class="number">-1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>1024. Video Stitching</title>
    <url>/blog/2023/02/12/leetcode/1024_VideoStitching/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/video-stitching/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">videoStitching</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; clips, <span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 區間問題一律按照起點或終點排序。</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// step1. 先照起點升序，起點一致再用終點作降序</span></span><br><span class="line">        <span class="comment">// 因為clip 起點相同，那一定選最長的。這就是貪心的策略。</span></span><br><span class="line">        <span class="comment">// step2. 選定第一個clips[0]當作起點，比較所有起點小於clips[0][1]的區間。</span></span><br><span class="line">        <span class="comment">// 根據貪心策略，他們中終點最大的即是第二個clip小影片，再從第二個clip貪心選擇第三個以此類推。</span></span><br><span class="line">        <span class="comment">// step3. 重複step2 直到覆蓋區間[0,time]或是無法覆蓋則返回-1。</span></span><br><span class="line">        <span class="built_in">sort</span>(clips.<span class="built_in">begin</span>(), clips.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt;&amp;b)&#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>]==b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>]&gt;b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(clips.<span class="built_in">size</span>()==<span class="number">0</span> || time==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 紀錄選擇的clip個數</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> curEnd = <span class="number">0</span>, nextEnd = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>, n = clips.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; clips[i][<span class="number">0</span>]&lt;= curEnd)&#123; <span class="comment">// 第一個區間必定是0當作起點</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 選擇下一個clip</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; clips[i][<span class="number">0</span>] &lt;= curEnd)&#123;</span><br><span class="line">                nextEnd = <span class="built_in">max</span>(nextEnd, clips[i][<span class="number">1</span>]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="comment">//找到下一個clip，更新curEnd</span></span><br><span class="line">            count++;</span><br><span class="line">            curEnd = nextEnd;</span><br><span class="line">            <span class="comment">// 表示已經可以拼接出 [0,time]</span></span><br><span class="line">            <span class="keyword">if</span>(curEnd&gt;=time) <span class="keyword">return</span> count;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>1026. Maximum Difference Between Node and Ancestor</title>
    <url>/blog/2023/02/12/leetcode/1026_MaximumDifferenceBetweenNodeandAncestor/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-difference-between-node-and-ancestor">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret =<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traverse</span><span class="params">(TreeNode * root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> root-&gt;val; </span><br><span class="line">        <span class="comment">// ret = max(abs(root-&gt;val - FindMaxChild(root)),abs(root-&gt;val - FindMaxChild(root)) )</span></span><br><span class="line">        <span class="comment">// traverse(root-&gt;left);</span></span><br><span class="line">        <span class="comment">// traverse(root-&gt;right);</span></span><br><span class="line">        <span class="type">int</span> mn = INT_MAX;</span><br><span class="line">        <span class="built_in">FindMinChild</span>(root, mn);</span><br><span class="line">        <span class="type">int</span> mx = INT_MIN;</span><br><span class="line">        <span class="built_in">FindMaxChild</span>(root, mx);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;root-&gt;val&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;FindMinChild: &quot;&lt;&lt;mn&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;FindMaxChild: &quot;&lt;&lt;mx&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;ret: &quot;&lt;&lt;max(abs(root-&gt;val - mn), abs(root-&gt;val - mx ) )&lt;&lt;endl;</span></span><br><span class="line">        ret = <span class="built_in">max</span>(ret, <span class="built_in">max</span>(<span class="built_in">abs</span>(root-&gt;val - mn), <span class="built_in">abs</span>(root-&gt;val - mx ) ));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(root-&gt;val - mn), <span class="built_in">abs</span>(root-&gt;val - mx ) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">FindMinChild</span><span class="params">(TreeNode * node, <span class="type">int</span> &amp;ret)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> ;</span><br><span class="line">        ret = <span class="built_in">min</span>(ret, node-&gt;val);</span><br><span class="line">        <span class="built_in">FindMinChild</span>(node-&gt;left, ret); </span><br><span class="line">        <span class="built_in">FindMinChild</span>(node-&gt;right, ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">FindMaxChild</span><span class="params">(TreeNode * node, <span class="type">int</span> &amp;ret)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> ;</span><br><span class="line">        ret = <span class="built_in">max</span>(ret, node-&gt;val);</span><br><span class="line">        <span class="built_in">FindMaxChild</span>(node-&gt;left, ret); </span><br><span class="line">        <span class="built_in">FindMaxChild</span>(node-&gt;right, ret);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxAncestorDiff</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rmax = <span class="built_in">traverse</span>(root);</span><br><span class="line">        <span class="type">int</span> leftMax = <span class="built_in">maxAncestorDiff</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> rightMax = <span class="built_in">maxAncestorDiff</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>the complexity <code>O(n*n)</code> can improve to <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>1029. Two City Scheduling</title>
    <url>/blog/2023/02/12/leetcode/1029_TwoCityScheduling/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/two-city-scheduling/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">twoCitySchedCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, n = costs.<span class="built_in">size</span>()/<span class="number">2</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; refund;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; cost:costs)&#123;</span><br><span class="line">            ret+=cost[<span class="number">0</span>];</span><br><span class="line">            refund.<span class="built_in">push_back</span>(cost[<span class="number">1</span>] - cost[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(refund.<span class="built_in">begin</span>(), refund.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) ret+=refund[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>102. Binary Tree Level Order Traversal</title>
    <url>/blog/2023/02/12/leetcode/102_BinaryTreeLevelOrderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;TreeNode *&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">while</span>(size-- &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                temp.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>1038. Binary Search Tree to Greater Sum Tree</title>
    <url>/blog/2023/02/12/leetcode/1038_BinarySearchTreetoGreaterSumTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, <span class="type">int</span> &amp;val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, val);</span><br><span class="line">        </span><br><span class="line">        val+=root-&gt;val;</span><br><span class="line">        root-&gt;val = val;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">bstToGst</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>103. Binary Tree Zigzag Level Order Traversal</title>
    <url>/blog/2023/02/12/leetcode/103_BinaryTreeZigzagLevelOrderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">zigzagLevelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;TreeNode *&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; level;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size; ++i)&#123;</span><br><span class="line">                TreeNode * p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                level.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(h%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(level.<span class="built_in">begin</span>(), level.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            h++;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>1046. Last Stone Weight</title>
    <url>/blog/2023/02/12/leetcode/1046_LastStoneWeight/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/last-stone-weight/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-heap"><a href="#option-1-heap" class="headerlink" title="option 1 - heap"></a>option 1 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeight</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="function">priority_queue&lt;<span class="type">int</span>&gt; <span class="title">pq</span><span class="params">(stones.begin(), stones.end())</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(pq.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> a = pq.<span class="built_in">top</span>(); pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> b = pq.<span class="built_in">top</span>(); pq.<span class="built_in">pop</span>();</span><br><span class="line">            pq.<span class="built_in">push</span>(a-b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-counting-sort"><a href="#option-2-counting-sort" class="headerlink" title="option 2 - counting sort"></a>option 2 - counting sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - heap<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2 - sort<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>1047. Remove All Adjacent Duplicates In String</title>
    <url>/blog/2023/02/12/leetcode/1047_RemoveAllAdjacentDuplicatesInString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt; n &amp;&amp; s[i] == s[i+<span class="number">1</span>]) i++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>()==s[i]) sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">else</span> sta.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret+=sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>() == c) sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> sta.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret+=sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-simplify-option-1-without-stack"><a href="#option-2-simplify-option-1-without-stack" class="headerlink" title="option 2 simplify option 1 without stack"></a>option 2 simplify option 1 without stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ret.<span class="built_in">empty</span>() &amp;&amp; ret.<span class="built_in">back</span>() == c) ret.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">else</span> ret+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>104. Maximum Depth of Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/104_MaximumDepthofBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">problem</a></h2><p>求二元樹的最大深度</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><ul>
<li>用遞迴方式，求二元樹的深度，終止條件為當節點不存在時<code>return 0</code>，否則<code>1+max(maxDepth(root-&gt;left), maxDepth(root-&gt;right))</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h4><ul>
<li><p>用bfs，用queue輔助，儲存拜訪當下節點的左右子節點，並將深度加一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li><p>backtracking<br>time complexity <code>O(n)</code><br>space complexity <code>O(logN)</code></p>
</li>
<li><p>bfs<br>time complexity <code>O(n)</code><br>space complexity <code>O(n)</code> , N&#x2F;2 樹最底層的節點數量</p>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1051. Height Checker</title>
    <url>/blog/2023/02/12/leetcode/1051_HeightChecker/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/height-checker/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">heightChecker</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; expected = heights;</span><br><span class="line">        <span class="built_in">sort</span>(expected.<span class="built_in">begin</span>(),expected.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>, n= expected.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(expected[i]!=heights[i]) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-counting-sorted"><a href="#option-2-counting-sorted" class="headerlink" title="option 2 - counting sorted"></a>option 2 - counting sorted</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">heightChecker</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">101</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> h:heights) count[h]++;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, i=<span class="number">1</span>, n=heights.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(count[i]==<span class="number">0</span>) i++;</span><br><span class="line">            <span class="keyword">if</span>(i!= heights[j]) ret++;</span><br><span class="line">            count[i]--;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/105_ConstructBinaryTreefromPreorderandInorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p><code>preorder[l]</code>為根節點，並從<code>inorder[l:r]</code>找到該節點，並用此節點切割，左半部為此節點的左子樹，右半部為此節點的右子樹，並遞迴下去。</p>
<p><code>root-&gt;left = build(preorder, pl+1, pl +idx-il, inorder, il, idx-1 );</code><br>為什麼不是<code>pl+1+idx-1-il+1</code> ? 因為<code>idx-1-il+1</code>是從跟節點開始計算offset，已包含 從pl開始找起的offset 所以不需再加一。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, <span class="type">int</span> pl, <span class="type">int</span> pr, vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">int</span> il, <span class="type">int</span> ir)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pl&gt;pr) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[pl]);</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=il;i&lt;=ir;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;val == inorder[i])&#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(preorder, pl+<span class="number">1</span>, pl+<span class="number">1</span>+idx<span class="number">-1</span>-il, inorder, il, idx<span class="number">-1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(preorder, pl+<span class="number">1</span>+idx<span class="number">-1</span>-il+<span class="number">1</span>, pr, inorder,idx+<span class="number">1</span>, ir);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(preorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>()<span class="number">-1</span>, inorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n^2)</code>  n is node number</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>106. Construct Binary Tree from Inorder and Postorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/106_ConstructBinaryTreefromInorderandPostorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p><code>postorder[r]</code>為根節點，並從<code>inorder[l:r]</code>找到該節點，並用此節點切割，左半部為此節點的左子樹，右半部為此節點的右子樹，並遞迴下去。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; inorder, <span class="type">int</span> il, <span class="type">int</span> ir, vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> pl, <span class="type">int</span> pr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(il&gt;ir) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(postorder[pr]);</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= il;i&lt;=ir;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i] == root-&gt;val)&#123;</span><br><span class="line">                idx = i ;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(inorder, il, idx<span class="number">-1</span>, postorder, pl, pl+idx-il<span class="number">-1</span>) ;</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(inorder, idx+<span class="number">1</span>, ir, postorder, pl+idx-il, pr<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(inorder, <span class="number">0</span>, inorder.<span class="built_in">size</span>()<span class="number">-1</span>, postorder, <span class="number">0</span>, postorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n^2)</code>  n is node number</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>107. Binary Tree Level Order Traversal II</title>
    <url>/blog/2023/02/12/leetcode/107_BinaryTreeLevelOrderTraversalII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrderBottom</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; level;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode * p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                level.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>108. Convert Sorted Array to Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/108_ConvertSortedArraytoBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[n/<span class="number">2</span>]);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(nums.begin(), nums.begin()+n/<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(nums.begin()+n/<span class="number">2</span>+<span class="number">1</span>, nums.end())</span></span>;</span><br><span class="line">        root-&gt;right = <span class="built_in">sortedArrayToBST</span>(right);</span><br><span class="line">        root-&gt;left = <span class="built_in">sortedArrayToBST</span>(left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1091. Shortest Path in Binary Matrix</title>
    <url>/blog/2023/02/12/leetcode/1091_ShortestPathinBinaryMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/shortest-path-in-binary-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathBinaryMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; neighbor = &#123;</span><br><span class="line">            &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">1</span>, n=grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p[<span class="number">0</span>] == n<span class="number">-1</span> &amp;&amp; p[<span class="number">1</span>] == m<span class="number">-1</span>) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; &amp;nei:neighbor)&#123;</span><br><span class="line">                    <span class="type">int</span> x = p[<span class="number">0</span>]+nei[<span class="number">0</span>], y = p[<span class="number">1</span>]+nei[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(x&gt;<span class="number">-1</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;<span class="number">-1</span> &amp;&amp; y&lt;m &amp;&amp; grid[x][y] == <span class="number">0</span> &amp;&amp; !visited[x][y] ) &#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">                        visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>1094. Car Pooling</title>
    <url>/blog/2023/02/12/leetcode/1094_CarPooling/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/car-pooling/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prefix</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; diff;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Prefix</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums)&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        diff = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>);</span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            diff[i] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        diff[i]+=val;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;diff.<span class="built_in">size</span>()) diff[j+<span class="number">1</span>]-=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reconstruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 還原原本陣列</span></span><br><span class="line">        <span class="comment">//diff  0   2   0   3   0   0   -2  0   -3  0</span></span><br><span class="line">        <span class="comment">//ret   0   2   2   5   5   5   3   3   0   0</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">1001</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        ret[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1001</span>;++i)&#123;</span><br><span class="line">            ret[i] = ret[i<span class="number">-1</span>] + diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">carPooling</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; trips, <span class="type">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//diff  0   0   0   0   0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//diff  0   2   0   0   0   -2  0   0   0   0</span></span><br><span class="line">        <span class="comment">//diff  0   2   0   3   0   -2  0   -3  0   0   </span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diff</span><span class="params">(<span class="number">1001</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        Prefix prefix = <span class="built_in">Prefix</span>(diff);</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;&amp; trip:trips)&#123;</span><br><span class="line">            <span class="type">int</span> i = trip[<span class="number">1</span>], j = trip[<span class="number">2</span>]<span class="number">-1</span>, val = trip[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// 即乘客車上的區間是 [trip[1], trip[2] -1] </span></span><br><span class="line">            prefix.<span class="built_in">increment</span>(i,j,val);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret = prefix.<span class="built_in">reconstruct</span>();</span><br><span class="line">        <span class="comment">// 客車自始至终都不應該超载</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r:ret)&#123;</span><br><span class="line">            <span class="keyword">if</span>(r&gt;capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> , n is number of trip ,<code>O(n*1000)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>109. Convert Sorted List to Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/109_ConvertSortedListtoBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedListToBST</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(!head-&gt;next) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(head-&gt;val);</span><br><span class="line">        ListNode *slow = head, *fast = head, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            fast =fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(slow-&gt;val);</span><br><span class="line">        root-&gt;left = <span class="built_in">sortedListToBST</span>(head);</span><br><span class="line">        <span class="keyword">if</span>(slow-&gt;next) root-&gt;right = <span class="built_in">sortedListToBST</span>(slow-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1109. Corporate Flight Bookings</title>
    <url>/blog/2023/02/12/leetcode/1109_CorporateFlightBookings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/corporate-flight-bookings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Diff</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; diff;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Diff</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums)&#123;</span><br><span class="line">        diff = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.<span class="built_in">size</span>();i++) diff[i] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">//  0   0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//  10  0   -10</span></span><br><span class="line">        <span class="comment">//  10  20  -10 -20</span></span><br><span class="line">        <span class="comment">//  10  45  -10 -20 -25 0   0</span></span><br><span class="line">        diff[i]+=val;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;diff.<span class="built_in">size</span>()) diff[j+<span class="number">1</span>]-=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reconstructure</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(diff.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  10  45  -10 -20 -25 0   0</span></span><br><span class="line">        <span class="comment">//  10  55  45  25  </span></span><br><span class="line">        ret[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;diff.<span class="built_in">size</span>();++i) ret[i] = diff[i] + ret[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">corpFlightBookings</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bookings, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        Diff diff = <span class="built_in">Diff</span>(num);</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; &amp; book:bookings)&#123;</span><br><span class="line">            <span class="type">int</span> i = book[<span class="number">0</span>]<span class="number">-1</span>, j = book[<span class="number">1</span>]<span class="number">-1</span>, val = book[<span class="number">2</span>];</span><br><span class="line">            diff.<span class="built_in">increment</span>(i,j, val);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret = diff.<span class="built_in">reconstructure</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>110. Balanced Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/110_BalancedBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/balanced-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Depth</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>( <span class="built_in">Depth</span>(root-&gt;left), <span class="built_in">Depth</span>(root-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// determine the height of the children</span></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">Depth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">Depth</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(right-left)&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">isBalanced</span>(root-&gt;left) &amp;&amp; <span class="built_in">isBalanced</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> ret;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">depth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">depth</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(left- right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            ret =<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(left, right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        ret = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">depth</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>111. Minimum Depth of Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/111_MinimumDepthofBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dfs</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">minDepth</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">minDepth</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;left), <span class="built_in">minDepth</span>(root-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bfs</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> minDepth = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size  = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size; ++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(!p-&gt;left &amp;&amp; !p-&gt;right) <span class="keyword">return</span> minDepth;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;left &amp;&amp; p-&gt;right)&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                    q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;left)&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;right)&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            minDepth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDepth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>backtracking<br>time complexity <code>O(n)</code><br>space complexity <code>O(logN)</code></li>
<li>bfs<br>time complexity <code>O(n)</code><br>space complexity <code>O(n)</code> , N&#x2F;2 樹最底層的節點數量</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>112. Path Sum</title>
    <url>/blog/2023/02/12/leetcode/112_PathSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/path-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dfs</span></span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(!root ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        targetSum-=root-&gt;val;</span><br><span class="line">        <span class="comment">// 拜訪到葉子了</span></span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; targetSum == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hasPathSum</span>(root-&gt;left, targetSum ) || <span class="built_in">hasPathSum</span>(root-&gt;right, targetSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        queue&lt;pair&lt;TreeNode*,<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;root, root-&gt;val&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [p, val] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;left &amp;&amp; !p-&gt;right &amp;&amp; val == targetSum) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(&#123;p-&gt;left, p-&gt;left-&gt;val+val&#125;);</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(&#123;p-&gt;right, p-&gt;right-&gt;val + val&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1137. N-th Tribonacci Number</title>
    <url>/blog/2023/02/12/leetcode/1137_N-thTribonacciNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/n-th-tribonacci-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>recursive &#x3D;&gt; time out<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">tribonacci</span>(n<span class="number">-3</span>)+<span class="built_in">tribonacci</span>(n<span class="number">-2</span>)+<span class="built_in">tribonacci</span>(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-memo-pattern"><a href="#option-1-memo-pattern" class="headerlink" title="option 1 - memo pattern"></a>option 1 - memo pattern</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span> &gt; ans;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">find</span>(n)!=ans.<span class="built_in">end</span>()) <span class="keyword">return</span> ans[n];</span><br><span class="line">        ans[n] =  <span class="built_in">tribonacci</span>(n<span class="number">-3</span>)+<span class="built_in">tribonacci</span>(n<span class="number">-2</span>)+<span class="built_in">tribonacci</span>(n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;++i) dp[i] = dp[i<span class="number">-3</span>] + dp[i<span class="number">-2</span>] + dp[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-3-reduce-dp"><a href="#option-3-reduce-dp" class="headerlink" title="option 3 - reduce dp"></a>option 3 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> a= <span class="number">0</span>, b =<span class="number">1</span>, c=<span class="number">1</span>, d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            d = a+b+c;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">            c=d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li><p>option 2 - dp</p>
<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li><p>option 3 </p>
<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>113. Path Sum II</title>
    <url>/blog/2023/02/12/leetcode/113_PathSumII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/path-sum-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum, vector&lt;<span class="type">int</span>&gt; &amp;path)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        targetSum -= root-&gt;val;</span><br><span class="line">        path.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="comment">// 插入條件</span></span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span> &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="comment">// 因為是call by reference 且所以拜訪完葉子後需要pop        </span></span><br><span class="line">        <span class="built_in">pathSum</span>(root-&gt;left, targetSum, path);</span><br><span class="line">        <span class="built_in">pathSum</span>(root-&gt;right, targetSum, path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathSum</span>(TreeNode* root, <span class="type">int</span> targetSum) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="comment">// C++ 同一函數名不同參數是可以的，但同一函數名同參數但不同返回型態是不能的</span></span><br><span class="line">        <span class="built_in">pathSum</span>(root, targetSum, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1143. Longest Common Subsequence</title>
    <url>/blog/2023/02/12/leetcode/1143_LongestCommonSubsequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-common-subsequence/">problem</a></h2><p>給定兩字串，找出最長共同子序列(common subsequence)的長度</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = text1.<span class="built_in">size</span>(), m =text2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//      a   c   e</span></span><br><span class="line">        <span class="comment">//  0   0   0   0   </span></span><br><span class="line">        <span class="comment">//a 0   1   1   1    </span></span><br><span class="line">        <span class="comment">//b 0   1   1   1</span></span><br><span class="line">        <span class="comment">//c 0   1   2   2</span></span><br><span class="line">        <span class="comment">//d 0   1   2   2</span></span><br><span class="line">        <span class="comment">//e 0   1   2   3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m+<span class="number">1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]) dp[i][j] = <span class="number">1</span>+dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Hunt–Szymanski-Algorithm"><a href="#option-2-Hunt–Szymanski-Algorithm" class="headerlink" title="option 2 - Hunt–Szymanski Algorithm"></a>option 2 - Hunt–Szymanski Algorithm</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*m)</code> </li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>114. Flatten Binary Tree to Linked List</title>
    <url>/blog/2023/02/12/leetcode/114_FlattenBinaryTreetoLinked%20List/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        TreeNode * temp = root-&gt;right;</span><br><span class="line">        root-&gt;right = root-&gt;left;</span><br><span class="line">        root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode *p = root;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;right) p=p-&gt;right;</span><br><span class="line">        p-&gt;right = temp;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>115. Distinct Subsequences</title>
    <url>/blog/2023/02/12/leetcode/115_DistinctSubsequences/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/distinct-subsequences/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDistinct</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不能刪除t字串 所以不會有 dp[i-1][j]</span></span><br><span class="line">        <span class="comment">//      r   a   b   b   i   t</span></span><br><span class="line">        <span class="comment">//  1   0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//r 1   1   0   0   0   0   0      </span></span><br><span class="line">        <span class="comment">//a 1   1   1   0   0   0   0</span></span><br><span class="line">        <span class="comment">//b 1   1   1   1   0   0   0</span></span><br><span class="line">        <span class="comment">//b 1   1   1   2   1   0   0</span></span><br><span class="line">        <span class="comment">//b 1   1   1   3   3   0   0</span></span><br><span class="line">        <span class="comment">//i 1   1   1   3   3   3   0</span></span><br><span class="line">        <span class="comment">//t 1   1   1   3   3   3   3</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(),  m = t.<span class="built_in">size</span>(), mod = <span class="number">1e+9</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span> ; ++i) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">// 當字元相同時， 刪除s字串的方法數 加上 替換的方法數</span></span><br><span class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>]) dp[i][j] = (dp[i<span class="number">-1</span>][j] + dp[i<span class="number">-1</span>][j<span class="number">-1</span>] )%mod ;</span><br><span class="line">                <span class="comment">// 當字元不同時，刪除s字串的方法數</span></span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j] %mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>116. Populating Next Right Pointers in Each Node Postorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/116_PopulatingNextRightPointersinEachNode/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(Node *left, Node* right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        left-&gt;next = right;</span><br><span class="line">        <span class="built_in">connect</span>(left-&gt;right, right-&gt;left);</span><br><span class="line">        <span class="built_in">connect</span>(right-&gt;left, right-&gt;right);</span><br><span class="line">        <span class="built_in">connect</span>(left-&gt;left, left-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">connect</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        queue&lt;Node *&gt;<span class="built_in">q</span>(&#123;root&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                Node *p = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i==size<span class="number">-1</span>) p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">else</span> p-&gt;next = q.<span class="built_in">front</span>();</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>117. Populating Next Right Pointers in Each Node II</title>
    <url>/blog/2023/02/12/leetcode/117_PopulatingNextRightPointersinEachNodeII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-bfs"><a href="#option-1-bfs" class="headerlink" title="option 1 - bfs"></a>option 1 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                Node * p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i!=size<span class="number">-1</span>) p-&gt;next= q.<span class="built_in">front</span>();</span><br><span class="line">                <span class="keyword">else</span> p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dfs"><a href="#option-2-dfs" class="headerlink" title="option 2 - dfs"></a>option 2 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        Node * p = root-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;left)&#123;</span><br><span class="line">                p=p-&gt;left;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;right)&#123;</span><br><span class="line">                p=p-&gt;right;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) root-&gt;right-&gt;next = p;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) root-&gt;left-&gt;next = root-&gt;right?root-&gt;right:p;</span><br><span class="line">        <span class="built_in">connect</span>(root-&gt;right);</span><br><span class="line">        <span class="built_in">connect</span>(root-&gt;left);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>118. Pascal&#39;s Triangle</title>
    <url>/blog/2023/02/12/leetcode/118_Pascal&#39;sTriangle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/pascals-triangle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generate</span>(<span class="type">int</span> numRows) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret = &#123;&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(numRows==<span class="number">1</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; row = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=numRows;++i)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> pre = row[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;i<span class="number">-1</span> ; ++j)&#123;</span><br><span class="line">                <span class="type">int</span> cur = row[j];</span><br><span class="line">                row[j] +=pre;</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            row.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            ret.<span class="built_in">push_back</span>(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>119. Pascal&#39;s Triangle II</title>
    <url>/blog/2023/02/12/leetcode/119_Pascal&#39;sTriangleII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/pascals-triangle-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="type">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=rowIndex ; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> pre = ret[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i ; ++j)&#123;</span><br><span class="line">                <span class="type">int</span> cur = ret[j];</span><br><span class="line">                ret[j] += pre;</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>11. Container With Most Water</title>
    <url>/blog/2023/02/12/leetcode/11_ContainerWithMostWater/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/container-with-most-water/">problem</a></h2><p>從陣列中，找出最大積水量</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>兩個索引分別從左往右，從右往左，直到兩索引相等時跳出迴圈，尋找最大積水量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r =n<span class="number">-1</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, (r-l)*<span class="built_in">min</span>(height[l], height[r]));</span><br><span class="line">            height[l] &lt; height[r] ? ++l : --r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>, j = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="type">int</span> h = <span class="built_in">min</span>(height[i], height[j]);</span><br><span class="line">            res = <span class="built_in">max</span>(res, h * (j - i));</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; h == height[i]) ++i;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; h == height[j]) --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1200. Minimum Absolute Difference</title>
    <url>/blog/2023/02/12/leetcode/1200_MinimumAbsoluteDifference/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-absolute-difference/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">minimumAbsDifference</span>(vector&lt;<span class="type">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> mn_abs = arr[<span class="number">1</span>] - arr[<span class="number">0</span>], n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n ; ++i) mn_abs = <span class="built_in">min</span>(mn_abs, arr[i] - arr[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] - arr[i<span class="number">-1</span>] == mn_abs) ret.<span class="built_in">push_back</span>(&#123;arr[i<span class="number">-1</span>], arr[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>1209. Remove All Adjacent Duplicates in String II</title>
    <url>/blog/2023/02/12/leetcode/1209_RemoveAllAdjacentDuplicatesinStringII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s, <span class="type">int</span> i, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+k<span class="number">-1</span>&gt;=s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;i+k;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]!=s[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">islegal</span><span class="params">(stack&lt;<span class="type">char</span>&gt; s, <span class="type">char</span> c, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;k<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; temp = s;</span><br><span class="line">        <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>() &amp;&amp; temp.<span class="built_in">top</span>() == c)&#123;</span><br><span class="line">            temp.<span class="built_in">pop</span>();</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isValid</span>(s,i,k))&#123;</span><br><span class="line">                i+=k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">islegal</span>(sta, s[i], k))&#123;</span><br><span class="line">                    <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>() == s[i])&#123;</span><br><span class="line">                        sta.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> sta.<span class="built_in">push</span>(s[i]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret+=sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        stack&lt;pair&lt;<span class="type">char</span>,<span class="type">int</span>&gt;&gt; sta;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; sta.<span class="built_in">top</span>().first == c)&#123;</span><br><span class="line">                <span class="keyword">auto</span> p = sta.<span class="built_in">top</span>();</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p.second == k<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> sta.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(c,p.second+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> sta.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(c,<span class="number">1</span>));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">append</span>(sta.<span class="built_in">top</span>().second, sta.<span class="built_in">top</span>().first);</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>120. Triangle</title>
    <url>/blog/2023/02/12/leetcode/120_Triangle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/triangle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTotal</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2                   2</span></span><br><span class="line">        <span class="comment">//  3   4               5   6</span></span><br><span class="line">        <span class="comment">//  6   5   7           11  10  13</span></span><br><span class="line">        <span class="comment">//  4   1   8   3       15  11  18  16</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> ret = INT_MAX;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>] ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>) dp[i][j] = triangle[i][j] + dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==i) dp[i][j] = triangle[i][j] + dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = triangle[i][j] + <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span>(i==n<span class="number">-1</span>) ret = <span class="built_in">min</span>(dp[i][j], ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-in-place-modify"><a href="#option-2-in-place-modify" class="headerlink" title="option 2 - in-place modify"></a>option 2 - in-place modify</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTotal</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2                   2</span></span><br><span class="line">        <span class="comment">//  3   4               5   6</span></span><br><span class="line">        <span class="comment">//  6   5   7           11  10  13</span></span><br><span class="line">        <span class="comment">//  4   1   8   3       15  11  18  16</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ret = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>) triangle[i][j] = triangle[i][j] + triangle[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==i) triangle[i][j] = triangle[i][j] + triangle[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> triangle[i][j] = triangle[i][j] + <span class="built_in">min</span>(triangle[i<span class="number">-1</span>][j<span class="number">-1</span>], triangle[i<span class="number">-1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span>(i==n<span class="number">-1</span>) ret = <span class="built_in">min</span>(triangle[i][j], ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-follow-up"><a href="#option-3-follow-up" class="headerlink" title="option 3 - follow up"></a>option 3 - follow up</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTotal</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(triangle.back())</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=(<span class="type">int</span>)triangle.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;<span class="number">-1</span> ; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;=i; ++j)&#123;</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j], dp[j+<span class="number">1</span>]) + triangle[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code> <code>O(1)</code> in-place <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>121. Best Time to Buy and Sell Stock</title>
    <url>/blog/2023/02/12/leetcode/121_BestTimetoBuyandSelIStock/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">problem</a></h2><p>從股票價位陣列中找出，可以最大化淨利</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><ul>
<li>維護一個dp 紀錄歷史至今最低價位，在用當天股價減去至今最低點，並更新ret</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      7   1   5   3   6   4</span></span><br><span class="line">        <span class="comment">//mn    7   1   1   1   1   1</span></span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mn</span><span class="params">(n,INT_MAX)</span></span>;</span><br><span class="line">        mn[<span class="number">0</span>] = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) mn[i] = <span class="built_in">min</span>(mn[i<span class="number">-1</span>], prices[i]);</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(prices[i] - mn[i], ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-algo"><a href="#option-2-algo" class="headerlink" title="option 2 - algo"></a>option 2 - algo</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mn = INT_MAX, ret = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:prices)&#123;</span><br><span class="line">            mn = <span class="built_in">min</span>(mn, p);</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, p-mn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-dp"><a href="#option-3-dp" class="headerlink" title="option 3 - dp"></a>option 3 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// sell it </span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// hold it</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] =-prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 第一次持有因沒有錢需要借錢所以為負</span></span><br><span class="line">        <span class="comment">//      sell    hold</span></span><br><span class="line">        <span class="comment">//7     0       -7</span></span><br><span class="line">        <span class="comment">//1     0       -1    </span></span><br><span class="line">        <span class="comment">//5     4       -1</span></span><br><span class="line">        <span class="comment">//3     4       -1</span></span><br><span class="line">        <span class="comment">//6     5       -1</span></span><br><span class="line">        <span class="comment">//4     5       -1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="comment">// 賣掉，要麻今天休息，要嘛是今天選擇賣掉，我手頭上持有的現金</span></span><br><span class="line">            dp[i][<span class="number">0</span>]= <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            <span class="comment">// 持有，要嘛今天休息，或是今天選擇買進，手頭上持有的現金</span></span><br><span class="line">            dp[i][<span class="number">1</span>]= <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],  -prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-4-reduce-dp"><a href="#option-4-reduce-dp" class="headerlink" title="option 4 - reduce dp"></a>option 4 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp_0 = <span class="number">0</span>, dp_1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> temp = dp_1;</span><br><span class="line">            dp_0 = <span class="built_in">max</span>(dp_0, dp_1+prices[i]);</span><br><span class="line">            dp_1 = <span class="built_in">max</span>(dp_1, -prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 4<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>122. Best Time to Buy and Sell Stock II</title>
    <url>/blog/2023/02/12/leetcode/122_BestTimetoBuyandSellStockII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-greedy"><a href="#option-1-greedy" class="headerlink" title="option 1 - greedy"></a>option 1 - greedy</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;prices.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            profit+=<span class="built_in">max</span>(prices[i]-prices[i<span class="number">-1</span>], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// sell vs. hold</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="comment">// 要麻今天休息，要買今天賣掉</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">            <span class="comment">// 要麻今天休息，要嘛今天買進</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>], dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-reduce-dp"><a href="#option-3-reduce-dp" class="headerlink" title="option 3 - reduce dp"></a>option 3 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp_0 = <span class="number">0</span>, dp_1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> temp = dp_0;</span><br><span class="line">            dp_0 = <span class="built_in">max</span>(dp_0, dp_1+prices[i]);</span><br><span class="line">            dp_1 = <span class="built_in">max</span>(dp_1, temp-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1232. Check If It Is a Straight Line</title>
    <url>/blog/2023/02/12/leetcode/1232_CheckIfItIsaStraightLine/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/check-if-it-is-a-straight-line/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkStraightLine</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; coordinates)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = coordinates.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// int m = abs((coordinates[1][1]-coordinates[0][1])/(coordinates[1][0]-coordinates[0][0]) );</span></span><br><span class="line">        <span class="comment">// avoid division by zero</span></span><br><span class="line">        <span class="type">int</span> m_a = coordinates[<span class="number">1</span>][<span class="number">1</span>]-coordinates[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> m_b = coordinates[<span class="number">1</span>][<span class="number">0</span>]-coordinates[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> temp_a = coordinates[i][<span class="number">1</span>]-coordinates[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> temp_b = coordinates[i][<span class="number">0</span>]-coordinates[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// if(m_a/m_b == temp_a/temp_b) return false;</span></span><br><span class="line">            <span class="keyword">if</span>(m_a*temp_b != m_b*temp_a) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;   </span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>123. Best Time to Buy and Sell Stock III</title>
    <url>/blog/2023/02/12/leetcode/123_BestTimetoBuyandSellStockIII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= prices.<span class="built_in">size</span>(), k=<span class="number">2</span>;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(k+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t = k;t&gt;=<span class="number">1</span>;--t)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][t][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][t][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][t][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][t][<span class="number">0</span>], dp[i<span class="number">-1</span>][t][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[i][t][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][t][<span class="number">1</span>], dp[i<span class="number">-1</span>][t<span class="number">-1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> dp_i10 = <span class="number">0</span>, dp_i11 = INT_MIN;</span><br><span class="line">        <span class="type">int</span> dp_i20 = <span class="number">0</span>, dp_i21 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> price : prices) &#123;</span><br><span class="line">            dp_i20 = <span class="built_in">max</span>(dp_i20, dp_i21 + price);</span><br><span class="line">            dp_i21 = <span class="built_in">max</span>(dp_i21, dp_i10 - price);</span><br><span class="line">            dp_i10 = <span class="built_in">max</span>(dp_i10, dp_i11 + price);</span><br><span class="line">            dp_i11 = <span class="built_in">max</span>(dp_i11, -price);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i20;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3"><a href="#option-3" class="headerlink" title="option 3"></a>option 3</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">empty</span>() || prices.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n= prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n,<span class="number">0</span>)</span>, <span class="title">right</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        left[<span class="number">0</span>] = <span class="number">0</span>, right[n<span class="number">-1</span>] = <span class="number">0</span>;        </span><br><span class="line">        <span class="comment">//      3   3   5   0   0   3   1   4</span></span><br><span class="line">        <span class="comment">//mn    3   3   3   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//left  0   0   2   2   2   3   3   4</span></span><br><span class="line">        <span class="comment">//mx    5   5   5   5   4   4   4   4</span></span><br><span class="line">        <span class="comment">//right 4   4   4   4   4   3   3   0</span></span><br><span class="line">        <span class="comment">// 雙向夾擠</span></span><br><span class="line">        <span class="type">int</span> mn = prices[<span class="number">0</span>], mx = prices[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mn = <span class="built_in">min</span>(mn, prices[i]);</span><br><span class="line">            left[i] = <span class="built_in">max</span>(left[i<span class="number">-1</span>], prices[i] - mn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, prices[i]);</span><br><span class="line">            right[i] = <span class="built_in">max</span>(right[i+<span class="number">1</span>], mx - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) profit = <span class="built_in">max</span>(profit, left[i] + right[i]);</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1249. Minimum Remove to Make Valid Parentheses</title>
    <url>/blog/2023/02/12/leetcode/1249_MinimumRemovetoMakeValidParentheses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol>
<li><p>遍歷字串，遇到字母加進字串<code>ret</code>，遇到左括號push stack，遇到右括號且如果stack為空，則不加入字串<code>ret</code>，代表目前為止右括號出現次數多餘左括號，遇到右括號且stack 不為空則加入字串<code>ret</code>並pop stack。</p>
</li>
<li><p>最後檢查是否有左括號在字串<code>ret</code>後方且沒有對應的右括號，並將他移除。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minRemoveToMakeValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span>) ret+=c;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(c);</span><br><span class="line">                ret+=c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// )</span></span><br><span class="line">                <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    sta.<span class="built_in">pop</span>();</span><br><span class="line">                    ret+=c;</span><br><span class="line">                &#125;        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &quot;())()(((&quot;</span></span><br><span class="line">        <span class="comment">// 從後面移除多餘的左括號</span></span><br><span class="line">        string ans;</span><br><span class="line">        <span class="type">int</span> n= ret.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ret[i]==<span class="string">&#x27;(&#x27;</span> &amp;&amp; !sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=ret[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>124. Binary Tree Maximum Path Sum</title>
    <url>/blog/2023/02/12/leetcode/124_BinaryTreeMaximumPathSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPath</span><span class="params">(TreeNode *root, <span class="type">int</span> &amp;ret )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> left =<span class="built_in">max</span>(<span class="built_in">maxPath</span>(root-&gt;left, ret),<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> right =<span class="built_in">max</span>(<span class="built_in">maxPath</span>(root-&gt;right, ret),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 由當前節點當作起點的最大路徑</span></span><br><span class="line">        ret = <span class="built_in">max</span>(ret, root-&gt;val + left+right);</span><br><span class="line">        <span class="comment">// 左邊到右邊包含當前節點的最大路境</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right)+root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = INT_MIN;</span><br><span class="line">        <span class="built_in">maxPath</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1254. Number of Closed Islands</title>
    <url>/blog/2023/02/12/leetcode/1254_NumberofClosedIslands/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-closed-islands/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先將周圍島嶼淹沒，再去算剩下島嶼數</p>
<h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || grid[i][j] == <span class="number">1</span> ) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        grid[i][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i<span class="number">-1</span>, j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i+<span class="number">1</span>, j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i, j<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i, j+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">closedIsland</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(grid,i,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(grid, i, m<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(grid,<span class="number">0</span>,j);</span><br><span class="line">            <span class="built_in">dfs</span>(grid, n<span class="number">-1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> ;j&lt;m<span class="number">-1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="built_in">dfs</span>(grid, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(m*n)</code></li>
<li>space complexity <code>O(m*n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>125. Valid Palindrome</title>
    <url>/blog/2023/02/12/leetcode/125_ValidPalindrome/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-palindrome/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">char</span> &amp;c)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r =s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isValid</span>(s[l])) l++;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isValid</span>(s[r])) r--;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">tolower</span>(s[l])!=<span class="built_in">tolower</span>(s[r])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        string str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isValid</span>(c)) str+=<span class="built_in">tolower</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = str.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[l++] != str[r--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1260. Shift 2D Grid</title>
    <url>/blog/2023/02/12/leetcode/1260_Shift2DGrid/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/shift-2d-grid/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">shiftGrid</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">        <span class="type">int</span> n =grid.<span class="built_in">size</span>(), m=grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                vec.<span class="built_in">push_back</span>(grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k%= m*n;</span><br><span class="line">        k = m*n-k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                grid[i][j] = vec[k%(m*n)];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-O-1"><a href="#option-2-O-1" class="headerlink" title="option 2 - O(1)"></a>option 2 - <code>O(1)</code></h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(mn)</code></li>
<li>space complexity <code>O(nm)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>127. Word Ladder</title>
    <url>/blog/2023/02/12/leetcode/127_WordLadder/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/word-ladder/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ladderLength</span><span class="params">(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">words</span><span class="params">(wordList.begin(), wordList.end())</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!words.<span class="built_in">count</span>(endWord)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="function">queue&lt;string&gt; <span class="title">q</span><span class="params">(&#123;beginWord&#125;)</span></span>;</span><br><span class="line">        unordered_set&lt;string&gt; visited;</span><br><span class="line">        visited.<span class="built_in">insert</span>(beginWord);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                string p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p == endWord) <span class="keyword">return</span> depth;</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> len = p.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;++j)&#123;</span><br><span class="line">                    string temp = p;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span> ;c&lt;=<span class="string">&#x27;z&#x27;</span>;++c)&#123;</span><br><span class="line">                        string t = temp;</span><br><span class="line">                        t[j] = c;</span><br><span class="line">                        <span class="keyword">if</span>(!visited.<span class="built_in">count</span>(t) &amp;&amp; words.<span class="built_in">count</span>(t))&#123;</span><br><span class="line">                            q.<span class="built_in">push</span>(t);</span><br><span class="line">                            visited.<span class="built_in">insert</span>(t);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>find() 代替count 會更快</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ladderLength</span><span class="params">(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">words</span><span class="params">(wordList.begin(), wordList.end())</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(words.<span class="built_in">find</span>(endWord) == words.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="function">queue&lt;string&gt; <span class="title">q</span><span class="params">(&#123;beginWord&#125;)</span></span>;</span><br><span class="line">        unordered_set&lt;string&gt; visited;</span><br><span class="line">        visited.<span class="built_in">insert</span>(beginWord);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                string p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p == endWord) <span class="keyword">return</span> depth;</span><br><span class="line">                <span class="type">int</span> len = p.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;++j)&#123;</span><br><span class="line">                    string temp = p;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span> ;c&lt;=<span class="string">&#x27;z&#x27;</span>;++c)&#123;</span><br><span class="line">                        temp[j] = c;</span><br><span class="line">                        <span class="keyword">if</span>(visited.<span class="built_in">find</span>(temp)==visited.<span class="built_in">end</span>() &amp;&amp; words.<span class="built_in">find</span>(temp)!=words.<span class="built_in">end</span>())&#123;</span><br><span class="line">                            q.<span class="built_in">push</span>(temp);</span><br><span class="line">                            visited.<span class="built_in">insert</span>(temp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O()</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>1281. Subtract the Product and Sum of Digits of an Integer</title>
    <url>/blog/2023/02/12/leetcode/1281_SubtracttheProductandSumofDigitsofanInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subtractProductAndSum</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> prod = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            prod *= (n%<span class="number">10</span>);</span><br><span class="line">            sum+=(n%<span class="number">10</span>);</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prod - sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>sparse complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1283. Find the Smallest Divisor Given a Threshold</title>
    <url>/blog/2023/02/12/leetcode/1283_FindtheSmallestDivisorGivenaThreshold/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li><p>version 1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            sum+=n/d;</span><br><span class="line">            <span class="keyword">if</span>(n%d) sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">smallestDivisor</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   2   5   9</span></span><br><span class="line">        <span class="comment">// divisor = 1  2   3   4   5   6   7   8   9</span></span><br><span class="line">        <span class="comment">// sum =     17 10  7   7   5   5   5   5   5</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums) r = <span class="built_in">max</span>(r, n);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> sum = <span class="built_in">func</span>(nums, mid);</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; threshold) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;= threshold) r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>version 2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            sum+=n/d;</span><br><span class="line">            <span class="keyword">if</span>(n%d) sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">smallestDivisor</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   2   5   9</span></span><br><span class="line">        <span class="comment">// divisor = 1  2   3   4   5   6   7   8   9</span></span><br><span class="line">        <span class="comment">// sum =     17 10  7   7   5   5   5   5   5</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums) r = <span class="built_in">max</span>(r, n);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> sum = <span class="built_in">func</span>(nums, mid);</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; threshold) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;= threshold) r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li><p>time complexity <code>O(logn)</code></p>
</li>
<li><p>space complexity <code>O(1)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>1288. Remove Covered Intervals</title>
    <url>/blog/2023/02/12/leetcode/1288_RemoveCoveredIntervals/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-covered-intervals/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeCoveredIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 排序，按起點升序，起點相同案終點降序</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(),[](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>] ) <span class="keyword">return</span> a[<span class="number">1</span>]&gt;b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> n = intervals.<span class="built_in">size</span>(), start = intervals[<span class="number">0</span>][<span class="number">0</span>], end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> remove = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; &amp; cur = intervals[i];</span><br><span class="line">            <span class="comment">// [1,4] [3,5] 區間重疊 =&gt; 將end 向右擴張</span></span><br><span class="line">            <span class="keyword">if</span>( end &gt;= cur[<span class="number">0</span>] &amp;&amp; end&lt;cur[<span class="number">1</span>])&#123;</span><br><span class="line">                end = cur[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// [1,4] [2,3] 完全覆蓋 =&gt; 可以覆蓋一個區間。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(end&gt;= cur[<span class="number">0</span>] &amp;&amp; end&gt;=cur[<span class="number">1</span>])&#123;</span><br><span class="line">                remove++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// [1,2] [4,6] 不重疊</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                start = cur[<span class="number">0</span>];</span><br><span class="line">                end = cur[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - remove;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>128. Longest Consecutive Sequence</title>
    <url>/blog/2023/02/12/leetcode/128_LongestConsecutiveSequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-consecutive-sequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hash table 紀錄數字與包含該數字的最長區間長度</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(n)!=mp.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> l = (mp.<span class="built_in">count</span>(n<span class="number">-1</span>))?mp[n<span class="number">-1</span>]:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> r = (mp.<span class="built_in">count</span>(n+<span class="number">1</span>))?mp[n+<span class="number">1</span>]:<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum = r+l+<span class="number">1</span>;</span><br><span class="line">            mp[n] = sum;</span><br><span class="line">            mp[n-l] = sum;</span><br><span class="line">            mp[n+r] = sum;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>1290. Convert Binary Number in a Linked List to Integer</title>
    <url>/blog/2023/02/12/leetcode/1290_ConvertBinaryNumberinaLinkedListtoInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(ListNode * head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> ;</span><br><span class="line">        ret&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        ret+=head-&gt;val;</span><br><span class="line">        <span class="built_in">preorder</span>(head-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDecimalValue</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">preorder</span>(head);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="option-2-iterative"><a href="#option-2-iterative" class="headerlink" title="option 2 - iterative"></a>option 2 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDecimalValue</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;head;head=head-&gt;next)&#123;</span><br><span class="line">            sum&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            sum+=head-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>1295. Find Numbers with Even Number of Digits</title>
    <url>/blog/2023/02/12/leetcode/1295_FindNumberswithEvenNumberofDigits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-numbers-with-even-number-of-digits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">digits</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span>  d= <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            d++;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) count+=(<span class="built_in">digits</span>(n)%<span class="number">2</span>==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-math"><a href="#option-2-math" class="headerlink" title="option 2 - math"></a>option 2 - math</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="type">int</span> temp = <span class="built_in">floor</span>(<span class="built_in">log10</span>(n))+<span class="number">1</span>;</span><br><span class="line">            count+=(temp%<span class="number">2</span>==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1299. Replace Elements with Greatest Element on Right Side</title>
    <url>/blog/2023/02/12/leetcode/1299_ReplaceElementswithGreatestElementonRightSide/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">replaceElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 從右至左找最大</span></span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  17  18  5   4   6   1</span></span><br><span class="line">        <span class="comment">//  18  6   6   6   1   -1</span></span><br><span class="line">        <span class="type">int</span> mx = arr.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            ret[i] = mx;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>129. Sum Root to Leaf Numbers</title>
    <url>/blog/2023/02/12/leetcode/129_SumRoottoLeafNumbers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode * root, <span class="type">int</span> path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        path = <span class="number">10</span>*path + root-&gt;val;</span><br><span class="line">        <span class="comment">// 提前終止</span></span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)&#123;</span><br><span class="line">            ret+=path;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, path);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, path);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  bfs</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue&lt;pair&lt;TreeNode *,<span class="type">int</span>&gt; &gt;  q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;root, root-&gt;val&#125;);</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> _ = <span class="number">0</span>;_&lt;size ; ++_)&#123;</span><br><span class="line">                <span class="keyword">auto</span> [p,val] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(!p-&gt;left &amp;&amp; !p-&gt;right) ret+=val;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(&#123;p-&gt;left, <span class="number">10</span>*val+p-&gt;left-&gt;val&#125;);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(&#123;p-&gt;right, <span class="number">10</span>*val+p-&gt;right-&gt;val&#125;);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1302. Deepest Leaves Sum</title>
    <url>/blog/2023/02/12/leetcode/1302_DeepestLeavesSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/deepest-leaves-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// BFS</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">queue&lt;TreeNode*&gt; <span class="title">q</span><span class="params">(&#123;root&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> temp =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                temp+=p-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ret = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complecity <code>O(n)</code>, n is the number of node</li>
<li>space complecity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>bracktracking</tag>
      </tags>
  </entry>
  <entry>
    <title>130. Surrounded Regions</title>
    <url>/blog/2023/02/12/leetcode/130_SurroundedRegions/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/surrounded-regions/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; &amp; board, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || board[i][j] != <span class="string">&#x27;O&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(board,i+<span class="number">1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(board,i<span class="number">-1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(board,i,j+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(board,i,j<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 將周圍 圈圈及觸及到周圍的圈圈先改成#</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][<span class="number">0</span>] ==<span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board,i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(board[i][m<span class="number">-1</span>] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board,i, m<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[<span class="number">0</span>][j] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board,<span class="number">0</span>, j);</span><br><span class="line">            <span class="keyword">if</span>(board[n<span class="number">-1</span>][j] == <span class="string">&#x27;O&#x27;</span>) <span class="built_in">dfs</span>(board,n<span class="number">-1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 將剩下的圈圈改成X</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j= <span class="number">0</span> ;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;O&#x27;</span>) board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;#&#x27;</span>) board[i][j] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-BFS"><a href="#option-2-BFS" class="headerlink" title="option 2 - BFS"></a>option 2 - BFS</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> || i==n<span class="number">-1</span> || j ==<span class="number">0</span> || j == m<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(board[i][j] !=<span class="string">&#x27;O&#x27;</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(i,j));</span><br><span class="line">                    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">auto</span> d:dirs)&#123;</span><br><span class="line">                            <span class="type">int</span> x = p.first+d[<span class="number">0</span>] , y = p.second+d[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; board[x][y] == <span class="string">&#x27;O&#x27;</span> ) &#123;</span><br><span class="line">                                board[x][y] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">                                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x,y));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;O&#x27;</span>) board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;$&#x27;</span>) board[i][j] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Union-Find"><a href="#option-3-Union-Find" class="headerlink" title="option 3 - Union Find"></a>option 3 - Union Find</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        count = n;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        size = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span> (rootP == rootQ)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size[rootP] &gt; size[rootQ])</span><br><span class="line">        &#123;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            size[rootP] += size[rootQ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent[rootP] = rootQ;</span><br><span class="line">            size[rootQ] += size[rootP];</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判斷p q 是否互相連通</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">return</span> rootQ == rootP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回 節點 x 的根節點</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (parent[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 進行路徑壓縮</span></span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = board.<span class="built_in">size</span>(), n = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        UF *uf = <span class="keyword">new</span> <span class="built_in">UF</span>(m * n + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> dummy = m * n;</span><br><span class="line">        <span class="comment">// 首行與末行的O與dummy 連通</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                uf-&gt;<span class="built_in">unionSet</span>(i * n, dummy);</span><br><span class="line">            <span class="keyword">if</span> (board[i][n - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                uf-&gt;<span class="built_in">unionSet</span>(i * n + n - <span class="number">1</span>, dummy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首列與末列的O與dummy 連通</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">0</span>][j] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                uf-&gt;<span class="built_in">unionSet</span>(j, dummy);</span><br><span class="line">            <span class="keyword">if</span> (board[m - <span class="number">1</span>][j] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                uf-&gt;<span class="built_in">unionSet</span>(n * (m - <span class="number">1</span>) + j, dummy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; action = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n - <span class="number">1</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 将此 O 与上下左右的 O 连通</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">int</span> x = i + action[k][<span class="number">0</span>];</span><br><span class="line">                        <span class="type">int</span> y = j + action[k][<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                            uf-&gt;<span class="built_in">unionSet</span>(x * n + y, i * n + j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 所有不和 dummy 连通的 O，都要被替换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!uf-&gt;<span class="built_in">connected</span>(dummy, i * n + j))</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>1312. Minimum Insertion Steps to Make a String Palindrome</title>
    <url>/blog/2023/02/12/leetcode/1312_Minimum%20InsertionStepstoMakeaStringPalindrome/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minInsertions</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  m   b   a   d   m</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//m 0   1   2   3   2</span></span><br><span class="line">        <span class="comment">//b     0   1   2   3</span></span><br><span class="line">        <span class="comment">//a         0   1   2 </span></span><br><span class="line">        <span class="comment">//d             0   1</span></span><br><span class="line">        <span class="comment">//m                 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// if(s[i]!=s[j]) dp[i][j] = 1+min(dp[i+1][j], dp[i][j-1]);</span></span><br><span class="line">        <span class="type">int</span> n =s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="comment">// 形成回文</span></span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j]) dp[i][j] = dp[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="comment">// 插入</span></span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="number">1</span> + <span class="built_in">min</span>(dp[i+<span class="number">1</span>][j] ,dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>].<span class="built_in">back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>131. Palindrome Partitioning</title>
    <url>/blog/2023/02/12/leetcode/131_PalindromePartitioning/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/palindrome-partitioning/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l++] != s[r--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string s, <span class="type">int</span> start, vector&lt;string&gt; &amp; path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;s.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isPalindrome</span>(s, start,i)) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(start, i-start+<span class="number">1</span>));</span><br><span class="line">            <span class="built_in">dfs</span>(s,i+<span class="number">1</span>, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        vector&lt;string&gt; path;</span><br><span class="line">        <span class="built_in">dfs</span>(s, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1329. Sort the Matrix Diagonally</title>
    <url>/blog/2023/02/12/leetcode/1329_SorttheMatrixDiagonally/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-the-matrix-diagonally/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">diagonalSort</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="comment">// 11 25 66 1 69 7 </span></span><br><span class="line">        <span class="comment">// 23 55 17 45 15 52</span></span><br><span class="line">        <span class="comment">// 75 31 36 44 58 8</span></span><br><span class="line">        <span class="comment">// 22 27 33 25 68 4</span></span><br><span class="line">        <span class="comment">// 84 28 14 11 5 50</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 14 </span></span><br><span class="line">        <span class="comment">// 22 27</span></span><br><span class="line">        <span class="comment">// 84 28 75</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// (2,0)</span></span><br><span class="line">        <span class="comment">// (1,0) (2,1)</span></span><br><span class="line">        <span class="comment">// (0,0) (1,1) (2,2)</span></span><br><span class="line">        <span class="comment">// (0,1) (1,2) (2,3)</span></span><br><span class="line">        <span class="comment">// (0,2) (1,3)</span></span><br><span class="line">        <span class="comment">// (0,3)</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>(), m = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vec</span>(n+m<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; start = &#123;n<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;n+m<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x = start[<span class="number">0</span>], y = start[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(x&gt; <span class="number">-1</span> &amp;&amp; x&lt;n &amp;&amp; y&gt; <span class="number">-1</span> &amp;&amp; y &lt; m )&#123;</span><br><span class="line">                vec[c].<span class="built_in">push_back</span>(mat[x++][y++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// sort</span></span><br><span class="line">            <span class="built_in">sort</span>(vec[c].<span class="built_in">begin</span>(), vec[c].<span class="built_in">end</span>());</span><br><span class="line">            <span class="comment">// put order</span></span><br><span class="line">            x = start[<span class="number">0</span>], y = start[<span class="number">1</span>], i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x&gt; <span class="number">-1</span> &amp;&amp; x&lt;n &amp;&amp; y&gt; <span class="number">-1</span> &amp;&amp; y &lt; m &amp;&amp; i&lt;vec[c].<span class="built_in">size</span>())&#123;</span><br><span class="line">                mat[x++][y++] = vec[c][i++];</span><br><span class="line">            &#125;</span><br><span class="line">            c++;</span><br><span class="line">            <span class="keyword">if</span>(start[<span class="number">0</span>] &gt;<span class="number">0</span> ) start[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">else</span> start[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*n*logn)</code></li>
<li>space complexity <code>O(nm)</code> -&gt; <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>1337. The K Weakest Rows in a Matrix</title>
    <url>/blog/2023/02/12/leetcode/1337_TheKWeakestRowsinaMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Binary-Search"><a href="#option-1-Binary-Search" class="headerlink" title="option 1 - Binary Search"></a>option 1 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">BinarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == <span class="number">0</span>)  r = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> l+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">kWeakestRows</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// binary search</span></span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="built_in">BinarySearch</span>(mat[i]);</span><br><span class="line">            ret.<span class="built_in">push_back</span>(&#123;count, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span> &amp;a, <span class="type">const</span> <span class="keyword">auto</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.first==b.first) <span class="keyword">return</span> a.second&lt;b.second;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> a.first&lt;b.first;</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;++i) ans.<span class="built_in">push_back</span>(ret[i].second);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="anslysis"><a href="#anslysis" class="headerlink" title="anslysis"></a>anslysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>133. Clone Graph</title>
    <url>/blog/2023/02/12/leetcode/133_CloneGraph/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/clone-graph/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; neighbors;</span></span><br><span class="line"><span class="comment">    Node() &#123;</span></span><br><span class="line"><span class="comment">        val = 0;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;Node* , Node*&gt; visited;</span><br><span class="line">    <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node ) <span class="keyword">return</span> node;</span><br><span class="line">        <span class="comment">// 避免陷入無限循環</span></span><br><span class="line">        <span class="keyword">if</span>(visited.<span class="built_in">find</span>(node)!=visited.<span class="built_in">end</span>()) <span class="keyword">return</span> visited[node];</span><br><span class="line">        Node *clone = <span class="keyword">new</span> <span class="built_in">Node</span>(node-&gt;val);</span><br><span class="line">        visited[node] = clone;</span><br><span class="line">        <span class="keyword">for</span>(Node* n:node-&gt;neighbors)&#123;</span><br><span class="line">            clone-&gt;neighbors.<span class="built_in">push_back</span>(<span class="built_in">cloneGraph</span>(n));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> visited[node];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; neighbors;</span></span><br><span class="line"><span class="comment">    Node() &#123;</span></span><br><span class="line"><span class="comment">        val = 0;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; copies;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* copy = <span class="keyword">new</span> <span class="built_in">Node</span>(node -&gt; val, &#123;&#125;);</span><br><span class="line">        copies[node] = copy;</span><br><span class="line">        queue&lt;Node *&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(node);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            Node *cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(Node *neighbor:cur-&gt;neighbors)&#123;</span><br><span class="line">                <span class="keyword">if</span>(copies.<span class="built_in">find</span>(neighbor)==copies.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    copies[neighbor] = <span class="keyword">new</span> <span class="built_in">Node</span>(neighbor-&gt;val, &#123;&#125;);</span><br><span class="line">                    q.<span class="built_in">push</span>(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">                copies[cur] -&gt; neighbors.<span class="built_in">push_back</span>(copies[neighbor]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n+m)</code>, n is the number of nodes and m is the number of edges</li>
<li>sparse complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>hash table</tag>
        <tag>Graph</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>1346. Check If N and Its Double Exist</title>
    <url>/blog/2023/02/12/leetcode/1346_CheckIfNandItsDoubleExist/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/check-if-n-and-its-double-exist/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-hash-table"><a href="#option-1-hash-table" class="headerlink" title="option 1 - hash table"></a>option 1 - hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkIfExist</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(arr[i]*<span class="number">2</span>)!=s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; s.<span class="built_in">find</span>(arr[i]/<span class="number">2</span>)!=s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            s.<span class="built_in">insert</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>134. Gas Station</title>
    <url>/blog/2023/02/12/leetcode/134_GasStation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/gas-station/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>brute force , TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n ; ++i)&#123;</span><br><span class="line">            <span class="comment">// i 為起點</span></span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n ; j++)&#123;</span><br><span class="line">                cur+=(gas[(i+j)%n] - cost[(i+j)%n] );</span><br><span class="line">                <span class="keyword">if</span>(cur&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur&gt;=<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1-greedy"><a href="#option-1-greedy" class="headerlink" title="option 1 - greedy"></a>option 1 - greedy</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果選擇起點 i 作為起點，恰好無法 走到站點 j ，那麼i 和 j 中間的任一站點 k 都不可能作為起點。</span></span><br><span class="line">        <span class="comment">// 比如説從 站點1 出發，走到站點5時油箱油量為負數，那說明站點1 洽好無法 走到站點5，</span></span><br><span class="line">        <span class="comment">// 也就是說你無法從站點2 3 4 任一站點出發到達站點 5 因為站點5 到達時 油箱油量並然被減到負數。</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) sum+= (gas[i] - cost[i]);</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> tank = <span class="number">0</span>; <span class="comment">// 油箱油量</span></span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>; <span class="comment">// 起點</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            tank += (gas[i] - cost[i]);</span><br><span class="line">            <span class="keyword">if</span>(tank&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                start = i+<span class="number">1</span>;</span><br><span class="line">                tank = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start==n ? <span class="number">0</span> :start;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complecity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>136. Single Number</title>
    <url>/blog/2023/02/12/leetcode/136_SingleNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/single-number/">problem</a></h2><ul>
<li>給定一維整數陣列，找出那個single number，假設其他數字皆會出現兩次</li>
</ul>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-hash-table"><a href="#option-1-hash-table" class="headerlink" title="option 1 - hash table"></a>option 1 - hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) m[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m[n]==<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>set&#x2F;map find operation better than count operation, find 找到就return ，count則會繼續拜訪。</p>
</blockquote>
<h4 id="option-2-Bit-Manipulation"><a href="#option-2-Bit-Manipulation" class="headerlink" title="option 2 - Bit Manipulation"></a>option 2 - Bit Manipulation</h4><ul>
<li>善用 <code>x^x=0</code>特性 以及 XOR交換率</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) ret^=n;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>137. Single Number II</title>
    <url>/blog/2023/02/12/leetcode/137_SingleNumberII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/single-number-ii/">problem</a></h2><p>從一維陣列找出那個不重複的數字，假設其他數字皆會出現三次</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>利用2進位表示法，逐一去將第i位元相加，並除以3</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">31</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">                sum+= (n&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum%=<span class="number">3</span>;</span><br><span class="line">            ret+= sum&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>1382. Balance a Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/1382_BalanceaBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/balance-a-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode*root, vector&lt;<span class="type">int</span>&gt; &amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left, nums);</span><br><span class="line">        nums.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right, nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode *<span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[mid]);</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(nums, l, mid<span class="number">-1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(nums, mid+<span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">balanceBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">        <span class="built_in">preorder</span>(root, vec);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(vec, <span class="number">0</span>, vec.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity  <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>138. Copy List with Random Pointer</title>
    <url>/blog/2023/02/12/leetcode/138_CopyListwithRandomPointer/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>遍歷各節點，用hash table 維護每個節點與其對應新的節點<br>再次遍歷個節點，並賦予隨機節點</p>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; mp;</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        Node *ret = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="keyword">for</span>(Node *p = head;p;p=p-&gt;next)&#123;</span><br><span class="line">            ret-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>(p-&gt;val);</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">            mp[p] = ret;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Node *p = head;p;p=p-&gt;next)&#123;</span><br><span class="line">            mp[p]-&gt;random = mp[p-&gt;random];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><p>將兩件列先合併，在賦予random<br><code>cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;</code><br>在將兩串列拆開</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        Node *cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            Node *t = <span class="keyword">new</span> <span class="built_in">Node</span>(cur-&gt;val);</span><br><span class="line">            t-&gt;next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = t;</span><br><span class="line">            cur = t-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;random)&#123;</span><br><span class="line">                cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        Node *ret = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            Node *t = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = t-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(t-&gt;next) t-&gt;next = t-&gt;next-&gt;next;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>1396 Design Underground System</title>
    <url>/blog/2023/02/12/leetcode/1396_DesignUndergroundSystem/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-underground-system/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UndergroundSystem</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 起點 終點 有哪些客人</span></span><br><span class="line">    map&lt;pair&lt;string,string&gt;,vector&lt;<span class="type">int</span>&gt;&gt; record;</span><br><span class="line">    <span class="comment">// 每位客人 在哪上車、上車時間</span></span><br><span class="line">    map&lt;<span class="type">int</span>,pair&lt;<span class="type">int</span>,string&gt;&gt;clients;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UndergroundSystem</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">checkIn</span><span class="params">(<span class="type">int</span> id, string stationName, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        clients[id] = &#123;t, stationName&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">checkOut</span><span class="params">(<span class="type">int</span> id, string stationName, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = clients[id];</span><br><span class="line">        <span class="comment">// 完成一次搭乘，紀錄</span></span><br><span class="line">        record[&#123;p.second,stationName&#125;].<span class="built_in">push_back</span>(t - p.first);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getAverageTime</span><span class="params">(string startStation, string endStation)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> avg = <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">int</span> len =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:record[&#123;startStation,endStation &#125;])&#123;</span><br><span class="line">            avg+=v;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        avg = avg/len;</span><br><span class="line">        <span class="keyword">return</span> avg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your UndergroundSystem object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * UndergroundSystem* obj = new UndergroundSystem();</span></span><br><span class="line"><span class="comment"> * obj-&gt;checkIn(id,stationName,t);</span></span><br><span class="line"><span class="comment"> * obj-&gt;checkOut(id,stationName,t);</span></span><br><span class="line"><span class="comment"> * double param_3 = obj-&gt;getAverageTime(startStation,endStation);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>139. Word Break</title>
    <url>/blog/2023/02/12/leetcode/139_WordBreak/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/word-break/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs-memo-x3D-gt-maybe-TLE"><a href="#option-1-dfs-memo-x3D-gt-maybe-TLE" class="headerlink" title="option 1 - dfs + memo &#x3D;&gt; maybe TLE"></a>option 1 - dfs + memo &#x3D;&gt; maybe TLE</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;string&gt; words;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; memo;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(string s, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(memo[start]) <span class="keyword">return</span> memo[start];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start ; i&lt;s.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            string  temp = s.<span class="built_in">substr</span>(start,i-start +<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span>(words.<span class="built_in">find</span>(temp)!=words.<span class="built_in">end</span>() &amp;&amp; <span class="built_in">dfs</span>(s, i+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> memo[start] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        words = <span class="built_in">unordered_set</span>&lt;string&gt;(wordDict.<span class="built_in">begin</span>(), wordDict.<span class="built_in">end</span>());</span><br><span class="line">        memo = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(s.<span class="built_in">size</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(s, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">words</span><span class="params">(wordDict.begin(), wordDict.end())</span></span>;</span><br><span class="line">        <span class="comment">//  l   e   e   t   c   o   d   e</span></span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] &amp;&amp; words.<span class="built_in">count</span>(s.<span class="built_in">substr</span>(j, i-j))) &#123;</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">// 因為 [o,j) 已經是單詞了，現在又確定[j,i) 也是單詞</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-dp"><a href="#option-3-dp" class="headerlink" title="option 3 - dp"></a>option 3 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">words</span><span class="params">(wordDict.begin(), wordDict.end())</span></span>;</span><br><span class="line">        <span class="comment">//  l   e   e   t   c   o   d   e</span></span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">                    string temp = s.<span class="built_in">substr</span>(i,j-i);</span><br><span class="line">                    <span class="keyword">if</span>(words.<span class="built_in">count</span>(temp)) dp[j] = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>()!=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 2 - dp<ul>
<li>time complexity <code>O(n*dict.size())</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>13. Roman to Integer</title>
    <url>/blog/2023/02/12/leetcode/13_RomantoInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/roman-to-integer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">char</span> ,<span class="type">int</span>&gt; mp = &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;V&#x27;</span>,<span class="number">5</span>&#125;,&#123;<span class="string">&#x27;X&#x27;</span>,<span class="number">10</span>&#125;,&#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;,&#123;<span class="string">&#x27;M&#x27;</span>,<span class="number">1000</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ;i&lt;s.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            ret+=mp[s[i]];</span><br><span class="line">            <span class="type">int</span> sub =<span class="number">0</span> ;</span><br><span class="line">            <span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">-1</span> &amp;&amp; mp[s[i]] &gt; mp[s[j]]) &#123;</span><br><span class="line">                sub+=mp[s[j]];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            ret-= <span class="number">2</span>*sub;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; dict= &#123;&#123;<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;V&#x27;</span>,<span class="number">5</span>&#125;,&#123;<span class="string">&#x27;X&#x27;</span>,<span class="number">10</span>&#125;,&#123;<span class="string">&#x27;L&#x27;</span>,<span class="number">50</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="number">100</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>,<span class="number">500</span>&#125;,&#123;<span class="string">&#x27;M&#x27;</span>,<span class="number">1000</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> ret = dict[s[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dict[s[i<span class="number">-1</span>]] &lt;dict[s[i]])  ret +=  (dict[s[i]]<span class="number">-2</span>*dict[s[i<span class="number">-1</span>]]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dict[i<span class="number">-1</span>] &gt;= dict[i]) ret +=dict[s[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>1408. String Matching in an Array</title>
    <url>/blog/2023/02/12/leetcode/1408_StringMatchinginanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/string-matching-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stringMatching</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        ans = <span class="built_in">list</span>()</span><br><span class="line">        words = <span class="built_in">sorted</span>(words, key = <span class="built_in">len</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(words)):</span><br><span class="line">                <span class="keyword">if</span> words[i] <span class="keyword">in</span> words[j]:</span><br><span class="line">                    ans.append(words[i])</span><br><span class="line">                    <span class="comment"># 只加入一次</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string &amp;a, string &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = a.<span class="built_in">size</span>(), m=b.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m-n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]!=b[i+j]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( count ==n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">stringMatching</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), [](string &amp;a, string &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isValid</span>(words[i], words[j]))&#123;</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(words[i]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^3)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>140. Word Break II</title>
    <url>/blog/2023/02/12/leetcode/140_WordBreakII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/word-break-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    unordered_set&lt;string&gt; words;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(string s, <span class="type">int</span> start, string path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;s.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            string temp = s.<span class="built_in">substr</span>(start, i-start+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(words.<span class="built_in">count</span>(temp) &amp;&amp; <span class="built_in">dfs</span>(s, i+<span class="number">1</span>, path+temp+<span class="string">&#x27; &#x27;</span>) ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        words = <span class="built_in">unordered_set</span>&lt;string&gt;(wordDict.<span class="built_in">begin</span>(), wordDict.<span class="built_in">end</span>());</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">dfs</span>(s, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-memo"><a href="#option-2-memo" class="headerlink" title="option 2 - memo"></a>option 2 - memo</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string, vector&lt;string&gt;&gt; memo;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">wordBreak</span><span class="params">(string s, unordered_set&lt;string&gt; words)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(memo.<span class="built_in">count</span>(s)) <span class="keyword">return</span> memo[s];</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word:words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>, word.<span class="built_in">size</span>()) != word) <span class="keyword">continue</span>;</span><br><span class="line">            vector&lt;string&gt; temp = <span class="built_in">wordBreak</span>(s.<span class="built_in">substr</span>(word.<span class="built_in">size</span>()), words);</span><br><span class="line">            <span class="keyword">for</span>(string str:temp)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(word+(str.<span class="built_in">empty</span>()?<span class="string">&quot;&quot;</span>:<span class="string">&quot; &quot;</span>) +str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> memo[s] = ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">words</span><span class="params">(wordDict.begin(), wordDict.end())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">wordBreak</span>(s, words);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>141. Linked List Cycle</title>
    <url>/blog/2023/02/12/leetcode/141_LinkedListCycle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/linked-list-cycle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>two pointer ，slow fast pointers 用於linked list檢查是否包含環</p>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode *&gt; s;</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(cur)!=s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            s.<span class="built_in">insert</span>(cur);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Two-pointers"><a href="#option-2-Two-pointers" class="headerlink" title="option 2 - Two pointers"></a>option 2 - Two pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head ) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *slow =head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>142. Linked List Cycle II</title>
    <url>/blog/2023/02/12/leetcode/142_LinkedListCycleII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/linked-list-cycle-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>two pointer ，slow fast pointers 用於linked list檢查是否包含環<br>當fast 追上slow 代表有環，之後一個從起點開始跑，領一個從相遇位置開始跑，讚次相遇則是在環的起點。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *slow =head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fast || !fast-&gt;next) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">            fast= fast-&gt;next;</span><br><span class="line">            slow= slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>143. Reorder List</title>
    <url>/blog/2023/02/12/leetcode/143_ReorderList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reorder-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-reverse-Linked-Lists"><a href="#option-1-reverse-Linked-Lists" class="headerlink" title="option 1 - reverse Linked Lists"></a>option 1 - reverse Linked Lists</h4><ol>
<li>two pointer to find the middle node</li>
<li>reverse the second list </li>
<li>merge two lists</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">        ListNode *pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next)&#123;</span><br><span class="line">            ListNode *temp = head-&gt;next;</span><br><span class="line">            head-&gt;next = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head ||!head-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode *p = head;p;p=p-&gt;next) size++;</span><br><span class="line">        ListNode *a = head, *b = head, *pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> mid = size/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(mid--)&#123;</span><br><span class="line">            pre =b;</span><br><span class="line">            b=b-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *r  = <span class="built_in">reverse</span>(b);</span><br><span class="line">        ListNode * p = a;</span><br><span class="line">        a=a-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(a || r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(r)&#123;</span><br><span class="line">                p-&gt;next = r;</span><br><span class="line">                r=r-&gt;next;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a)&#123;</span><br><span class="line">                p-&gt;next = a;</span><br><span class="line">                a=a-&gt;next;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-stack"><a href="#option-2-stack" class="headerlink" title="option 2 - stack"></a>option 2 - stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        stack&lt;ListNode *&gt;sta;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            sta.<span class="built_in">push</span>(p);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p=head;</span><br><span class="line">        <span class="type">int</span> size = (sta.<span class="built_in">size</span>()<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(size-- &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            ListNode *post = p-&gt;next;</span><br><span class="line">            p-&gt;next = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            p-&gt;next-&gt;next = post;</span><br><span class="line">            p=post;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        sta.<span class="built_in">top</span>()-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> ;</span><br><span class="line">        stack&lt;ListNode *&gt; sta;</span><br><span class="line">        ListNode * p =head;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            sta.<span class="built_in">push</span>(p);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *cur = head, *post = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(sta.<span class="built_in">top</span>()!=post)&#123;</span><br><span class="line">            cur-&gt;next = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(sta.<span class="built_in">top</span>()==post) <span class="keyword">break</span>;</span><br><span class="line">            cur-&gt;next = post;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">            post=post-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = sta.<span class="built_in">top</span>();</span><br><span class="line">        cur-&gt;next-&gt;next= <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1446. Consecutive Characters</title>
    <url>/blog/2023/02/12/leetcode/1446_ConsecutiveCharacters/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/consecutive-characters/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPower</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>, ret= <span class="number">1</span>, n =s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">char</span> val = s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val == s[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret,count);</span><br><span class="line">                count =<span class="number">1</span>;</span><br><span class="line">                val = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = <span class="built_in">max</span>(ret,count);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>144. Binary Tree Preorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/144_BinaryTreePreorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode *root, vector&lt;<span class="type">int</span>&gt;&amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left, ret);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;  ret;</span><br><span class="line">        <span class="built_in">preorder</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>145. Binary Tree Postorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/145_BinaryTreePostorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;left, ret);</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;right, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">postorder</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>146. LRU Cache</title>
    <url>/blog/2023/02/12/leetcode/146_LRUCache/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/lru-cache/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> val, key ;</span><br><span class="line">    Node *prev, * next;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> k,<span class="type">int</span> v)&#123;</span><br><span class="line">        key = k;</span><br><span class="line">        val = v;</span><br><span class="line">        prev= <span class="literal">nullptr</span>;</span><br><span class="line">        next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    Node *head, *tail;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DoubleLinkedList</span>()&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">        tail-&gt;prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// push back</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(Node *node)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Node *node = new Node(x);</span></span><br><span class="line">        node-&gt;next = tail;</span><br><span class="line">        node-&gt;prev = tail-&gt;prev;</span><br><span class="line">        tail-&gt;prev-&gt;next = node;</span><br><span class="line">        tail-&gt;prev = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(Node *node)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Node *node = new Node(x);</span></span><br><span class="line">        node-&gt;next= head-&gt;next;</span><br><span class="line">        head-&gt;next-&gt;prev = node;</span><br><span class="line">        head-&gt;next = node;</span><br><span class="line">        node-&gt;prev = head;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pop back</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node *node = tail-&gt;prev;</span><br><span class="line">        <span class="comment">// int ret = node-&gt;val;</span></span><br><span class="line">        <span class="keyword">if</span>(node == head) <span class="keyword">return</span> ;</span><br><span class="line">        tail-&gt;prev = node-&gt;prev;</span><br><span class="line">        tail-&gt;prev-&gt;next = tail;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">// return node-&gt;val;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node *node = head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(node == tail) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        head-&gt;next = node-&gt;next;</span><br><span class="line">        node-&gt;next-&gt;prev = head;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(Node *node)</span></span>&#123;</span><br><span class="line">        Node *pre = node-&gt;prev;</span><br><span class="line">        pre-&gt;next = node-&gt;next;</span><br><span class="line">        pre-&gt;next-&gt;prev = pre;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//key 存key, value存 Node，可以由key 找到哪個Node，再去對cache做操作</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,Node*&gt; mp;</span><br><span class="line">    DoubleLinkedList* cache;</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) &#123;</span><br><span class="line">        cap = capacity;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="built_in">DoubleLinkedList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 將key 提升為最近使用</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeRecently</span><span class="params">(<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">        Node *node = mp[key];</span><br><span class="line">        cache-&gt;<span class="built_in">remove</span>(node);</span><br><span class="line">        cache-&gt;<span class="built_in">push_back</span>(node);</span><br><span class="line">        <span class="comment">// mp[key] = node;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加最近使用元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addRecently</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        Node *node = <span class="keyword">new</span> <span class="built_in">Node</span>(key, val);</span><br><span class="line">        cache-&gt;<span class="built_in">push_back</span>(node);</span><br><span class="line">        mp[key] = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刪除某一個key</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteKey</span><span class="params">(<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">        Node *node = mp[key];</span><br><span class="line">        cache-&gt;<span class="built_in">remove</span>(node);</span><br><span class="line">        mp.<span class="built_in">erase</span>(node-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刪除最久未使用的元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeLeastRecently</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node *node = cache-&gt;<span class="built_in">pop_front</span>();</span><br><span class="line">        mp.<span class="built_in">erase</span>(node-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">find</span>(key)==mp.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        Node* node = mp[key];</span><br><span class="line">        <span class="built_in">makeRecently</span>(key);</span><br><span class="line">        <span class="keyword">return</span> mp[key]-&gt;val;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">find</span>(key)!=mp.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">deleteKey</span>(key);</span><br><span class="line">            <span class="built_in">addRecently</span>(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 滿了</span></span><br><span class="line">            <span class="keyword">if</span>(cache-&gt;<span class="built_in">getSize</span>() == cap || mp.<span class="built_in">size</span>() == cap)&#123;</span><br><span class="line">                <span class="built_in">removeLeastRecently</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addRecently</span>(key , value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>148. Sort List</title>
    <url>/blog/2023/02/12/leetcode/148_SortList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-vector"><a href="#option-1-vector" class="headerlink" title="option 1 - vector"></a>option 1 - vector</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; list;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            list.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(list.<span class="built_in">begin</span>(), list.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = list.<span class="built_in">size</span>();</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(list[<span class="number">0</span>]), *ans = ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(list[i]);</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](ListNode *a, ListNode *b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a-&gt;val &gt; b-&gt;val;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(p);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret-&gt;next = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ret-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-merge-sort"><a href="#option-3-merge-sort" class="headerlink" title="option 3 - merge sort"></a>option 3 - merge sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode * <span class="title">mergeSort</span><span class="params">(ListNode *l1, ListNode *l2)</span></span>&#123;</span><br><span class="line">        ListNode * ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">                ret-&gt;next = l1;</span><br><span class="line">                l1= l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret-&gt;next = l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1) ret-&gt;next = l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) ret-&gt;next = l2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. split each node using slow fast point</span></span><br><span class="line">        <span class="comment">// 2. merge strategy</span></span><br><span class="line">        <span class="keyword">if</span>(!head ||!head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *slow =head, *fast = head, *pre=head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *a = <span class="built_in">sortList</span>(head), *b = <span class="built_in">sortList</span>(slow);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeSort</span>(a,b);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2 - heap<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1491. Average Salary Excluding the Minimum and Maximum Salary</title>
    <url>/blog/2023/02/12/leetcode/1491_AverageSalaryExcludingtheMinimumandMaximumSalary/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sort"><a href="#option-1-sort" class="headerlink" title="option 1 - sort"></a>option 1 - sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">average</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; salary)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sorting</span></span><br><span class="line">        <span class="built_in">sort</span>(salary.<span class="built_in">begin</span>(), salary.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">double</span> total = <span class="number">0</span>, n=salary.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i) total+=salary[i];</span><br><span class="line">        <span class="keyword">return</span> total/(n<span class="number">-2</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double average(vector&lt;int&gt;&amp; salary) &#123;</span><br><span class="line">        </span><br><span class="line">        double total = 0, n=salary.size();</span><br><span class="line">        int mx = salary[0], mn = salary[1];</span><br><span class="line">        for(int s:salary)&#123;</span><br><span class="line">            total+=s;</span><br><span class="line">            mx = max(mx,s);</span><br><span class="line">            mn = min(mn, s);</span><br><span class="line">        &#125;</span><br><span class="line">        total-= (mn+mx);</span><br><span class="line">        return total/(n-2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>149. Max Points on a Line</title>
    <url>/blog/2023/02/12/leetcode/149_MaxPointsonaLine/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/max-points-on-a-line/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, n = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; ,<span class="type">int</span>&gt; m;</span><br><span class="line">            <span class="type">int</span> duplicate = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="type">int</span> dx = points[j][<span class="number">0</span>] - points[i][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> dy = points[j][<span class="number">1</span>] - points[i][<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> d = <span class="built_in">gcd</span>(dx, dy);</span><br><span class="line">                m[&#123;dx/d,dy/d&#125;]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ret = <span class="built_in">max</span>(ret, duplicate);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>() ; it!=m.<span class="built_in">end</span>() ; ++it)&#123;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, it-&gt;second+duplicate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (b==<span class="number">0</span>)?a:<span class="built_in">gcd</span>(b, a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-math"><a href="#option-2-math" class="headerlink" title="option 2 - math"></a>option 2 - math</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>14. Longest Common Prefix</title>
    <url>/blog/2023/02/12/leetcode/14_LongestCommonPrefix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-common-prefix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        string ret ;</span><br><span class="line">        <span class="type">int</span> n = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[<span class="number">0</span>][i] == strs[j][i]) count++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==n) ret+=strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1502. Can Make Arithmetic Progression From Sequence</title>
    <url>/blog/2023/02/12/leetcode/1502_CanMakeArithmeticProgressionFromSequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canMakeArithmeticProgression</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), diff = arr[<span class="number">1</span>]-arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]-arr[i<span class="number">-1</span>] != diff) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canMakeArithmeticProgression</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), mn = INT_MAX, mx = INT_MIN;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:arr)&#123;</span><br><span class="line">            mn = <span class="built_in">min</span>(a, mn);</span><br><span class="line">            mx = <span class="built_in">max</span>(a, mx);</span><br><span class="line">            s.<span class="built_in">insert</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> diff = (mx-mn)/(n<span class="number">-1</span>), cur = mn;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(cur)==s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cur+=diff;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>unordered_set insert and serach 分攤後時間複雜度都是 <code>O(1)</code></p>
</blockquote>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - sorting<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>150. Evaluate Reverse Polish Notation</title>
    <url>/blog/2023/02/12/leetcode/150_EvaluateReversePolishNotation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string str:tokens )&#123;</span><br><span class="line">            <span class="keyword">if</span>(str == <span class="string">&quot;+&quot;</span> || str == <span class="string">&quot;-&quot;</span> || str==<span class="string">&quot;*&quot;</span> || str==<span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = sta.<span class="built_in">top</span>(); sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b = sta.<span class="built_in">top</span>(); sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(str == <span class="string">&quot;+&quot;</span>) sta.<span class="built_in">push</span>(b+a);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(str ==<span class="string">&quot;-&quot;</span>) sta.<span class="built_in">push</span>(b-a);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">&quot;*&quot;</span>) sta.<span class="built_in">push</span>(b*a);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">&quot;/&quot;</span>) sta.<span class="built_in">push</span>(b/a);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexit <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>151. Reverse Words in a String</title>
    <url>/blog/2023/02/12/leetcode/151_ReverseWordsinaString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c =s[i];</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!cur.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">while</span>(i&lt;n &amp;&amp; s[i+<span class="number">1</span>] ==<span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cur+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cur.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ret.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            ans+=ret[i];</span><br><span class="line">            <span class="keyword">if</span>(i!=ret.<span class="built_in">size</span>()<span class="number">-1</span>) ans+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; n; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+pre, s.<span class="built_in">begin</span>()+i);</span><br><span class="line">                <span class="comment">// avoid extra space</span></span><br><span class="line">                <span class="keyword">while</span>(i+<span class="number">1</span>&lt;n &amp;&amp; s[i+<span class="number">1</span>] ==<span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">                pre = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+pre, s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// trim</span></span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; s[l] == <span class="string">&#x27; &#x27;</span>) l++;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; s[r] ==<span class="string">&#x27; &#x27;</span>) r--;</span><br><span class="line">        s = s.<span class="built_in">substr</span>(l, r-l+<span class="number">1</span>);</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ret.<span class="built_in">back</span>() ==<span class="string">&#x27; &#x27;</span> &amp;&amp;  c==<span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ret+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1523. Count Odd Numbers in an Interval Range</title>
    <url>/blog/2023/02/12/leetcode/1523_CountOddNumbersinanIntervalRange/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countOdds</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l=low, r = high;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; l%<span class="number">2</span>==<span class="number">0</span>) l++;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; r%<span class="number">2</span>==<span class="number">0</span>) r--;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l%<span class="number">2</span>==<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (r-l)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>152. Maximum Product Subarray</title>
    <url>/blog/2023/02/12/leetcode/152_MaximumProductSubarray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-product-subarray/">problem</a></h2><p>給定一陣列，求出乘積最大連續子陣列，並返回其值</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 dp"></a>option 1 dp</h4><ul>
<li>維護兩dp，一條紀錄至今最小，一條紀錄至今最大，因為最大值可能是最小值乘以負數。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>(), ret = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mx</span><span class="params">(n,<span class="number">0</span>)</span>, <span class="title">mn</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        mx[<span class="number">0</span>] = mn[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mn[i] = <span class="built_in">min</span>(<span class="built_in">min</span>(mx[i<span class="number">-1</span>]*nums[i],mn[i<span class="number">-1</span>]*nums[i]), nums[i]);</span><br><span class="line">            mx[i] = <span class="built_in">max</span>(<span class="built_in">max</span>(mx[i<span class="number">-1</span>]*nums[i],mn[i<span class="number">-1</span>]*nums[i]), nums[i]);</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, mx[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-2-reduce-version"><a href="#option-2-reduce-version" class="headerlink" title="option 2 - reduce version"></a>option 2 - reduce version</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> mn = nums[<span class="number">0</span>],mx = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ret = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> pre_mn = mn;</span><br><span class="line">            mn = <span class="built_in">min</span>(nums[i], <span class="built_in">min</span>(mn*nums[i], mx*nums[i]));</span><br><span class="line">            mx = <span class="built_in">max</span>(nums[i], <span class="built_in">max</span>(pre_mn*nums[i], mx*nums[i]));</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, mx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1539. Kth Missing Positive Number</title>
    <url>/blog/2023/02/12/leetcode/1539_KthMissingPositiveNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/kth-missing-positive-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//              2   3   4           7               11</span></span><br><span class="line">        <span class="comment">//count 0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//i     0   1               2   3       3   4   5   </span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;k)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;arr.<span class="built_in">size</span>() &amp;&amp; arr[j] == count)&#123;</span><br><span class="line">                j++;count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexxity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>153. Find Minimum in Rotated Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/153_FindMinimuminRotatedSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">problem</a></h2><p>各元素唯一</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Binary-Search"><a href="#option-1-Binary-Search" class="headerlink" title="option 1 - Binary Search"></a>option 1 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 代表最小值會在 [mid+1, r] 之間</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[r]) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 右半部遞增，下次搜尋區間 [l, mid]</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[r]) r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>154. Find Minimum in Rotated Sorted Array II</title>
    <url>/blog/2023/02/12/leetcode/154_FindMinimuminRotatedSortedArrayII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/">problem</a></h2><p>元素可能重複</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 代表最小值會在 [mid+1, r] 之間</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[r]) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 下次搜尋區間</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[r] ) r = mid;          </span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>155. Min Stack</title>
    <url>/blog/2023/02/12/leetcode/155_MinStack/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/min-stack/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sta, minsta;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        sta.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="comment">// 單調遞減stack</span></span><br><span class="line">        <span class="keyword">if</span>(minsta.<span class="built_in">empty</span>()) minsta.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!minsta.<span class="built_in">empty</span>() &amp;&amp; minsta.<span class="built_in">top</span>()&gt;=val ) minsta.<span class="built_in">push</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = sta.<span class="built_in">top</span>(); sta.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t == minsta.<span class="built_in">top</span>()) minsta.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minsta.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>1572. Matrix Diagonal Sum</title>
    <url>/blog/2023/02/12/leetcode/1572_MatrixDiagonalSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/matrix-diagonal-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>one pass</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diagonalSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>(), idx = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ret+=mat[i][idx];</span><br><span class="line">            <span class="keyword">if</span>(idx != n<span class="number">-1</span>-idx) ret+=mat[i][n<span class="number">-1</span>-idx];</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1584. Min Cost to Connect All Points</title>
    <url>/blog/2023/02/12/leetcode/1584_MinCosttoConnectAllPoints/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/min-cost-to-connect-all-points/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="Kruskal-TLE"><a href="#Kruskal-TLE" class="headerlink" title="Kruskal, TLE"></a>Kruskal, TLE</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size, parent;</span><br><span class="line">    <span class="type">int</span> count ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">        count = n;</span><br><span class="line">        size = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">1</span>);</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            parent[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP == rootQ) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(size[rootP] &gt; size[rootQ])&#123;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            size[rootP] += size[rootQ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootP] = rootQ;</span><br><span class="line">            size[rootQ] +=size[rootP];</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> rootP = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> rootQ = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">return</span> rootP==rootQ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(parent[x]!=x)&#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getcount</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> count;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostConnectPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 建立一個資料結構，將邊長也考慮進去</span></span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edges ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="type">int</span> xi = points[i][<span class="number">0</span>], yi = points[i][<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> xj = points[j][<span class="number">0</span>], yj = points[j][<span class="number">1</span>];</span><br><span class="line">                edges.<span class="built_in">push_back</span>(&#123;i,j, <span class="built_in">abs</span>(xi-xj)+<span class="built_in">abs</span>(yi-yj)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 權重從小至大排序</span></span><br><span class="line">        <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span> &amp;b)-&gt;<span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">2</span>]&lt;b[<span class="number">2</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> mst = <span class="number">0</span>;</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="comment">// 3. 從權值最小的邊開始，如果這條邊連接的兩個節點於圖G 中不在同一個連通分量中，則添加這條邊到圖 G 中</span></span><br><span class="line">        <span class="comment">// 4. 重複3，直至圖G中所有的節點都在同一個連通分量中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp;edge:edges)&#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> v = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> weight = edge[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span>(uf.<span class="built_in">connected</span>(u,v)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// if(uf.getcount() == 1) break;</span></span><br><span class="line">            mst+=weight;</span><br><span class="line">            uf.<span class="built_in">unionSet</span>(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>Kruskal<ul>
<li>time complexity <code>O(V+E)</code></li>
<li>space complexity <code>O(ElogE)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title>1588. Sum of All Odd Length Subarrays</title>
    <url>/blog/2023/02/12/leetcode/1588_SumofAllOddLengthSubarrays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sum-of-all-odd-length-subarrays/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-brute-force"><a href="#option-1-brute-force" class="headerlink" title="option 1 - brute force"></a>option 1 - brute force</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   4   2   5   3</span></span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j-i+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;++k) sum+=arr[k];</span><br><span class="line">                    ret+=sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-reduce"><a href="#option-2-reduce" class="headerlink" title="option 2 - reduce"></a>option 2 - reduce</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   4   2   5   3</span></span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:arr) total+=a;</span><br><span class="line">        <span class="type">int</span> prev = <span class="number">0</span>, next = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> next = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;<span class="number">-1</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j-i+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                    ret+=(total-prev-next);</span><br><span class="line">                &#125;</span><br><span class="line">                next+=arr[j];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            prev+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-prefix"><a href="#option-3-prefix" class="headerlink" title="option 3 - prefix"></a>option 3 - prefix</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//          1   4   2   5   3</span></span><br><span class="line">        <span class="comment">// prefix   1   5   7   12  15</span></span><br><span class="line">        <span class="comment">//  1</span></span><br><span class="line">        <span class="comment">// (5-1)</span></span><br><span class="line">        <span class="comment">// (7-5) + 7</span></span><br><span class="line">        <span class="comment">// (12-7)+(12-1) </span></span><br><span class="line">        <span class="comment">// (15-12)+(15-5) + 15</span></span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) arr[i]+=arr[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =i<span class="number">-1</span>;j&gt;<span class="number">-1</span>;j-=<span class="number">2</span>)&#123;</span><br><span class="line">                ret+=arr[i]-arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// odd</span></span><br><span class="line">            <span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">1</span>) ret+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-4-math"><a href="#option-4-math" class="headerlink" title="option 4 - *math"></a>option 4 - *math</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n^3)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3 - prefix<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 4 - math<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>15. 3Sum</title>
    <url>/blog/2023/02/12/leetcode/15_3Sum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/3sum/">problem</a></h2><p>從陣列中，找出所有三個元素總和為零。</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol>
<li>先對原陣列進行排序</li>
<li>固定一個數<code>i</code>，再利用雙索引 <code>j</code> <code>k</code> 找出總和為 <code>0-target[i]</code></li>
<li>找到後加左索引<code>j</code> 向右移一位，<code>k</code> 向左移一位。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;++i)&#123;</span><br><span class="line">            <span class="comment">// 確保不會重複</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> l = i+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="type">int</span> target = -nums[i];</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> sum = nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(&#123;nums[i], nums[l], nums[r]&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[l] == nums[l+<span class="number">1</span>]) l++;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[r] == nums[r<span class="number">-1</span>]) r--;</span><br><span class="line">                    l++;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target) l++;</span><br><span class="line">                <span class="keyword">else</span> r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>160. Intersection of Two Linked Lists</title>
    <url>/blog/2023/02/12/leetcode/160_IntersectionofTwoLinkedLists/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode *a = headA, *b = headB;</span><br><span class="line">        <span class="keyword">while</span>(a!=b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a) a= headB;</span><br><span class="line">            <span class="keyword">else</span> a= a-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(!b) b = headA;</span><br><span class="line">            <span class="keyword">else</span> b=b-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 是否有相同終點以判斷是否有交集</span></span><br><span class="line">        <span class="comment">// 2. 如果有交集，讓長串列先走幾步</span></span><br><span class="line">        <span class="type">int</span> lenA = <span class="number">0</span>, lenB= <span class="number">0</span>;</span><br><span class="line">        ListNode *a = headA, *b = headB;</span><br><span class="line">        <span class="keyword">while</span>(a)&#123;</span><br><span class="line">            a=a-&gt;next;</span><br><span class="line">            lenA++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(b)&#123;</span><br><span class="line">            b=b-&gt;next;</span><br><span class="line">            lenB++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// no cycle</span></span><br><span class="line">        <span class="keyword">if</span>(a!=b) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *fast = (lenA&gt;=lenB)?headA:headB;</span><br><span class="line">        ListNode *slow = (lenA&lt;lenB)?headA:headB;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(lenA-lenB);</span><br><span class="line">        <span class="keyword">while</span>(n--) fast = fast-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast!=slow)&#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>162. Find Peak Element</title>
    <url>/blog/2023/02/12/leetcode/162_FindPeakElement/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-peak-element/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// brute force</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || nums[<span class="number">0</span>]&gt;nums[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">back</span>() &gt; nums[n<span class="number">-2</span>]) <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i<span class="number">-1</span>] &amp;&amp; nums[i] &gt; nums[i+<span class="number">1</span>]) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 *Binary Search"></a>option 2 *Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l= <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt; nums[mid+<span class="number">1</span>]) l =mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1</li>
<li>time complexity <code>O(n)</code> <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>165. Compare Version Numbers</title>
    <url>/blog/2023/02/12/leetcode/165_CompareVersionNumbers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/compare-version-numbers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">split</span><span class="params">(string version)</span></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ver;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;version.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(version[l] ==<span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ver.<span class="built_in">push_back</span>(ret);</span><br><span class="line">                ret=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret = <span class="number">10</span>*ret + (version[l]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            l++;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret!=<span class="number">0</span>)  ver.<span class="built_in">push_back</span>(ret);</span><br><span class="line">        <span class="keyword">return</span> ver;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">compareVersion</span><span class="params">(string version1, string version2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ver1 = <span class="built_in">split</span>(version1), ver2 = <span class="built_in">split</span>(version2);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">0</span>, n = ver1.<span class="built_in">size</span>(), m = ver2.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//&quot;01&quot;</span></span><br><span class="line">        <span class="comment">// &quot;1&quot;</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ver1[l] == ver2[r])&#123;</span><br><span class="line">                l++;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ver1[l] &gt; ver2[r]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ver1[l] &lt; ver2[r]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n )&#123;</span><br><span class="line">            <span class="keyword">if</span>(ver1[l] &gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ver2[r] &gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>166. Fraction to Recurring Decimal</title>
    <url>/blog/2023/02/12/leetcode/166_FractiontoRecurringDecimal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/fraction-to-recurring-decimal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">fractionToDecimal</span><span class="params">(<span class="type">int</span> numerator, <span class="type">int</span> denominator)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s1 = numerator &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> s2 = denominator &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> num = <span class="built_in">abs</span>( (<span class="type">long</span> <span class="type">long</span>)numerator );</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> den = <span class="built_in">abs</span>( (<span class="type">long</span> <span class="type">long</span>)denominator );</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> out = num / den;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> rem = num % den;</span><br><span class="line">        unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        string ret = <span class="built_in">to_string</span>(out);</span><br><span class="line">        <span class="keyword">if</span> (s1 * s2 == <span class="number">-1</span> &amp;&amp; (out &gt; <span class="number">0</span> || rem &gt; <span class="number">0</span>)) ret = <span class="string">&quot;-&quot;</span>+ret;</span><br><span class="line">        <span class="keyword">if</span>(rem ==<span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        ret+=<span class="string">&quot;.&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(rem!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">find</span>(rem) !=m.<span class="built_in">end</span>())&#123;</span><br><span class="line">                s.<span class="built_in">insert</span>(m[rem],<span class="string">&quot;(&quot;</span>);</span><br><span class="line">                s+=<span class="string">&quot;)&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> ret+s;</span><br><span class="line">            &#125;</span><br><span class="line">            m[rem] = pos;</span><br><span class="line">            cout&lt;&lt;rem&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">            s+= <span class="built_in">to_string</span>((rem*<span class="number">10</span>) / den);</span><br><span class="line">            rem = (rem*<span class="number">10</span>) % den;</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret+s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>1672. Richest Customer Wealth</title>
    <url>/blog/2023/02/12/leetcode/1672_RichestCustomerWealth/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/richest-customer-wealth/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumWealth</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>, n= accounts.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> a:accounts[i]) temp+=a;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1678. Goal Parser Interpretation</title>
    <url>/blog/2023/02/12/leetcode/1678_GoalParserInterpretation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/goal-parser-interpretation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">interpret</span><span class="params">(string command)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">-1</span>, r = <span class="number">-1</span> ,  n =command.<span class="built_in">size</span>();</span><br><span class="line">        string str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(command[i] == <span class="string">&#x27;G&#x27;</span>) str+=<span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(command[i] == <span class="string">&#x27;(&#x27;</span>) l =i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(command[i] ==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-l==<span class="number">1</span>) str+=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> str+=<span class="string">&quot;al&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1679. Max Number of K-Sum Pairs</title>
    <url>/blog/2023/02/12/leetcode/1679_MaxNumberofK-SumPairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/max-number-of-k-sum-pairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]+nums[r] == k)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] +nums[r] &lt; k) l++;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-hash-table"><a href="#option-2-hash-table" class="headerlink" title="option 2 - hash table"></a>option 2 - hash table</h4><ul>
<li>Two pass<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) mp[n]++;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[k-n]&gt;<span class="number">0</span> &amp;&amp; mp[n]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k-n == n &amp;&amp; mp[n]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    mp[k-n]--;</span><br><span class="line">                    mp[n]--;    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(k-n!=n)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    mp[k-n]--;</span><br><span class="line">                    mp[n]--;    </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>One Pass<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[k-n]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                mp[k-n]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mp[n]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>option 1 <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>167. Two Sum II - Input Array Is Sorted</title>
    <url>/blog/2023/02/12/leetcode/167_TwoSumII-InputArrayIsSorted/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = numbers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[l] + numbers[r] == target) <span class="keyword">return</span> &#123;l+<span class="number">1</span>, r+<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[l] + numbers[r] &lt; target) l++;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - Binary Search"></a>option 2 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// use only constant extra space</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;  ret;</span><br><span class="line">        <span class="type">int</span> n = numbers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> l =i+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// Two pointers</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l+ (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(numbers[i] + numbers[mid] == target) <span class="keyword">return</span> &#123;i+<span class="number">1</span>, mid+<span class="number">1</span>&#125;;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(numbers[i] + numbers[mid] &lt; target)  l= mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>times complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>times complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>168. Excel Sheet Column Title</title>
    <url>/blog/2023/02/12/leetcode/168_ExcelSheetColumnTitle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/excel-sheet-column-title/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convertToTitle</span><span class="params">(<span class="type">int</span> columnNumber)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">while</span>(columnNumber)&#123;</span><br><span class="line">            <span class="type">int</span> mod = (--columnNumber)%<span class="number">26</span>;</span><br><span class="line">            <span class="type">char</span> c = mod+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            ret = c+ret;</span><br><span class="line">            columnNumber/=<span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>1695. Maximum Erasure Value</title>
    <url>/blog/2023/02/12/leetcode/1695_MaximumErasureValue/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-erasure-value/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumUniqueSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// slide window</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; window, need;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>,n = nums.<span class="built_in">size</span>(), len = <span class="number">0</span>, window_total =  <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">int</span> c = nums[r++];</span><br><span class="line">            <span class="keyword">if</span>(window[c]==<span class="number">0</span>) len++;</span><br><span class="line">            window[c]++;</span><br><span class="line">            </span><br><span class="line">            window_total+=c;</span><br><span class="line">            <span class="keyword">while</span>(window[c]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> d = nums[l++];</span><br><span class="line">                window[d]--;</span><br><span class="line">                <span class="keyword">if</span>(window[d] == <span class="number">0</span>) len--;</span><br><span class="line">                window_total-=d;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, window_total);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
        <tag>sliding window</tag>
      </tags>
  </entry>
  <entry>
    <title>169. Majority Element</title>
    <url>/blog/2023/02/12/leetcode/169_MajorityElement/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/majority-element/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>count sorting ，memory 會爆掉</p>
<h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 會超過n/2 次</span></span><br><span class="line">        <span class="comment">// sorting 完取中間</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[(nums.<span class="built_in">size</span>()<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-hash-table"><a href="#option-2-hash-table" class="headerlink" title="option 2 - hash table"></a>option 2 - hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) mp[n]++;</span><br><span class="line">        <span class="type">int</span> freq = <span class="number">0</span>, ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.second&gt;freq)&#123;</span><br><span class="line">                ret = m.first;</span><br><span class="line">                freq = m.second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-vote"><a href="#option-3-vote" class="headerlink" title="option 3 - vote"></a>option 3 - vote</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>,candidate = nums[<span class="number">0</span>], n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == candidate) count++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 重新選出新的候選數字</span></span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                    candidate = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - sorting<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>sort complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - hash table<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3 - vote<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>16. 3Sum Closest</title>
    <url>/blog/2023/02/12/leetcode/16_3SumClosest/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/3sum-closest/submissions/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cand = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ;i&lt;n<span class="number">-2</span>;++i)&#123;</span><br><span class="line">            <span class="type">int</span> l = i+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> sum = nums[i] + nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span>(sum == target) <span class="keyword">return</span> target;</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; target) l++;</span><br><span class="line">                <span class="keyword">else</span> r--;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(cand - target) &gt; <span class="built_in">abs</span>(sum - target)) cand = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cand;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1704. Determine if String Halves Are Alike</title>
    <url>/blog/2023/02/12/leetcode/1704_DetermineifStringHalvesAreAlike/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/determine-if-string-halves-are-alike/">problem</a></h2><h2 id="sloution"><a href="#sloution" class="headerlink" title="sloution"></a>sloution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isVowels</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (c==<span class="string">&#x27;a&#x27;</span> || c==<span class="string">&#x27;e&#x27;</span> || c==<span class="string">&#x27;i&#x27;</span> || c==<span class="string">&#x27;o&#x27;</span> || c==<span class="string">&#x27;u&#x27;</span> || c==<span class="string">&#x27;A&#x27;</span> || c==<span class="string">&#x27;E&#x27;</span> || c==<span class="string">&#x27;I&#x27;</span> || c==<span class="string">&#x27;O&#x27;</span> || c==<span class="string">&#x27;U&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">halvesAreAlike</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a =<span class="number">0</span>, b=<span class="number">0</span> , n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;++i)&#123;</span><br><span class="line">            a+=<span class="built_in">isVowels</span>(s[i]);</span><br><span class="line">            b+=<span class="built_in">isVowels</span>(s[n<span class="number">-1</span>-i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>171. Excel Sheet Column Number</title>
    <url>/blog/2023/02/12/leetcode/171_ExcelSheetColumnNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/excel-sheet-column-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">titleToNumber</span><span class="params">(string columnTitle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, n = columnTitle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ret = <span class="number">26</span>*ret ;</span><br><span class="line">            ret+=columnTitle[i]-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1721. Swapping Nodes in a Linked List</title>
    <url>/blog/2023/02/12/leetcode/1721_SwappingNodesinaLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/swapping-nodes-in-a-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-複寫值"><a href="#option-1-複寫值" class="headerlink" title="option 1 - 複寫值"></a>option 1 - 複寫值</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapNodes</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode *p = head;p;p=p-&gt;next) size++;</span><br><span class="line">        <span class="type">int</span> a = k, b = size-k;</span><br><span class="line">        ListNode *l = head, *r = head;</span><br><span class="line">        <span class="keyword">while</span>(--a) l=l-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(b--) r = r-&gt;next;</span><br><span class="line">        <span class="type">int</span> temp = l-&gt;val;</span><br><span class="line">        l-&gt;val = r-&gt;val;</span><br><span class="line">        r-&gt;val = temp;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-交換節點"><a href="#option-2-交換節點" class="headerlink" title="option 2 - 交換節點"></a>option 2 - 交換節點</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapNodes</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode *p = head;p;p=p-&gt;next) size++;</span><br><span class="line">        <span class="type">int</span> a = k, b = size-k;</span><br><span class="line">        ListNode *l = head , *r = head ;</span><br><span class="line">        ListNode *pl = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *pr = pl, *ans = pl; </span><br><span class="line">        pl-&gt;next = head;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="type">int</span> la = <span class="built_in">min</span>(a, b);</span><br><span class="line">        <span class="type">int</span> lb = <span class="built_in">max</span>(a,b);</span><br><span class="line">        <span class="keyword">while</span>(la--) &#123;</span><br><span class="line">            pl = l;</span><br><span class="line">            l=l-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(lb--) &#123;</span><br><span class="line">            pr = r;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// edge case</span></span><br><span class="line">        <span class="keyword">if</span>(l-&gt;next ==r )&#123;</span><br><span class="line">            <span class="comment">// pr == l</span></span><br><span class="line">            l-&gt;next = r-&gt;next;</span><br><span class="line">            pl-&gt;next = r;</span><br><span class="line">            r-&gt;next = l;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> ans-&gt;next;    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode *rlast = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(r-&gt;next) rlast = r-&gt;next;</span><br><span class="line">        r-&gt;next= l-&gt;next;</span><br><span class="line">        l-&gt;next = rlast;</span><br><span class="line">        pl-&gt;next = r;</span><br><span class="line">        pr-&gt;next = l;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>172. Factorial Trailing Zeroes</title>
    <url>/blog/2023/02/12/leetcode/172_FactorialTrailingZeroes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/factorial-trailing-zeroes/">problem</a></h2><p>給定一數字n，返回n!有多少個0結尾</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 給定一數字n，返回n!有多少個0結尾</span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7       8       9       10  11  12  13  14  15  16  17  ... 25</span></span><br><span class="line">        <span class="comment">//  1   1   2   6   24  120 720 5040    40320   362880  3628800     </span></span><br><span class="line">        <span class="comment">//  0   0   0   0   0   1   1   1       1       1       2   2   2   2   2   3   3   3       6</span></span><br><span class="line">        <span class="comment">// 找出陣列[0-n] 中數字除以5的總和</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">5</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> n/<span class="number">5</span> + <span class="built_in">trailingZeroes</span>(n/<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="option-2-iterative"><a href="#option-2-iterative" class="headerlink" title="option 2 - iterative"></a>option 2 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 給定一數字n，返回n!有多少個0結尾</span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7       8       9       10  11  12  13  14  15  16  17  ... 25</span></span><br><span class="line">        <span class="comment">//  1   1   2   6   24  120 720 5040    40320   362880  3628800     </span></span><br><span class="line">        <span class="comment">//  0   0   0   0   0   1   1   1       1       1       2   2   2   2   2   3   3   3       6</span></span><br><span class="line">        <span class="comment">// 找出陣列[0-n] 中數字除以5的總和</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> d = n;d&gt;<span class="number">4</span> ; d/=<span class="number">5</span>)&#123;</span><br><span class="line">            ret+= d/<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>173. Binary Search Tree Iterator</title>
    <url>/blog/2023/02/12/leetcode/173_BinarySearchTreeIterator/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-search-tree-iterator/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-STL-to-store"><a href="#option-1-STL-to-store" class="headerlink" title="option 1 - STL to store"></a>option 1 - STL to store</h4><p>事先先拜訪過各節點並存下來，再用一個指標指向當前位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> cur =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSTIterator</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">preorder</span>(root);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left);</span><br><span class="line">        nums.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[cur++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cur!=nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-stack"><a href="#option-2-stack" class="headerlink" title="option 2 - stack"></a>option 2 - stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;TreeNode *&gt;sta;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSTIterator</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">while</span>(root)&#123;</span><br><span class="line">            sta.<span class="built_in">push</span>(root);</span><br><span class="line">            root= root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeNode * p = sta.<span class="built_in">top</span>();</span><br><span class="line">        sta.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ret = p-&gt;val;</span><br><span class="line">        <span class="comment">// 以p 為樹根 左半部已經拜訪完畢</span></span><br><span class="line">        <span class="comment">// 從右子樹找下一個拜訪的點，並放入stack</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right)&#123;</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(p)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(p);</span><br><span class="line">                p=p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !sta.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(h)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>174. Dungeon Game</title>
    <url>/blog/2023/02/12/leetcode/174_DungeonGame/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/dungeon-game/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>逆向的dp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculateMinimumHP</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = dungeon.<span class="built_in">size</span>(), m= dungeon[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>));</span><br><span class="line">        dp[n<span class="number">-1</span>][m<span class="number">-1</span>] = <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">1</span>-dungeon[n<span class="number">-1</span>][m<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;--i) dp[i][m<span class="number">-1</span>] = <span class="built_in">max</span>(<span class="number">1</span>, dp[i+<span class="number">1</span>][m<span class="number">-1</span>] - dungeon[i][m<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m<span class="number">-2</span>;j&gt;<span class="number">-1</span> ;j--) dp[n<span class="number">-1</span>][j] = <span class="built_in">max</span>(<span class="number">1</span>, dp[n<span class="number">-1</span>][j+<span class="number">1</span>] - dungeon[n<span class="number">-1</span>][j]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=m<span class="number">-2</span>;j&gt;<span class="number">-1</span>;j--)&#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(</span><br><span class="line">                    <span class="built_in">max</span>(<span class="number">1</span>,dp[i+<span class="number">1</span>][j] - dungeon[i][j]),</span><br><span class="line">                    <span class="built_in">max</span>(<span class="number">1</span>, dp[i][j+<span class="number">1</span>] - dungeon[i][j])</span><br><span class="line">                        );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>175. Combine Two Tables</title>
    <url>/blog/2023/02/12/leetcode/175_CombineTwoTables/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/combine-two-tables/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>JOIN</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.firstName, a.lastName, b.city, b.state</span><br><span class="line"><span class="keyword">from</span> Person <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">ON</span> a.personId <span class="operator">=</span> b.personId</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>1768. Merge Strings Alternately</title>
    <url>/blog/2023/02/12/leetcode/1768_MergeStringsAlternately/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-strings-alternately/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">mergeAlternately</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = word1.<span class="built_in">size</span>(), m = word2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        string str =<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// merge</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            str+=word1[l++];</span><br><span class="line">            str+=word2[r++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n) str+=word1[l++];</span><br><span class="line">        <span class="keyword">while</span>(r&lt;m) str+=word2[r++];</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n+m)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1779. Find Nearest Point That Has the Same X or Y Coordinate</title>
    <url>/blog/2023/02/12/leetcode/1779_Find%20NearestPointThatHastheSameXorYCoordinate/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nearestValidPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>(), mn = INT_MAX, ans = <span class="number">-1</span>, manhattan;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span>(points[i][<span class="number">0</span>] == x || points[i][<span class="number">1</span>] == y)&#123;</span><br><span class="line">                manhattan = <span class="built_in">abs</span>(x - points[i][<span class="number">0</span>]) + <span class="built_in">abs</span>(y - points[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(manhattan &lt; mn)</span><br><span class="line">                    mn = manhattan, ans = i;            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1790. Check if One String Swap Can Make Strings Equal</title>
    <url>/blog/2023/02/12/leetcode/1790_CheckifOneStringSwapCanMakeStringsEqual/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">areAlmostEqual</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s1.<span class="built_in">size</span>(), count = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i]!=s2[i]) count++;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            ret[s1[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            ret[s2[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret != <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>179. Largest Number</title>
    <url>/blog/2023/02/12/leetcode/179_LargestNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/largest-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>bucket sort</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">largestNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bucket sort</span></span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">bucket</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums)&#123;</span><br><span class="line">            string s = <span class="built_in">to_string</span>(n);</span><br><span class="line">            <span class="type">int</span> c = s[<span class="number">0</span>] -<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            bucket[c].<span class="built_in">push_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">            <span class="built_in">sort</span>(bucket[i].<span class="built_in">begin</span>(), bucket[i].<span class="built_in">end</span>(), [](string a, string b)&#123;</span><br><span class="line">               <span class="keyword">return</span> a+b &gt; b+a; </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(string v:bucket[i]) ret += v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;ret.<span class="built_in">size</span>() &amp;&amp; ret[l]==<span class="string">&#x27;0&#x27;</span>) l++;</span><br><span class="line">        string ans = ret.<span class="built_in">substr</span>(l);</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="built_in">empty</span>()?<span class="string">&quot;0&quot;</span>:ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>17. Letter Combinations of a Phone Number</title>
    <url>/blog/2023/02/12/leetcode/17_LetterCombinationsofaPhoneNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, string&gt; dict = &#123;</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="string">&quot;abc&quot;</span>&#125;,&#123;<span class="number">3</span>,<span class="string">&quot;def&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="string">&quot;ghi&quot;</span>&#125;,&#123;<span class="number">5</span>,<span class="string">&quot;jkl&quot;</span>&#125;,&#123;<span class="number">6</span>,<span class="string">&quot;mno&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>,<span class="string">&quot;pqrs&quot;</span>&#125;,&#123;<span class="number">8</span>,<span class="string">&quot;tuv&quot;</span>&#125;,&#123;<span class="number">9</span>,<span class="string">&quot;wxyz&quot;</span>&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(string digits, <span class="type">int</span> i, string &amp; path)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(i == digits.<span class="built_in">size</span>() )&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c: dict[digits[i]-<span class="string">&#x27;0&#x27;</span>] )&#123;</span><br><span class="line">            path+=c;</span><br><span class="line">            <span class="built_in">traverse</span>(digits, i+<span class="number">1</span>, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.<span class="built_in">empty</span>()) <span class="keyword">return</span> ret;</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">traverse</span>(digits, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, string&gt; dict = &#123;</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="string">&quot;abc&quot;</span>&#125;,&#123;<span class="number">3</span>,<span class="string">&quot;def&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="string">&quot;ghi&quot;</span>&#125;,&#123;<span class="number">5</span>,<span class="string">&quot;jkl&quot;</span>&#125;,&#123;<span class="number">6</span>,<span class="string">&quot;mno&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>,<span class="string">&quot;pqrs&quot;</span>&#125;,&#123;<span class="number">8</span>,<span class="string">&quot;tuv&quot;</span>&#125;,&#123;<span class="number">9</span>,<span class="string">&quot;wxyz&quot;</span>&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(digits.<span class="built_in">empty</span>()) <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        queue&lt;string&gt; q;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:dict[digits[k]-<span class="string">&#x27;0&#x27;</span>]) &#123;</span><br><span class="line">            string temp ;</span><br><span class="line">            temp.<span class="built_in">push_back</span>(c);</span><br><span class="line">            q.<span class="built_in">push</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; k&lt;digits.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size ; ++i)&#123;</span><br><span class="line">                string p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();   </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c:dict[digits[k]-<span class="string">&#x27;0&#x27;</span>])&#123;</span><br><span class="line">                    string temp = p;</span><br><span class="line">                    temp.<span class="built_in">push_back</span>(c);</span><br><span class="line">                    q.<span class="built_in">push</span>(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            </span><br><span class="line">            string cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>1822. Sign of the Product of an Array</title>
    <url>/blog/2023/02/12/leetcode/1822_SignoftheProductofanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sign-of-the-product-of-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arraySign</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="comment">// avoid overflow</span></span><br><span class="line">            <span class="keyword">if</span>(n&lt;<span class="number">0</span>) ret*=(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1823. Find the Winner of the Circular Game</title>
    <url>/blog/2023/02/12/leetcode/1823_FindtheWinneroftheCircularGame/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-winner-of-the-circular-game/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-queue"><a href="#option-1-queue" class="headerlink" title="option 1 - queue"></a>option 1 - queue</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTheWinner</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> t = k;</span><br><span class="line">            <span class="keyword">while</span>(--t)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-vector"><a href="#option-2-vector" class="headerlink" title="option 2 - vector"></a>option 2 - vector</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTheWinner</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) vec[i<span class="number">-1</span>]=i;</span><br><span class="line">        <span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(vec.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> t = (offset+ k - <span class="number">1</span>)%vec.<span class="built_in">size</span>() ;</span><br><span class="line">            vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>() + t);</span><br><span class="line">            offset = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vec.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title>183. Customers Who Never Order</title>
    <url>/blog/2023/02/12/leetcode/183_CustomersWhoNeverOrder/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/customers-who-never-order/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>sub-query</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">from</span> Customers <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> a.id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> customerId</span><br><span class="line">    <span class="keyword">from</span> Orders</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>1869. Longer Contiguous Segments of Ones than Zeros</title>
    <url>/blog/2023/02/12/leetcode/1869_LongerContiguousSegmentsofOnesthanZeros/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longer-contiguous-segments-of-ones-than-zeros/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkZeroOnes</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ones = <span class="number">0</span>, zeros = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count0 = <span class="number">0</span>, count1= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                count1++;</span><br><span class="line">                </span><br><span class="line">                zeros = <span class="built_in">max</span>(zeros, count0);</span><br><span class="line">                count0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count0++;</span><br><span class="line">                </span><br><span class="line">                ones = <span class="built_in">max</span>(ones, count1);</span><br><span class="line">                count1 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ones = <span class="built_in">max</span>(ones, count1);</span><br><span class="line">        zeros = <span class="built_in">max</span>(zeros, count0);</span><br><span class="line">        <span class="keyword">return</span> ones&gt;zeros?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>1870. Minimum Speed to Arrive on Time</title>
    <url>/blog/2023/02/12/leetcode/1870_MinimumSpeedtoArriveonTime/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-speed-to-arrive-on-time/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cost</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; dist, <span class="type">int</span> speed)</span></span>&#123;</span><br><span class="line">        <span class="type">double</span> hours = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;dist.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == dist.<span class="built_in">size</span>()<span class="number">-1</span>) hours+= dist[i]*<span class="number">1.0</span>/speed;</span><br><span class="line">            <span class="keyword">else</span> hours+=<span class="built_in">ceil</span>((<span class="type">double</span>)dist[i]/speed);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hours;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSpeedOnTime</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; dist, <span class="type">double</span> hour)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1e+7</span>;</span><br><span class="line">        <span class="keyword">if</span>(hour &lt;= dist.<span class="built_in">size</span>()<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">double</span> hours = <span class="built_in">cost</span>(dist, mid);</span><br><span class="line">            <span class="keyword">if</span>(hours &gt; hour) l = mid  +<span class="number">1</span> ;</span><br><span class="line">            <span class="keyword">else</span> r = mid ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>187. Repeated DNA Sequences</title>
    <url>/blog/2023/02/12/leetcode/187_RepeatedDNASequences/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/repeated-dna-sequences/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-hash"><a href="#option-1-hash" class="headerlink" title="option 1 - hash"></a>option 1 - hash</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; memo;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&lt;n;++i)&#123;</span><br><span class="line">            string cur = s.<span class="built_in">substr</span>(i<span class="number">-9</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(memo[cur] ==<span class="number">1</span> )&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            memo[cur]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-sliding-window"><a href="#option-2-sliding-window" class="headerlink" title="option 2 - sliding window"></a>option 2 - sliding window</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// slide window</span></span><br><span class="line">        string window;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> c = s[r++];</span><br><span class="line">            <span class="comment">// window[c]++;</span></span><br><span class="line">            <span class="comment">// window.append(c);</span></span><br><span class="line">            window +=c;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(r-l&gt;<span class="number">10</span>)&#123;</span><br><span class="line">                <span class="type">char</span> d = s[l++];</span><br><span class="line">                <span class="comment">// window[d]--;</span></span><br><span class="line">                window.<span class="built_in">erase</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ret[s.substr(l,r-l)]++;</span></span><br><span class="line">            ret[window]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = ret.<span class="built_in">begin</span>() ; it!=ret.<span class="built_in">end</span>() ;++it)&#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;it-&gt;first&lt;&lt;&quot; &quot;&lt;&lt;it-&gt;second&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second &gt; <span class="number">1</span>) ans.<span class="built_in">push_back</span>(it-&gt;first);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Bit-Manipulation"><a href="#option-3-Bit-Manipulation" class="headerlink" title="option 3 - Bit Manipulation"></a>option 3 - Bit Manipulation</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;<span class="number">10</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; dict = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="number">1</span>&#125;,&#123;<span class="string">&#x27;G&#x27;</span>,<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;T&#x27;</span>,<span class="number">3</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 20 = 10 * 2 bit(0,1,2,3)</span></span><br><span class="line">        <span class="type">int</span> mask = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>)<span class="number">-1</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> hash = <span class="number">0</span>;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; added, temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            hash = (hash&lt;&lt;<span class="number">2</span>) + dict[s[i]];</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">9</span>)&#123;</span><br><span class="line">                hash &amp;= mask;</span><br><span class="line">                <span class="keyword">if</span>(temp.<span class="built_in">count</span>(hash) &amp;&amp; !added.<span class="built_in">count</span>(hash))&#123;</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i<span class="number">-9</span>, <span class="number">10</span>));</span><br><span class="line">                    added.<span class="built_in">insert</span>(hash);</span><br><span class="line">                &#125;</span><br><span class="line">                temp.<span class="built_in">insert</span>(hash);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>hash table</tag>
        <tag>sliding window</tag>
      </tags>
  </entry>
  <entry>
    <title>1886. Determine Whether Matrix Can Be Obtained By Rotation</title>
    <url>/blog/2023/02/12/leetcode/1886_DetermineWhetherMatrixCanBeObtainedByRotation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findRotation</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t =<span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(mat == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="comment">// rotate one time</span></span><br><span class="line">            <span class="built_in">reverse</span>(mat.<span class="built_in">begin</span>(), mat.<span class="built_in">end</span>());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                    <span class="built_in">swap</span>(mat[i][j], mat[j][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mat == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>188. Best Time to Buy and Sell Stock IV</title>
    <url>/blog/2023/02/12/leetcode/188_BestTimetoBuyandSellStockIV/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;prices)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1, temp - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (k &gt; n / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">maxProfit</span>(prices);</span><br><span class="line">        <span class="comment">// 因為一次買入和賣出，至少需要兩天，所以k應該不超過n/2。如果超過就相當於沒有約束，相當於k=+infinity</span></span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(k+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=k;t&gt;=<span class="number">1</span>;t--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][t][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    dp[i][t][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][t][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][t][<span class="number">0</span>], dp[i<span class="number">-1</span>][t][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                dp[i][t][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][t][<span class="number">1</span>], dp[i<span class="number">-1</span>][t<span class="number">-1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// https://www.programcreek.com/2014/03/leetcode-best-time-to-buy-and-sell-stock-iv-java/</span></span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() &lt; <span class="number">2</span> || k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n= prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">local</span> <span class="params">(k+<span class="number">1</span>,<span class="number">0</span>)</span>, <span class="title">global</span><span class="params">(k+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> diff = prices[i+<span class="number">1</span>] - prices[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = k;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">                local[j] = <span class="built_in">max</span>(global[j<span class="number">-1</span>]+ <span class="built_in">max</span>(diff, <span class="number">0</span>), local[j]+diff);</span><br><span class="line">                global[j] = <span class="built_in">max</span>(local[j], global[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> global[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1894. Find the Student that Will Replace the Chalk</title>
    <url>/blog/2023/02/12/leetcode/1894_FindtheStudentthatWillReplacetheChalk/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>brute force , TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">chalkReplacer</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; chalk, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// brute force , TLE</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, size = chalk.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(k - chalk[i%size] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            k -= chalk[i%size];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i%size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1-math-to-prune"><a href="#option-1-math-to-prune" class="headerlink" title="option 1 - math to prune"></a>option 1 - math to prune</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">chalkReplacer</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; chalk, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// prune , save time</span></span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>, n= chalk.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            total += chalk[i];</span><br><span class="line">            <span class="keyword">if</span>(k-total&lt;<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> times = k/total;</span><br><span class="line">        k-= times*total;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k-chalk[i]&lt;<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">            k-=chalk[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - Binary Search"></a>option 2 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">chalkReplacer</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; chalk, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// prune , save time</span></span><br><span class="line">        <span class="comment">// prefix</span></span><br><span class="line">        <span class="type">int</span> n = chalk.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            total += chalk[i];</span><br><span class="line">            prefix[i]  =total;</span><br><span class="line">            <span class="keyword">if</span>(k-total&lt;<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// use Binary Search which location k can insert</span></span><br><span class="line">        <span class="type">int</span> times = k/total;</span><br><span class="line">        <span class="keyword">if</span>(k%total == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        k-= times*total;</span><br><span class="line">        <span class="comment">//  3   7   8   10</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span> , r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(prefix[mid] == k) <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(prefix[mid] &lt; k) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>1898. Maximum Number of Removable Characters</title>
    <url>/blog/2023/02/12/leetcode/1898_MaximumNumberofRemovableCharacters/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-number-of-removable-characters/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>native , TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubseq</span><span class="params">(string s, string p)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m=p.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[j] == s[i]) j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j==m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumRemovals</span><span class="params">(string s, string p, vector&lt;<span class="type">int</span>&gt;&amp; removable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// native</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span> , n = removable.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            s[removable[i]] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isSubseq</span>(s,p)) ret= i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubseq</span><span class="params">(string s, string p)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m=p.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[j] == s[i]) j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j==m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">helper</span><span class="params">(string s, string p, vector&lt;<span class="type">int</span>&gt; &amp; removable, <span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=mid;++i)&#123;</span><br><span class="line">            s[removable[i]] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSubseq</span>(s,p);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumRemovals</span><span class="params">(string s, string p, vector&lt;<span class="type">int</span>&gt;&amp; removable)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span> , r = removable.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">helper</span>(s, p, removable, mid) ) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>189. Rotate Array</title>
    <url>/blog/2023/02/12/leetcode/189_RotateArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rotate-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-mod"><a href="#option-1-mod" class="headerlink" title="option 1  - mod"></a>option 1  - mod</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// copy vector</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp = nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            nums[i] = temp[(n-k+i)%n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reverse"><a href="#option-2-reverse" class="headerlink" title="option 2 - *reverse"></a>option 2 - *reverse</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        k%=n;</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">begin</span>()+(n-k) );</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+(n-k), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="option-3-bubble-rotate"><a href="#option-3-bubble-rotate" class="headerlink" title="option 3 - bubble rotate"></a>option 3 - bubble rotate</h4><ul>
<li>TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// bubble rotate</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = nums.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[j], nums[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>option 1  <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n*k)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>18. 4Sum</title>
    <url>/blog/2023/02/12/leetcode/18_4Sum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;  ret;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-3</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] )<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n<span class="number">-2</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> tar = target - nums[i] - nums[j];</span><br><span class="line">                <span class="type">int</span> l = j+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                    <span class="type">int</span> sum = nums[l] + nums[r];</span><br><span class="line">                    <span class="keyword">if</span>(sum ==tar)&#123;</span><br><span class="line">                        ret.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[l], nums[r]&#125;);</span><br><span class="line">                        <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[r] == nums[r<span class="number">-1</span>]) r--;</span><br><span class="line">                        <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[l] == nums[l+<span class="number">1</span>]) l++;</span><br><span class="line">                        l++;</span><br><span class="line">                        r--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt;tar) l++;</span><br><span class="line">                    <span class="keyword">else</span> r--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^3)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1905. Count Sub Islands</title>
    <url>/blog/2023/02/12/leetcode/1905_CountSubIslands/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-sub-islands/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt; <span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> ||grid[i][j] == <span class="number">0</span>  ) <span class="keyword">return</span>; </span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(grid,i<span class="number">-1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid,  i+<span class="number">1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i,j<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i,j+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid1, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid1.<span class="built_in">size</span>(), m = grid1[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="comment">// 如果grid2 的島嶼但不是grid1的島嶼，淹沒</span></span><br><span class="line">                <span class="comment">// 這個島於肯定不是子島嶼，淹沒</span></span><br><span class="line">                <span class="keyword">if</span>(grid1[i][j] == <span class="number">0</span> &amp;&amp; grid2[i][j] == <span class="number">1</span>) <span class="built_in">dfs</span>(grid2, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid2[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="built_in">dfs</span>(grid2, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>190. Reverse Bits</title>
    <url>/blog/2023/02/12/leetcode/190_ReverseBits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-bits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用 <code>&gt;&gt;i</code> 取得第i位元</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">uint32_t</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line">            ret&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            ret += (n&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>191. Number of 1 Bits</title>
    <url>/blog/2023/02/12/leetcode/191_Numberof1Bits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-1-bits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用 <code>n&amp;(n-1)</code> 找 n 在二進位表示中有多少個1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ret++;</span><br><span class="line">            n &amp;=(n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>1920. Build Array from Permutation</title>
    <url>/blog/2023/02/12/leetcode/1920_BuildArrayfromPermutation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/build-array-from-permutation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">buildArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(nums[nums[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-follow-up-O-1-space"><a href="#option-2-follow-up-O-1-space" class="headerlink" title="option 2 - follow up O(1) space"></a>option 2 - follow up <code>O(1)</code> space</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>198. House Robber</title>
    <url>/blog/2023/02/12/leetcode/198_HouseRobber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/house-robber/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>維護一個dp，<code>max(dp[i-1], dp[i-2]+nums[i])</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   2   3   1</span></span><br><span class="line">        <span class="comment">//  1   2   4   4 </span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i], dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce dp<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   2   3   1</span></span><br><span class="line">        <span class="comment">//  1   2   4   4</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> dp0 = nums[<span class="number">0</span>], dp1 = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> ret = dp1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(dp0 + nums[i], dp1);</span><br><span class="line">            dp0 = dp1;</span><br><span class="line">            dp1 = ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> -&gt; <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1992. Find All Groups of Farmland</title>
    <url>/blog/2023/02/12/leetcode/1992_FindAllGroupsofFarmland/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-all-groups-of-farmland/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> top , left, bottom , right;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; land, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = land.<span class="built_in">size</span>(), m=land[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt; <span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || land[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        land[i][j] = <span class="number">0</span>;</span><br><span class="line">        top = <span class="built_in">min</span>(top, i);</span><br><span class="line">        left = <span class="built_in">min</span>(left, j);</span><br><span class="line">        right = <span class="built_in">max</span>(right,j);</span><br><span class="line">        bottom = <span class="built_in">max</span>(bottom, i);</span><br><span class="line">        <span class="built_in">traverse</span>(land, i+<span class="number">1</span>, j);</span><br><span class="line">        <span class="built_in">traverse</span>(land, i<span class="number">-1</span>, j);</span><br><span class="line">        <span class="built_in">traverse</span>(land, i, j+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">traverse</span>(land, i, j<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findFarmland</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; land) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = land.<span class="built_in">size</span>(), m=land[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(land[i][j] ==<span class="number">1</span>)&#123;</span><br><span class="line">                    top  = i;</span><br><span class="line">                    left = j;</span><br><span class="line">                    right = j;</span><br><span class="line">                    bottom = i;</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">                    <span class="built_in">traverse</span>(land, i, j);</span><br><span class="line">                    ret.<span class="built_in">back</span>().<span class="built_in">push_back</span>(bottom);</span><br><span class="line">                    ret.<span class="built_in">back</span>().<span class="built_in">push_back</span>(right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>199. Binary Tree Right Side View</title>
    <url>/blog/2023/02/12/leetcode/199_BinaryTreeRightSideView/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-right-side-view/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size ; ++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i==size<span class="number">-1</span>) ret.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>19. Remove Nth Node From End of List</title>
    <url>/blog/2023/02/12/leetcode/19_RemoveNthNodeFromEndofList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>因為只允許遍歷一遍 one pass，利用快慢指標</li>
<li>two pointer 不知道串列長度 iterative</li>
</ul>
<p>先將快指標向右移動 <code>n</code> 個單位<br>慢指標與快指標一起向右移動，直到快指標到達串列尾部，慢指標的下一個節點則為要移除的節點，<code>slow-&gt;next = slow-&gt;next-&gt;next;</code> 移除掉。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *fast = slow, *ret = slow;</span><br><span class="line">        slow-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next)&#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>recursive</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">helper</span><span class="params">(ListNode* node, <span class="type">int</span> n , <span class="type">int</span> &amp;cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node)&#123;</span><br><span class="line">            cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;next = <span class="built_in">helper</span>(node-&gt;next, n, cur);</span><br><span class="line">        <span class="keyword">if</span>(++cur == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">helper</span>(head, n, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>1. Two Sum</title>
    <url>/blog/2023/02/12/leetcode/1_TwoSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/two-sum/">problem</a></h2><ul>
<li>一維陣列中找出兩數相加等於target，並返回其索引</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="brute-force"><a href="#brute-force" class="headerlink" title="brute force"></a>brute force</h4><ul>
<li>利用兩個index 分別指向兩個不同的數字，找尋哪兩個數字總和為 target</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="type">int</span> sum = nums[i] + nums[j];</span><br><span class="line">                <span class="keyword">if</span>(target == sum) <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="sorting"><a href="#sorting" class="headerlink" title="sorting"></a>sorting</h4><ul>
<li>先排序，在用雙指標從排序後的陣列找出兩個元素其總和為target，再回原本陣列找出其索引。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr = nums;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n=arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> sum =arr[l] + arr[r] ;</span><br><span class="line">            <span class="keyword">if</span>(sum==target) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target) l++;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret1 = arr[l], ret2 = arr[r];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==ret1 &amp;&amp; ret[<span class="number">0</span>]==<span class="number">-1</span>) ret[<span class="number">0</span>] = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] ==ret2) ret[<span class="number">1</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="hash-table"><a href="#hash-table" class="headerlink" title="hash table"></a>hash table</h4><ul>
<li>利用hash table 紀錄出現過元素及其索引</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(target - nums[i])) <span class="keyword">return</span> &#123;mp[target-nums[i]], i&#125;;</span><br><span class="line">            mp[nums[i]] = i;                  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>brute force<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>sorting<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>hash table <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2006. Count Number of Pairs With Absolute Difference K</title>
    <url>/blog/2023/02/12/leetcode/2006_CountNumberofPairsWithAbsoluteDifferenceK/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countKDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) mp[n]++;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;nums[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(nums[i]+k)) count+= mp[nums[i]]*mp[nums[i]+k];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(i+<span class="number">1</span>&lt;n &amp;&amp; nums[i]==nums[i+<span class="number">1</span>]) i++;</span><br><span class="line">            i++;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>200. Number of Islands</title>
    <url>/blog/2023/02/12/leetcode/200_NumberofIslands/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-islands/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-backtracking"><a href="#option-1-backtracking" class="headerlink" title="option 1 - backtracking"></a>option 1 - backtracking</h4><p>將拜訪過的位置，原地修改其陣列的值為 <code>0</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; &amp; grid,<span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || grid[i][j] ==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i<span class="number">-1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i+<span class="number">1</span>,j);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i,j<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i, j+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(grid, i, j);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 bfs"></a>option 2 bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>(),count= <span class="number">0</span>;</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j&lt;m ;++j)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;i,j&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        vector&lt;<span class="type">int</span>&gt; cur = q.<span class="built_in">front</span>();</span><br><span class="line">                        q.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="type">int</span> x = cur[<span class="number">0</span>], y = cur[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(x&lt; <span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&gt;m<span class="number">-1</span> || grid[x][y] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        grid[x][y] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        <span class="built_in">push</span>(&#123;x+<span class="number">1</span>,y&#125;);</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;x<span class="number">-1</span>,y&#125;);</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;x,y+<span class="number">1</span>&#125;);</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;x,y<span class="number">-1</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Union-Find"><a href="#option-3-Union-Find" class="headerlink" title="option 3 - *Union Find"></a>option 3 - *Union Find</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(n*m)</code> </li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n*m)</code> </li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>201. Bitwise AND of Numbers Range</title>
    <url>/blog/2023/02/12/leetcode/201_BitwiseANDofNumbersRange/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/bitwise-and-of-numbers-range/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><p>不斷向右shift ，直到兩數字相等</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5 = 0101</span></span><br><span class="line">        <span class="comment">// 7 = 0111</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left != right)&#123;</span><br><span class="line">            left&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            right&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><p>概念與option 1一樣，答案必定為2的指數</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      8   4   2   1</span></span><br><span class="line">        <span class="comment">//5     0   1   0   1</span></span><br><span class="line">        <span class="comment">//6     0   1   1   0</span></span><br><span class="line">        <span class="comment">//7     0   1   1   1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">              right&amp;= (right<span class="number">-1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>2022. Convert 1D Array Into 2D Array</title>
    <url>/blog/2023/02/12/leetcode/2022_Convert1DArrayInto2DArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/convert-1d-array-into-2d-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">construct2DArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; original, <span class="type">int</span> m, <span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(original.<span class="built_in">size</span>()  != m*n) <span class="keyword">return</span> ret;</span><br><span class="line">        ret = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> k =<span class="number">0</span> , c = original.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                ret[i][j] = original[k++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>202. Happy Number</title>
    <url>/blog/2023/02/12/leetcode/202_HappyNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/happy-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 19 -&gt; 82 -&gt; 68 -&gt; 100 -&gt; 1</span></span><br><span class="line">        <span class="comment">//  2 -&gt; 4  -&gt; 16 -&gt; 37 -&gt; 58 -&gt; 89 -&gt; 145 -&gt; 42 -&gt; 20 -&gt; 4</span></span><br><span class="line">        <span class="type">int</span> happy = n;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(&#123;happy&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(happy!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(happy)&#123;</span><br><span class="line">                m+=(happy%<span class="number">10</span>)*(happy%<span class="number">10</span>);</span><br><span class="line">                happy/=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            happy = m;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(happy)!=s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            s.<span class="built_in">insert</span>(happy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>203. Remove Linked List Elements</title>
    <url>/blog/2023/02/12/leetcode/203_RemoveLinkedListElements/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-linked-list-elements/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *fast=head, *ret = slow;</span><br><span class="line">        slow-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast-&gt;val!=val) &#123;</span><br><span class="line">                slow-&gt;next = fast;</span><br><span class="line">                slow=slow-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            fast=fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *cur = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ret = cur;</span><br><span class="line">        cur-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val == val) cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode *cur = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ret = cur;</span><br><span class="line">        cur-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val ==val) cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>204. Count Primes</title>
    <url>/blog/2023/02/12/leetcode/204_CountPrimes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-primes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>Sieve of Eratosthenes</p>
<h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">primes</span><span class="params">(n+<span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;<span class="built_in">sqrt</span>(n);++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(primes[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>;i*j&lt;=n;++j)&#123;</span><br><span class="line">                    primes[j*i] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// faster</span></span><br><span class="line">                <span class="comment">// for(int j= i*i;j&lt;n;j+=i) primes[j] = false;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i) count+=primes[i];</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>205. Isomorphic Strings</title>
    <url>/blog/2023/02/12/leetcode/205_IsomorphicStrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/isomorphic-strings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mpa, mpb;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m=t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m!=n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mpa[s[i]]!=mpb[t[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            mpa[s[i]] = i+<span class="number">1</span>;</span><br><span class="line">            mpb[t[i]] = i+<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>206. Reverse Linked List</title>
    <url>/blog/2023/02/12/leetcode/206_ReverseLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-linked-list/">problem</a></h2><p>reverse linked list</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-iterative"><a href="#option-1-iterative" class="headerlink" title="option 1 - iterative"></a>option 1 - iterative</h4><p>需要三個個指標</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *pre = <span class="literal">nullptr</span>, *cur = head, *post = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(post)&#123;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = post ;</span><br><span class="line">            post = post-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>another version <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *pre = <span class="literal">nullptr</span>, *cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next)&#123;</span><br><span class="line">            ListNode *post = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = post ;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>other version<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *cur = head;</span><br><span class="line">        pre-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next)&#123;</span><br><span class="line">            ListNode *post = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = post-&gt;next;</span><br><span class="line">            post-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = post;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-recursive"><a href="#option-2-recursive" class="headerlink" title="option 2 - recursive"></a>option 2 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(!head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *node = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>solution complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>2074. Reverse Nodes in Even Length Groups</title>
    <url>/blog/2023/02/12/leetcode/2074_ReverseNodesinEvenLengthGroups/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-nodes-in-even-length-groups/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> k =<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseN</span><span class="params">(ListNode *l,ListNode *r)</span></span>&#123;</span><br><span class="line">        ListNode *pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *cur =l;</span><br><span class="line">        pre-&gt;next = l;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next !=r)&#123;</span><br><span class="line">            ListNode *temp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;head;head=head-&gt;next) size++;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseEvenLengthGroups</span><span class="params">(ListNode *head, <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *a = head, *b =head;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">min</span>(size,k);</span><br><span class="line">        size -=k;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b==<span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">            b=b-&gt;next;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            ListNode* newhead = <span class="built_in">reverseN</span>(a,b);</span><br><span class="line">            a-&gt;next = <span class="built_in">reverseEvenLengthGroups</span>(b, size);</span><br><span class="line">            <span class="keyword">return</span> newhead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode *p =a;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next !=b) p=p-&gt;next;</span><br><span class="line">            p-&gt;next = <span class="built_in">reverseEvenLengthGroups</span>(b, size);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseEvenLengthGroups</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = <span class="built_in">getSize</span>(head);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverseEvenLengthGroups</span>(head, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>2078. Two Furthest Houses With Different Colors</title>
    <url>/blog/2023/02/12/leetcode/2078_TwoFurthestHousesWithDifferentColors/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/two-furthest-houses-with-different-colors/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDistance</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; colors)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span> , idx = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> n = colors.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i&lt;n<span class="number">-1</span> ;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(colors[i]!=colors[j]) res = <span class="built_in">max</span>(res, j-i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDistance</span>(<span class="params">self, colors: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ret , n= <span class="number">0</span> , <span class="built_in">len</span>(colors)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> colors[i]!=colors[j]:</span><br><span class="line">                    ret = <span class="built_in">max</span>(ret, j-i)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2087. Minimum Cost Homecoming of a Robot in a Grid</title>
    <url>/blog/2023/02/12/leetcode/2087_MinimumCostHomecomingofaRobotinaGrid/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; startPos, vector&lt;<span class="type">int</span>&gt;&amp; homePos, vector&lt;<span class="type">int</span>&gt;&amp; rowCosts, vector&lt;<span class="type">int</span>&gt;&amp; colCosts)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = startPos[<span class="number">0</span>], j = startPos[<span class="number">1</span>], x = homePos[<span class="number">0</span>], y = homePos[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i&lt;x)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = i+<span class="number">1</span> ; c&lt;=x;++c) ret+=rowCosts[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;x)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = i<span class="number">-1</span>;c&gt;=x;--c) ret+=rowCosts[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;y)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = j+<span class="number">1</span>;c&lt;=y;++c) ret+=colCosts[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;y)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = j<span class="number">-1</span>;c&gt;=y;--c) ret+=colCosts[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>208. Implement Trie (Prefix Tree)</title>
    <url>/blog/2023/02/12/leetcode/208_ImplementTrie(PrefixTree)/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/implement-trie-prefix-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先定義TrieNode 資料結構<br>Trie 只有葉子才會存資料，其餘只是指標</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line">    TrieNode* child[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="built_in">TrieNode</span>():<span class="built_in">isWord</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode* &amp;c:child) c= <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode * root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>]) cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            cur = cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cur = cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode *cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:prefix)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cur = cur-&gt;child[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><p>search、insert、startWith operation</p>
<ul>
<li>time complexity <code>O(n)</code> , n &#x3D; len(word)</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>2095. Delete the Middle Node of a Linked List</title>
    <url>/blog/2023/02/12/leetcode/2095_DeletetheMiddleNodeofaLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteMiddle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head-&gt;next) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode * pre = head, * slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = slow-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;s</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>209. Minimum Size Subarray Sum</title>
    <url>/blog/2023/02/12/leetcode/209_MinimumSizeSubarraySum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-brute-force"><a href="#option-1-brute-force" class="headerlink" title="option 1 - brute force"></a>option 1 - brute force</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>() , len = n+<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> cand = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n &amp;&amp; j&lt;=i+len;++j)&#123;</span><br><span class="line">                cand+=nums[j];</span><br><span class="line">                <span class="keyword">if</span>(cand &gt;=target)&#123;</span><br><span class="line">                    len = <span class="built_in">min</span>(j-i+<span class="number">1</span>, len);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len==n+<span class="number">1</span>?<span class="number">0</span>:len;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-sliding-window"><a href="#option-2-sliding-window" class="headerlink" title="option 2 - sliding window"></a>option 2 - sliding window</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sliding window</span></span><br><span class="line">        <span class="type">int</span> window = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">int</span> last = nums[r++];</span><br><span class="line">            </span><br><span class="line">            window+=last;</span><br><span class="line">            <span class="keyword">while</span>(window&gt;=target)&#123;</span><br><span class="line">                len =<span class="built_in">min</span>(len, r-l);</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> first = nums[l++];</span><br><span class="line">                window-=first;             </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len==INT_MAX?<span class="number">0</span>:len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Binary-Search"><a href="#option-3-Binary-Search" class="headerlink" title="option 3 - Binary Search"></a>option 3 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2   5   6   8   12  15</span></span><br><span class="line">        <span class="comment">// prefix sum + binary </span></span><br><span class="line">        nums.<span class="built_in">insert</span>(nums.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>, n = nums.<span class="built_in">size</span>(), len = n+<span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            total+=nums[i];</span><br><span class="line">            prefix[i] = total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="type">int</span> l = i+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> eval = prefix[mid] - prefix[i];</span><br><span class="line">                <span class="keyword">if</span>(eval == target)&#123;</span><br><span class="line">                    len = <span class="built_in">min</span>(len, mid-i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(eval &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;n &amp;&amp; prefix[l] - prefix[i] &gt;=target)&#123;</span><br><span class="line">                len = <span class="built_in">min</span>(l-i, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len==n+<span class="number">1</span>?<span class="number">0</span>:len;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2   5   6   8   12  15</span></span><br><span class="line">        <span class="comment">// prefix sum + binary </span></span><br><span class="line">        nums.<span class="built_in">insert</span>(nums.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>, n = nums.<span class="built_in">size</span>(), len = n+<span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            total+=nums[i];</span><br><span class="line">            prefix[i] = total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="comment">// right bounder</span></span><br><span class="line">            <span class="type">int</span> l = i+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="type">int</span> eval = target + prefix[i];</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(prefix[mid] &gt;= eval) r = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l==n) <span class="keyword">continue</span>;</span><br><span class="line">            len = <span class="built_in">min</span>(l-i, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len==n+<span class="number">1</span>?<span class="number">0</span>:len;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n*n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Sliding window</tag>
      </tags>
  </entry>
  <entry>
    <title>20. Valid Parentheses</title>
    <url>/blog/2023/02/12/leetcode/20_ValidParentheses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-parentheses/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>經典題目，利用stack 將<code>(</code> <code>[</code> <code>&#123;</code> push 進去，如果不是左半部括號，則檢查stack 頂部是否為相對應的右半部括號，如果不是<code>return false</code>，如果是pop，並繼續遍歷<code>string</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span>) sta.<span class="built_in">push</span>(c);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span> &amp;&amp; sta.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span> &amp;&amp; sta.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; sta.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>) sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>2108. Find First Palindromic String in the Array</title>
    <url>/blog/2023/02/12/leetcode/2108_FindFirstPalindromicStringintheArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-first-palindromic-string-in-the-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l++] !=s[r--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">firstPalindrome</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(string word:words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isPalindrome</span>(word)) <span class="keyword">return</span> word;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2119. A Number After a Double Reversal</title>
    <url>/blog/2023/02/12/leetcode/2119_ANumberAfteraDoubleReversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/a-number-after-a-double-reversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            ret*=<span class="number">10</span>;</span><br><span class="line">            ret+=(num%<span class="number">10</span>);</span><br><span class="line">            num/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ret&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameAfterReversals</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(<span class="built_in">reverse</span>(num)) == num;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analyze"><a href="#analyze" class="headerlink" title="analyze"></a>analyze</h2><ul>
<li>time complexity <code>O(1)</code> </li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>211. Design Add and Search Words Data Structure</title>
    <url>/blog/2023/02/12/leetcode/211_DesignAddandSearchWordsDataStructure/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/submissions/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Trie"><a href="#option-1-Trie" class="headerlink" title="option 1 - Trie"></a>option 1 - Trie</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    TrieNode* children[<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">TrieNode</span>()&#123;</span><br><span class="line">        isWord = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode *&amp; child :children) child = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode * p =root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasKeyWithPattern</span><span class="params">(string pattern)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(p, pattern,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasKeyWithPattern</span><span class="params">(TrieNode* node, string pattern, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==pattern.<span class="built_in">size</span>()) <span class="keyword">return</span> node-&gt;isWord;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> c = pattern[i];</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], pattern, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 嘗試所有可能</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">hasKeyWithPattern</span>(node-&gt;children[j], pattern, i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="comment">// 都沒匹配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Trie *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WordDictionary</span>() &#123;</span><br><span class="line">        </span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root-&gt;<span class="built_in">insert</span>(word);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  root-&gt;<span class="built_in">hasKeyWithPattern</span>(word);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * WordDictionary* obj = new WordDictionary();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addWord(word);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;search(word);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h4 id="option-2-hash-table"><a href="#option-2-hash-table" class="headerlink" title="option 2 - hash table"></a>option 2 - hash table</h4><p>將<code>word.size()</code> 當作key，value 則為 相同長度的所有字串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span> , vector&lt;string&gt;&gt; words;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEqual</span><span class="params">(string a , string b)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(a.<span class="built_in">size</span>()!=b.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=b[i])  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WordDictionary</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addWord</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        words[word.<span class="built_in">size</span>()].<span class="built_in">push_back</span>(word);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w:words[word.<span class="built_in">size</span>()])&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isEqual</span>(w, word)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>212. Word Search II</title>
    <url>/blog/2023/02/12/leetcode/212_WordSearchII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/word-search-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>option 1 - backtracking<br>time out<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&amp; visited, <span class="type">int</span> i, <span class="type">int</span> j, string &amp;word, <span class="type">int</span> cur)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(cur==word.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || visited[i][j] || word[cur]!=board[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="built_in">traverse</span>(board, visited, i<span class="number">-1</span>, j, word, cur+<span class="number">1</span>) || \</span><br><span class="line">            <span class="built_in">traverse</span>(board, visited, i+<span class="number">1</span>, j, word, cur+<span class="number">1</span>) || \</span><br><span class="line">            <span class="built_in">traverse</span>(board, visited, i, j<span class="number">-1</span>, word, cur+<span class="number">1</span>) || \</span><br><span class="line">            <span class="built_in">traverse</span>(board, visited, i, j+<span class="number">1</span>, word, cur+<span class="number">1</span>);</span><br><span class="line">        visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        set&lt;string&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(string word:words)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">traverse</span>(board, visited, i, j, word, <span class="number">0</span>)) ret.<span class="built_in">insert</span>(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;string&gt; (ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-Trie"><a href="#option-Trie" class="headerlink" title="option - Trie"></a>option - Trie</h4><p>必須要用Trie 資料結構，為words建立</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode *children[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="built_in">TrieNode</span>()&#123;</span><br><span class="line">        isWord = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode *&amp; node:<span class="keyword">this</span>-&gt;children) node = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> i, <span class="type">int</span> j, TrieNode* p, string &amp; path, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp; visited)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();        </span><br><span class="line">        <span class="keyword">if</span>(i&lt; <span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || !p || !p-&gt;children[board[i][j]-<span class="string">&#x27;a&#x27;</span>] || visited[i][j] ) <span class="keyword">return</span> ;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        p=p-&gt;children[board[i][j]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        path+=board[i][j];</span><br><span class="line">        <span class="keyword">if</span>(p &amp;&amp; p-&gt;isWord) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="comment">// 已經拜訪過了</span></span><br><span class="line">            p-&gt;isWord = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(board, i+<span class="number">1</span>, j, p, path, visited) ;</span><br><span class="line">        <span class="built_in">dfs</span>(board, i<span class="number">-1</span>, j, p, path, visited) ;</span><br><span class="line">        <span class="built_in">dfs</span>(board, i, j+<span class="number">1</span>, p, path, visited) ;</span><br><span class="line">        <span class="built_in">dfs</span>(board, i, j<span class="number">-1</span>, p, path, visited) ;</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        Trie *t = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(string word:words) t-&gt;<span class="built_in">put</span>(word);</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                string path;</span><br><span class="line">                <span class="built_in">dfs</span>(board,i,j, t-&gt;root, path, visited);   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>2130. Maximum Twin Sum of a Linked List</title>
    <url>/blog/2023/02/12/leetcode/2130_MaximumTwinSumofaLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode *left ;</span><br><span class="line">    <span class="type">int</span> maxTwinSum;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(ListNode *right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// postorder</span></span><br><span class="line">        <span class="built_in">traverse</span>(right-&gt;next);</span><br><span class="line">        </span><br><span class="line">        maxTwinSum = <span class="built_in">max</span>(maxTwinSum, left-&gt;val + right-&gt;val);</span><br><span class="line">        left = left-&gt;next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pairSum</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// must be even length</span></span><br><span class="line">        <span class="comment">// Palindrome</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// init.</span></span><br><span class="line">        left = head;</span><br><span class="line">        maxTwinSum =<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(head);</span><br><span class="line">        <span class="keyword">return</span> maxTwinSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-iterative"><a href="#option-2-iterative" class="headerlink" title="option 2 - iterative"></a>option 2 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pairSum</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next )&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow =slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = slow;</span><br><span class="line">        <span class="type">int</span> ret =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(slow)&#123; sta.<span class="built_in">push</span>(slow-&gt;val); slow=slow-&gt;next;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(head!=fast)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(sta.<span class="built_in">top</span>()+ head-&gt;val , ret);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>sparse complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>213. House Robber II</title>
    <url>/blog/2023/02/12/leetcode/213_HouseRobberII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/house-robber-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>一個只搶[1,n-1]，另一個只搶[0,n-2]，再取最大值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r==l) <span class="keyword">return</span> nums[l];</span><br><span class="line">        <span class="type">int</span> dp0 = nums[l], dp1 = <span class="built_in">max</span>(nums[l],nums[l+<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> ret = dp1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l+<span class="number">2</span>;i&lt;=r;++i)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(dp0+nums[i], dp1 );</span><br><span class="line">            dp0 = dp1;</span><br><span class="line">            dp1 = ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// option 1 因為只會發生兩種情況。</span></span><br><span class="line">        <span class="comment">// 從第一家開始搶，就不能搶第 n-1</span></span><br><span class="line">        <span class="comment">// 從第二家開始搶，就可以一直搶下去</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">rob</span>(nums, l+<span class="number">1</span>, r), <span class="built_in">rob</span>(nums, l,r<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2149. Rearrange Array Elements by Sign</title>
    <url>/blog/2023/02/12/leetcode/2149_RearrangeArrayElementsbySign/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rearrange-array-elements-by-sign/submissions/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-one-pass"><a href="#option-1-one-pass" class="headerlink" title="option 1 - one pass"></a>option 1 - one pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rearrangeArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1</span>, n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                ret[l] = nums[i];</span><br><span class="line">                l+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret[r] = nums[i];</span><br><span class="line">                r+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>215. Kth Largest Element in an Array</title>
    <url>/blog/2023/02/12/leetcode/215_KthLargestElementinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sort"><a href="#option-1-sort" class="headerlink" title="option 1 - sort"></a>option 1 - sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[nums.<span class="built_in">size</span>()-k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><ul>
<li>version 1<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; pq;    </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) pq.<span class="built_in">push</span>(n);</span><br><span class="line">        <span class="type">int</span> ret ;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            ret = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>version 2<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; k) pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-3-quick-sort"><a href="#option-3-quick-sort" class="headerlink" title="option 3 - quick sort"></a>option 3 - quick sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getKth</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = nums[end];</span><br><span class="line">        <span class="type">int</span> left = start, right = end;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left&lt; right &amp;&amp; nums[left]&lt;pivot) left++;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]&gt;=pivot) right--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// found it </span></span><br><span class="line">            <span class="keyword">if</span>(left==right) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">swap</span>(nums[left], nums[right]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[left], nums[end]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left+<span class="number">1</span> == k) <span class="keyword">return</span> pivot;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left+<span class="number">1</span> &gt; k) <span class="keyword">return</span> <span class="built_in">getKth</span>(k, nums, start, left<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getKth</span>(k, nums, left+<span class="number">1</span>, end);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt; <span class="number">1</span> || nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getKth</span>(nums.<span class="built_in">size</span>()-k+<span class="number">1</span>, nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - sort <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2 - heap<ul>
<li>time complexity <code>O(nlogk)</code></li>
<li>space complexity <code>O(k)</code></li>
</ul>
</li>
<li>option 3 - quick sort<ul>
<li>time complexity <code>O(nlogn)</code> on average,<code>O(n^2)</code> on worse case</li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>216. Combination Sum III</title>
    <url>/blog/2023/02/12/leetcode/216_CombinationSumIII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/combination-sum-iii/">problem</a></h2><p>給定<code>k</code>、<code>n</code> 找出所有和為n，長度為k的有效組合，其元素只能落在1到9區間，且數字必須唯一，不能重複取。</p>
<h2 id="sloution"><a href="#sloution" class="headerlink" title="sloution"></a>sloution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret, <span class="type">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() &gt; k) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() ==k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target -i&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(k, target-i, path, ret,i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">backtracking</span>(k, n, path, ret, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(len(nums)^M)</code>, M if theight of our recursive</li>
<li>space complexity <code>L</code> , L is the longest combination</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2176. Count Equal and Divisible Pairs in an Array</title>
    <url>/blog/2023/02/12/leetcode/2176_CountEqualandDivisiblePairsinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// brute force =&gt; time complexity O(n^2)</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[j] &amp;&amp; (i*j)%k==<span class="number">0</span>) count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2177. Find Three Consecutive Integers That Sum to a Given Number</title>
    <url>/blog/2023/02/12/leetcode/2177_FindThreeConsecutiveIntegersThatSumtoaGivenNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">sumOfThree</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1 2 3 -&gt; 6</span></span><br><span class="line">        <span class="comment">// 2 3 4 -&gt; 9</span></span><br><span class="line">        <span class="comment">// 3 4 5 -&gt; 12</span></span><br><span class="line">        <span class="comment">// 4 5 6 -&gt; 15</span></span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;  ret;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">3</span>!=<span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mid = num/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;mid<span class="number">-1</span>, mid, mid+<span class="number">1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>2178. Maximum Split of Positive Even Integers</title>
    <url>/blog/2023/02/12/leetcode/2178_MaximumSplitofPositiveEvenIntegers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-split-of-positive-even-integers">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>dfs -&gt; time out<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; ret;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&amp; path,<span class="type">long</span> <span class="type">long</span> sum, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; &amp; visited, <span class="type">long</span> <span class="type">long</span> l)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ret.<span class="built_in">empty</span>() &amp;&amp; ret.<span class="built_in">size</span>() &lt; path.<span class="built_in">size</span>()) ret = path;</span><br><span class="line">            <span class="keyword">if</span>(ret.<span class="built_in">empty</span>()) ret = path;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i =l;i&gt;<span class="number">-1</span>;i-=<span class="number">2</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(visited[i] || i%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">traverse</span>(path, sum-i, visited, i<span class="number">-2</span>);</span><br><span class="line">            visited[i] = <span class="literal">false</span>;            </span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">maximumEvenSplit</span><span class="params">(<span class="type">long</span> <span class="type">long</span> finalSum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dfs</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">visited</span><span class="params">(finalSum+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(path, finalSum, visited, finalSum);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>math<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">maximumEvenSplit</span><span class="params">(<span class="type">long</span> <span class="type">long</span> finalSum)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;  ret;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(finalSum==<span class="number">1</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="keyword">if</span>(finalSum%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> i=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum+i&lt;=finalSum)&#123;</span><br><span class="line">            sum+=i;            </span><br><span class="line">            ret.<span class="built_in">push_back</span>(i);</span><br><span class="line">            i+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">back</span>() += (finalSum-sum);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>217. Contains Duplicate</title>
    <url>/blog/2023/02/12/leetcode/217_ContainsDuplicate/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/contains-duplicate/">problem</a></h2><p>找出陣列中是否一個重複的數字，如果有任何數字出現至少兩次則返回<code>true</code>，每個數字都不同則返回<code>false</code></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="sorting"><a href="#sorting" class="headerlink" title="sorting"></a>sorting</h4><p>可以先sort 是否有前後兩元素相同</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="hash-table"><a href="#hash-table" class="headerlink" title="hash table"></a>hash table</h4><p>set or map</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">count</span>(n)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            s.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return !(nums.size()==unordered_set&lt;int&gt;(nums.begin(),nums.end()).size());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>sorting<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>hash table<ul>
<li>time complexity <code>O(n)</code> assuming set find operation cost const time</li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2180. Count Integers With Even Digit Sum</title>
    <url>/blog/2023/02/12/leetcode/2180_CountIntegersWithEvenDigitSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEvenDigit</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> digit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            digit+=(n%<span class="number">10</span>);</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digit%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countEven</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// option 1  brute force time complexity O(n^2)</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line">            count+= <span class="built_in">isEvenDigit</span>(i)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2181. Merge Nodes in Between Zeros</title>
    <url>/blog/2023/02/12/leetcode/2181_MergeNodesinBetweenZeros/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-nodes-in-between-zeros/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeNodes</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="comment">// spilt lists</span></span><br><span class="line">        ListNode *cur = head-&gt;next;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;val!=<span class="number">0</span>)&#123;</span><br><span class="line">                sum+=cur-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;val == <span class="number">0</span>)&#123;</span><br><span class="line">                ret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum);</span><br><span class="line">                ret = ret-&gt;next;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>other version</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeNodes</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="comment">// spilt lists</span></span><br><span class="line">        ListNode *cur = head-&gt;next;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur &amp;&amp; cur-&gt;val !=<span class="number">0</span>)&#123;</span><br><span class="line">                sum+=cur-&gt;val;</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            ret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum);</span><br><span class="line">            ret= ret-&gt;next;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>2185. Counting Words With a Given Prefix</title>
    <url>/blog/2023/02/12/leetcode/2185_CountingWordsWithaGivenPrefix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/counting-words-with-a-given-prefix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">prefixCount</span><span class="params">(vector&lt;string&gt;&amp; words, string pref)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = pref.<span class="built_in">size</span>(), count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string word:words)&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c!=pref[i]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==n) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n+m)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2186. Minimum Number of Steps to Make Two Strings Anagram II</title>
    <url>/blog/2023/02/12/leetcode/2186_MinimumNumberofStepstoMakeTwoStringsAnagramII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSteps</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// beacuse only have lowercase English </span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) ret[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t) ret[c-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r:ret) count+=(<span class="built_in">abs</span>(r));</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2187. Minimum Time to Complete Trips</title>
    <url>/blog/2023/02/12/leetcode/2187_MinimumTimetoCompleteTrips/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-time-to-complete-trips/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">numberOfTripsForGivenTime</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; time, <span class="type">long</span> <span class="type">long</span> givenTime)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 給定時間內可以拜訪多少trips</span></span><br><span class="line">        <span class="comment">// numberOfTripsForGivenTime([1,2,3], 100) =&gt; 100+50+33 = 183</span></span><br><span class="line">        <span class="comment">// numberOfTripsForGivenTime([1,2,3], 50) =&gt; 50+25+16=  91</span></span><br><span class="line">        <span class="comment">// numberOfTripsForGivenTime([1,2,3], 3) =&gt; 3/1+3/2+3/3 = 5</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> totalTrips = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t:time) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> val = t;</span><br><span class="line">            totalTrips+=givenTime/val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalTrips;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minimumTime</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; time, <span class="type">int</span> totalTrips)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> expectTime = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> lowestTime = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> highestTime = <span class="number">1e+14</span>;</span><br><span class="line">        <span class="keyword">while</span>(lowestTime &lt; highestTime)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = lowestTime + (highestTime-lowestTime)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> eval = <span class="built_in">numberOfTripsForGivenTime</span>(time,mid);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;mid&lt;&lt;&quot; &quot;&lt;&lt;eval&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(eval == totalTrips) highestTime=  mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(eval &lt; totalTrips) lowestTime =mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> highestTime = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lowestTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogK)</code> k &#x3D; 1e+14</li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>2190. Most Frequent Number Following Key In an Array</title>
    <url>/blog/2023/02/12/leetcode/2190_MostFrequentNumberFollowingKeyInanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/most-frequent-number-following-key-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mostFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span>  n=nums.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>( nums[i] == key)&#123;</span><br><span class="line">                mp[nums[i+<span class="number">1</span>]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> target = <span class="number">0</span>, freq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.second &gt;freq)&#123;</span><br><span class="line">                freq = m.second;</span><br><span class="line">                target = m.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2191. Sort the Jumbled Numbers</title>
    <url>/blog/2023/02/12/leetcode/2191_SorttheJumbledNumbers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-the-jumbled-numbers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">decode</span><span class="params">(<span class="type">int</span> val )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val==<span class="number">0</span>) <span class="keyword">return</span> mp[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>, m= val;</span><br><span class="line">        <span class="keyword">while</span>(m)&#123;</span><br><span class="line">            n++;</span><br><span class="line">            m/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">            ret += mp[val%<span class="number">10</span>]*<span class="built_in">pow</span>(<span class="number">10</span>,i++);</span><br><span class="line">            val /=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortJumbled</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; mapping, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = mapping.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;++i) mp[i] = mapping[i];</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(n, <span class="built_in">decode</span>(n)));</span><br><span class="line">            <span class="comment">// cout&lt;&lt;ret.back().first&lt;&lt;&quot; &quot;&lt;&lt;ret.back().second&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>(), [](pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp;a , pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.second&lt;b.second;</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> r:ret)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(r.first);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;r.first&lt;&lt;&quot; &quot;&lt;&lt;r.second&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2194. Cells in a Range on an Excel Sheet</title>
    <url>/blog/2023/02/12/leetcode/2194_CellsinaRangeonanExcelSheet/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">cellsInRange</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> a = s[<span class="number">0</span>]+<span class="number">1</span>, b = s[<span class="number">3</span>];</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c = s[<span class="number">0</span>] ;c&lt;=s[<span class="number">3</span>] ; ++c)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">int</span>(s[<span class="number">1</span>]);i&lt;=<span class="built_in">int</span>(s[<span class="number">4</span>]) ; ++i)&#123;</span><br><span class="line">                string temp ;</span><br><span class="line">                temp+=c;</span><br><span class="line">                temp+= <span class="built_in">char</span>(i);</span><br><span class="line">                ret.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>219. Contains Duplicate II</title>
    <url>/blog/2023/02/12/leetcode/219_ContainsDuplicateII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/contains-duplicate-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(( i - mp[nums[i]])&lt;=k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mp[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>speed complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>21. Merge Two Sorted Lists</title>
    <url>/blog/2023/02/12/leetcode/21_MergeTwoSortedLists/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-two-sorted-lists/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>因為是排序過的list，只要 new 兩個指標分別指向<code>list1</code> <code>list2</code> 比較大小，小的放進要回傳的串列即可。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode * ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret ;</span><br><span class="line">        <span class="comment">// compare each node in two lists</span></span><br><span class="line">        <span class="keyword">while</span>(list1 &amp;&amp; list2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list1-&gt;val &lt; list2-&gt;val) &#123;</span><br><span class="line">                ret-&gt;next = list1;</span><br><span class="line">                list1=list1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret-&gt;next = list2;</span><br><span class="line">                list2=list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1) ret-&gt;next = list1;</span><br><span class="line">        <span class="keyword">if</span>(list2) ret-&gt;next = list2;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>2200. Find All K-Distant Indices in an Array</title>
    <url>/blog/2023/02/12/leetcode/2200_FindAllK-DistantIndicesinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-all-k-distant-indices-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findKDistantIndices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> key, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; target;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==key)target.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(key, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == key)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(pair p:target)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">abs</span>(i-p.second)&lt;=k)&#123;</span><br><span class="line">                        ret.<span class="built_in">push_back</span>(i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*mlogm)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2201. Count Artifacts That Can Be Extracted</title>
    <url>/blog/2023/02/12/leetcode/2201_CountArtifactsThatCanBeExtracted/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-artifacts-that-can-be-extracted/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">digArtifacts</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; artifacts, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dig)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">map</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> m = artifacts.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">area</span><span class="params">(m+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>, j = <span class="number">1</span>;i&lt;m;++i, j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x = artifacts[i][<span class="number">0</span>];x&lt;=artifacts[i][<span class="number">2</span>] ; x++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> y = artifacts[i][<span class="number">1</span>];y&lt;=artifacts[i][<span class="number">3</span>] ;y++) map[x][y] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            area[j] = (artifacts[i][<span class="number">3</span>]-artifacts[i][<span class="number">1</span>]+<span class="number">1</span>)*(artifacts[i][<span class="number">2</span>]-artifacts[i][<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> d :dig)&#123;</span><br><span class="line">            <span class="type">int</span> i=d[<span class="number">0</span>], j = d[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> color = map[i][j];</span><br><span class="line">            </span><br><span class="line">            area[color]-=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            count+=(area[i]==<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(m*n*n)</code></li>
<li>space complexity <code>O(n*n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2202. Maximize the Topmost Element After K Moves</title>
    <url>/blog/2023/02/12/leetcode/2202_MaximizetheTopmostElementAfterKMoves/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumTop</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// edge case</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> &amp;&amp; k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// [18], k=3 =&gt; -1</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> &amp;&amp; k%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// [0], k =1000000000 =&gt; 0</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;n)&#123;</span><br><span class="line">            <span class="type">int</span> mx = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums) mx = <span class="built_in">max</span>(i, mx);</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(k, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">-1</span>));</span><br><span class="line">        <span class="comment">//  pop get</span></span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> mx = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k ;++i)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = nums[i];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(nums[i+<span class="number">1</span>], mx);</span><br><span class="line">            <span class="keyword">else</span> dp[i][<span class="number">1</span>] = mx;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[k<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumTop</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// edge case</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> &amp;&amp; k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// [18], k=3 =&gt; -1</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> &amp;&amp; k%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// [0], k =1000000000 =&gt; 0</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;n)&#123;</span><br><span class="line">            <span class="type">int</span> mx = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums) mx = <span class="built_in">max</span>(i, mx);</span><br><span class="line">            <span class="keyword">return</span> mx;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(k, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">-1</span>));</span><br><span class="line">        <span class="comment">//  pop get</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> dp_0 = nums[<span class="number">0</span>], dp_1 = nums[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> mx = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k ;++i)&#123;</span><br><span class="line">            dp_0 = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n) dp_1 = <span class="built_in">max</span>(nums[i+<span class="number">1</span>], mx);</span><br><span class="line">            <span class="keyword">else</span> dp_1 = mx;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> -&gt; <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2206. Divide Array Into Equal Pairs</title>
    <url>/blog/2023/02/12/leetcode/2206_DivideArrayIntoEqualPairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/divide-array-into-equal-pairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">divideArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) freq[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:freq) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.second%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">divideArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">501</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) vec[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">500</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[i]%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2207. Maximize Number of Subsequences in a String</title>
    <url>/blog/2023/02/12/leetcode/2207_MaximizeNumberofSubsequencesinaString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>將<code>pattern[0]</code> 插入第一個<code>pattern[1]</code> 之前<br>或是<br>將<code>pattern[1]</code> 插入第一個<code>pattern[0]</code> 之前</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]!=str[i+<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countSubseq</span><span class="params">(string str, string pattern)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>, n = str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>] == pattern[<span class="number">1</span>]) str.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="built_in">string</span>(<span class="number">1</span>, pattern[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; str[i+<span class="number">1</span>]!=pattern[<span class="number">1</span>]) i++;</span><br><span class="line">            str.<span class="built_in">insert</span>(i, <span class="built_in">string</span>(<span class="number">1</span>,pattern[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:str) mp[c]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == pattern[<span class="number">0</span>]) count+=mp[pattern[<span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">else</span> mp[pattern[<span class="number">1</span>]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countSubseqB</span><span class="params">(string str, string pattern)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = str.<span class="built_in">size</span>(),  i = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == pattern[<span class="number">0</span>]) str.<span class="built_in">insert</span>(i+<span class="number">1</span>, <span class="built_in">string</span>(<span class="number">1</span>, pattern[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&gt;<span class="number">0</span> &amp;&amp; str[i<span class="number">-1</span>] !=pattern[<span class="number">0</span>]) i--;</span><br><span class="line">            str.<span class="built_in">insert</span>(i+<span class="number">1</span>, <span class="built_in">string</span>(<span class="number">1</span>, pattern[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:str) mp[c]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == pattern[<span class="number">0</span>]) count+=mp[pattern[<span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">else</span> mp[pattern[<span class="number">1</span>]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumSubsequenceCount</span><span class="params">(string text, string pattern)</span> </span>&#123;</span><br><span class="line">        string str ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:text)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == pattern[<span class="number">0</span>] || c==pattern[<span class="number">1</span>]) str+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// insert before  first pattern[1] </span></span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isUnique</span>(str) )&#123;</span><br><span class="line">            <span class="keyword">if</span>(pattern[<span class="number">0</span>] != pattern[<span class="number">1</span>]) <span class="keyword">return</span> str.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">return</span> (str.<span class="built_in">size</span>()+<span class="number">1</span>)*(str.<span class="built_in">size</span>()<span class="number">-1</span>+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">countSubseq</span>(str, pattern), <span class="built_in">countSubseqB</span>(str, pattern));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2208. Minimum Operations to Halve Array Sum</title>
    <url>/blog/2023/02/12/leetcode/2208_MinimumOperationstoHalveArraySum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-operations-to-halve-array-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-heap"><a href="#option-1-heap" class="headerlink" title="option 1 - heap"></a>option 1 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">halveArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">double</span>&gt; pq;</span><br><span class="line">        <span class="type">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(n);</span><br><span class="line">            total+=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> cur = total;</span><br><span class="line">        <span class="keyword">while</span>(cur &gt; total/<span class="number">2.0</span>)&#123;</span><br><span class="line">            <span class="type">double</span> p = pq.<span class="built_in">top</span>(); pq.<span class="built_in">pop</span>();</span><br><span class="line">            p /= <span class="number">2.0</span>;</span><br><span class="line">            cur -= p;</span><br><span class="line">            pq.<span class="built_in">push</span>(p);</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>2210. Count Hills and Valleys in an Array</title>
    <url>/blog/2023/02/12/leetcode/2210_CountHillsandValleysinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-hills-and-valleys-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countHillValley</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i<span class="number">-1</span>] )&#123;</span><br><span class="line">                <span class="comment">// hills</span></span><br><span class="line">                <span class="keyword">while</span>(i&lt;n<span class="number">-1</span> &amp;&amp; nums[i] == nums[i+<span class="number">1</span>])i++;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;n<span class="number">-1</span> &amp;&amp; nums[i]&gt;nums[i+<span class="number">1</span>]) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="comment">// valley</span></span><br><span class="line">                <span class="keyword">while</span>(i&lt;n<span class="number">-1</span> &amp;&amp; nums[i] == nums[i+<span class="number">1</span>]) i++;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;n<span class="number">-1</span> &amp;&amp; nums[i] &lt; nums[i+<span class="number">1</span>]) count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2211. Count Collisions on a Road</title>
    <url>/blog/2023/02/12/leetcode/2211_CountCollisionsonaRoad/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-collisions-on-a-road/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countCollisions</span><span class="params">(string directions)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = directions.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 撞到後會停在原地，後續有車子經過又會被撞</span></span><br><span class="line">        <span class="comment">// 將 RL SL 狀況下的L 改成 S狀態</span></span><br><span class="line">        <span class="comment">// 將 RL RS 狀態下的R 改成 S狀態</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = directions[i];</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(directions[i<span class="number">-1</span>] == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">// RL</span></span><br><span class="line">                    count+=<span class="number">2</span>;</span><br><span class="line">                    directions[i] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                    directions[i<span class="number">-1</span>] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(directions[i<span class="number">-1</span>] ==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">// SL</span></span><br><span class="line">                    count++;</span><br><span class="line">                    directions[i] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(directions[i<span class="number">-1</span>] == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">// RS</span></span><br><span class="line">                    count++;</span><br><span class="line">                    directions[i<span class="number">-1</span>] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在計算 有多少R 會撞到S</span></span><br><span class="line">        <span class="type">int</span> j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">-1</span> &amp;&amp; directions[j]==<span class="string">&#x27;R&#x27;</span>) j--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=j;++i) count+=(directions[i] == <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countCollisions</span><span class="params">(string directions)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = directions.<span class="built_in">size</span>(), l = <span class="number">0</span>, r = n<span class="number">-1</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; directions[l] == <span class="string">&#x27;L&#x27;</span>) l++;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;<span class="number">-1</span> &amp;&amp; directions[r] == <span class="string">&#x27;R&#x27;</span>) r--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) count+=(directions[i]!=<span class="string">&#x27;S&#x27;</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2212. Maximum Points in an Archery Competition</title>
    <url>/blog/2023/02/12/leetcode/2212_MaximumPointsinanArcheryCompetition/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-points-in-an-archery-competition/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; candid;</span><br><span class="line">    <span class="type">int</span> maxScore = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> score, vector&lt;<span class="type">int</span>&gt; &amp; path)</span></span>&#123;</span><br><span class="line">        <span class="comment">// end condition</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">0</span>  ) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span> || k==<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">if</span>(score &gt; maxScore)&#123;</span><br><span class="line">                maxScore = score;</span><br><span class="line">                candid = path;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// win</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">backtrack</span>(k-nums[i]<span class="number">-1</span>, nums, i<span class="number">-1</span>, score+i, path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// skip it</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">backtrack</span>(k, nums, i<span class="number">-1</span>, score, path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maximumBobPoints</span><span class="params">(<span class="type">int</span> numArrows, vector&lt;<span class="type">int</span>&gt;&amp; aliceArrows)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">ret</span>(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">backtrack</span>(numArrows, aliceArrows, <span class="number">11</span>, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;candid.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            ret[<span class="number">11</span>-i] = candid[i];</span><br><span class="line">            sum+= candid[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ret[<span class="number">0</span>]+=numArrows - sum;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2215. Find the Difference of Two Arrays</title>
    <url>/blog/2023/02/12/leetcode/2215_FindtheDifferenceofTwoArrays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-difference-of-two-arrays/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findDifference</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2) &#123;</span><br><span class="line">        vector&lt;set&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ret</span>(<span class="number">2</span>);</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s, intersection;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums1) s.<span class="built_in">insert</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">count</span>(n)) intersection.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!intersection.<span class="built_in">count</span>(n)) ret[<span class="number">0</span>].<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!intersection.<span class="built_in">count</span>(n)) ret[<span class="number">1</span>].<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> a:ret[i]) ans[i].<span class="built_in">push_back</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>221. Maximal Square</title>
    <url>/blog/2023/02/12/leetcode/221_MaximalSquare/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximal-square/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span> (n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i== <span class="number">0</span> || j==<span class="number">0</span>) dp[i][j] = matrix[i][j]  - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]))+<span class="number">1</span>;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret*ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*n)</code></li>
<li>space complexity <code>O(n*n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2220. Minimum Bit Flips to Convert Number</title>
    <url>/blog/2023/02/12/leetcode/2220_MinimumBitFlipstoConvertNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-bit-flips-to-convert-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minBitFlips</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> goal)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = start^goal, count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// count one</span></span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            n &amp;=(n<span class="number">-1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>2221. Find Triangular Sum of an Array</title>
    <url>/blog/2023/02/12/leetcode/2221_FindTriangularSumofanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-triangular-sum-of-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">triangularSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), size = n;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n);</span><br><span class="line">        dp[<span class="number">0</span>] = nums;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            size--;</span><br><span class="line">            dp[i] = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ;j&lt;size;++j)&#123;</span><br><span class="line">                dp[i][j] =(dp[i<span class="number">-1</span>][j] + dp[i<span class="number">-1</span>][j+<span class="number">1</span>])%<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-queue"><a href="#option-2-queue" class="headerlink" title="option 2 - queue"></a>option 2 - queue</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">triangularSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), size = n;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums) q.<span class="built_in">push</span>(n);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> pre = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;size; ++i)&#123;</span><br><span class="line">                <span class="type">int</span> cur = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> next = cur;</span><br><span class="line">                q.<span class="built_in">push</span>((cur+pre)%<span class="number">10</span>);</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">front</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n^2)</code> <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>queue</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2222. Number of Ways to Select Buildings</title>
    <url>/blog/2023/02/12/leetcode/2222_NumberofWaystoSelectBuildings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-ways-to-select-buildings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>need four variable , reprsentation </p>
<ul>
<li>the number of visited zero</li>
<li>the number of unvisited zero</li>
<li>the number of visited one</li>
<li>the number of unvisited one</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">numberOfWays</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> unused_zeros = <span class="number">0</span>, unused_ones  = <span class="number">0</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) unused_ones+=(c==<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        unused_zeros = n - unused_ones;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> used_zeros =<span class="number">0</span>, used_ones = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// 010</span></span><br><span class="line">                ret+=unused_zeros*used_zeros;</span><br><span class="line">                used_ones++;</span><br><span class="line">                unused_ones--;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//101</span></span><br><span class="line">                ret+=unused_ones*used_ones;</span><br><span class="line">                used_zeros++;</span><br><span class="line">                unused_zeros--;                   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2224. Minimum Number of Operations to Convert Time</title>
    <url>/blog/2023/02/12/leetcode/2224_MinimumNumberofOperationstoConvertTime/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-number-of-operations-to-convert-time/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">convertTime</span><span class="params">(string current, string correct)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> diff_hour = <span class="number">0</span>, diff_min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)&#123;</span><br><span class="line">            diff_hour = diff_hour*<span class="number">10</span> + (correct[i]-<span class="string">&#x27;0&#x27;</span>) - (current[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = diff_hour;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;correct.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            diff_min = diff_min*<span class="number">10</span> + (correct[i]-<span class="string">&#x27;0&#x27;</span>) - (current[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(diff_min&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 借位</span></span><br><span class="line">            count--;</span><br><span class="line">            diff_hour--;</span><br><span class="line">            diff_min+=<span class="number">60</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(diff_min&gt;=<span class="number">15</span>)&#123;</span><br><span class="line">            diff_min-=<span class="number">15</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(diff_min&gt;=<span class="number">5</span>)&#123;</span><br><span class="line">            diff_min-=<span class="number">5</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(diff_min&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            diff_min-=<span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2225. Find Players With Zero or One Losses</title>
    <url>/blog/2023/02/12/leetcode/2225_FindPlayersWithZeroorOneLosses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-players-with-zero-or-one-losses/">problem</a></h2><h2 id="sloution"><a href="#sloution" class="headerlink" title="sloution"></a>sloution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findWinners</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matches) &#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; winners, losers;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:matches)&#123;</span><br><span class="line">            <span class="type">int</span> win = m[<span class="number">0</span>], lose = m[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(win))&#123;</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;p= mp[win];</span><br><span class="line">                p.first+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mp[win] = &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(lose))&#123;</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;p= mp[lose];</span><br><span class="line">                p.second+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mp[lose] = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            <span class="comment">// winner</span></span><br><span class="line">            <span class="keyword">if</span>(m.second.second ==<span class="number">0</span> &amp;&amp; m.second.first &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                winners.<span class="built_in">push_back</span>(m.first);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// loser == 1</span></span><br><span class="line">            <span class="keyword">if</span>(m.second.second == <span class="number">1</span>)&#123;</span><br><span class="line">                losers.<span class="built_in">push_back</span>(m.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;winners, losers&#125;;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2226. Maximum Candies Allocated to K Children</title>
    <url>/blog/2023/02/12/leetcode/2226_MaximumCandiesAllocatedtoKChildren/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-candies-allocated-to-k-children/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">isValid</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; candies, <span class="type">long</span> <span class="type">long</span> t)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 給定糖果，假設每人t個，可以分給多少人</span></span><br><span class="line">       <span class="type">long</span> <span class="type">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c:candies)&#123;</span><br><span class="line">            count += c/t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumCandies</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candies, <span class="type">long</span> <span class="type">long</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>, r = LONG_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c:candies)&#123;</span><br><span class="line">            r = <span class="built_in">max</span>(r, (<span class="type">long</span> <span class="type">long</span>)c);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// binary search</span></span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> eval = <span class="built_in">isValid</span>(candies, mid);</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;假設每人可以分到&quot;</span>&lt;&lt;mid&lt;&lt;<span class="string">&quot;顆糖果\t可以分給 &quot;</span>&lt;&lt;eval&lt;&lt;<span class="string">&quot; 人&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">if</span>(eval &lt; k) r = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(eval&gt;=k) &#123;</span><br><span class="line">                ret = mid;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>222. Count Complete Tree Nodes</title>
    <url>/blog/2023/02/12/leetcode/222_CountCompleteTreeNodes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-complete-tree-nodes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        TreeNode *l = root, *r = root;</span><br><span class="line">        <span class="type">int</span> lh =<span class="number">0</span>, rh= <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>(l)&#123;</span><br><span class="line">            l=l-&gt;left;</span><br><span class="line">            lh++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r)&#123;</span><br><span class="line">            r=r-&gt;right;</span><br><span class="line">            rh++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lh == rh) <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>,lh)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">countNodes</span>(root-&gt;left)+<span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>2231. Largest Number After Digit Swaps by Parity</title>
    <url>/blog/2023/02/12/leetcode/2231_LargestNumberAfterDigitSwapsbyParity/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/largest-number-after-digit-swaps-by-parity/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestInteger</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">his</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span>, vec</span>;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            his[num%<span class="number">10</span>]++;</span><br><span class="line">            vec.<span class="built_in">push_back</span>(num%<span class="number">10</span>);</span><br><span class="line">            num/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> o = <span class="number">9</span>, e = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:vec)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(his[o]==<span class="number">0</span>) o-=<span class="number">2</span>;</span><br><span class="line">                his[o]--;</span><br><span class="line">                ret = <span class="number">10</span>*ret +o;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(his[e] ==<span class="number">0</span>) e-=<span class="number">2</span>;</span><br><span class="line">                his[e]--;</span><br><span class="line">                ret = <span class="number">10</span>*ret + e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>2235. Add Two Integers</title>
    <url>/blog/2023/02/12/leetcode/2235_AddTwoIntegers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/add-two-integers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-native"><a href="#option-1-native" class="headerlink" title="option 1 - native"></a>option 1 - native</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-without"><a href="#option-2-without" class="headerlink" title="option 2 - without +"></a>option 2 - without <code>+</code></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(num2!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> total = num1^num2;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> carry = num1&amp;num2;</span><br><span class="line">            </span><br><span class="line">            num1 = total;</span><br><span class="line">            num2 = carry&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(num2)&#123;</span><br><span class="line">            <span class="type">int</span> carry = (num1&amp;num2&amp;<span class="number">0x7fffffff</span>)&lt;&lt;<span class="number">1</span>, total = num1^num2;</span><br><span class="line">            num2 = carry, num1 = total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2236. Root Equals Sum of Children</title>
    <url>/blog/2023/02/12/leetcode/2236_RootEqualsSumofChildren/</url>
    <content><![CDATA[<h2 id="problem-https-leetcode-com-problems-root-equals-sum-of-children"><a href="#problem-https-leetcode-com-problems-root-equals-sum-of-children" class="headerlink" title="[problem](https://leetcode.com/problems/root-equals-sum-of-children/"></a>[problem](<a href="https://leetcode.com/problems/root-equals-sum-of-children/">https://leetcode.com/problems/root-equals-sum-of-children/</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// exactly 3 nodes</span></span><br><span class="line">        <span class="keyword">return</span> root-&gt;val == root-&gt;left-&gt;val +root-&gt;right-&gt;val;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2239. Find Closest Number to Zero</title>
    <url>/blog/2023/02/12/leetcode/2239_FindClosestNumbertoZero/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-closest-number-to-zero/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findClosestNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(n) &lt;= <span class="built_in">abs</span>(ret) ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(n)==<span class="built_in">abs</span>(ret) &amp;&amp; n&gt;<span class="number">0</span>) ret= n;</span><br><span class="line">                <span class="comment">// else if(abs(n) == abs(ret)) continue;</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(n) &lt; <span class="built_in">abs</span>(ret)) ret = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>223. Rectangle Area</title>
    <url>/blog/2023/02/12/leetcode/223_RectangleArea/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rectangle-area/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isRectangleOverlap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; rec1, vector&lt;<span class="type">int</span>&gt;&amp; rec2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  加等號 是因為To be clear, two rectangles that only touch at the corner or edges do not overlap.</span></span><br><span class="line">        <span class="keyword">if</span>(rec1[<span class="number">2</span>] &lt;= rec2[<span class="number">0</span>] ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(rec1[<span class="number">0</span>] &gt;= rec2[<span class="number">2</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(rec1[<span class="number">1</span>] &gt;= rec2[<span class="number">3</span>] ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(rec1[<span class="number">3</span>] &lt;= rec2[<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">computeArea</span><span class="params">(<span class="type">int</span> ax1, <span class="type">int</span> ay1, <span class="type">int</span> ax2, <span class="type">int</span> ay2, <span class="type">int</span> bx1, <span class="type">int</span> by1, <span class="type">int</span> bx2, <span class="type">int</span> by2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// determin overlap</span></span><br><span class="line">        <span class="comment">// overlap</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; rec1 = &#123;ax1, ay1, ax2, ay2&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; rec2 = &#123;bx1, by1, bx2, by2&#125;;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isRectangleOverlap</span>(rec1 , rec2))&#123;</span><br><span class="line">            <span class="comment">// intersection</span></span><br><span class="line">            <span class="type">int</span> inter_x1 = <span class="built_in">max</span>(ax1, bx1) ;</span><br><span class="line">            <span class="type">int</span> inter_x2 = <span class="built_in">min</span>(ax2, bx2);</span><br><span class="line">            <span class="type">int</span> inter_y1 = <span class="built_in">max</span>(ay1, by1);</span><br><span class="line">            <span class="type">int</span> inter_y2 =  <span class="built_in">min</span>(ay2, by2) ;</span><br><span class="line">            <span class="type">int</span> intersection = (inter_y2-inter_y1) * (inter_x2-inter_x1);</span><br><span class="line">            <span class="type">int</span> uion = (ay2-ay1)*(ax2-ax1) + (by2-by1)*(bx2-bx1);</span><br><span class="line">            <span class="keyword">return</span> uion - intersection;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// not overlap</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">return</span> (ay2-ay1)*(ax2-ax1) + (by2-by1)*(bx2-bx1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2240. Number of Ways to Buy Pens and Pencils</title>
    <url>/blog/2023/02/12/leetcode/2240_NumberofWaystoBuyPensandPencils/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">waysToBuyPensPencils</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span> cost1, <span class="type">int</span> cost2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  cost1* x + cost2 * y &lt;=total  所有解的個數</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// option 1  brute force</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// long long ret = 0;</span></span><br><span class="line">        <span class="comment">// int n = total/cost1, m = total/cost2;</span></span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=n;++i)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j=0;j&lt;=m;++j)&#123;</span></span><br><span class="line">        <span class="comment">//         if(i*cost1+j*cost2&lt;=total) &#123;</span></span><br><span class="line">        <span class="comment">//             ret++;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return ret;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// option 2 pruning</span></span><br><span class="line">        <span class="comment">// long long ret = 0;</span></span><br><span class="line">        <span class="comment">// int n = total/cost1, m = total/cost2;</span></span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=n;++i)&#123;</span></span><br><span class="line">        <span class="comment">//     int k =0;</span></span><br><span class="line">        <span class="comment">//     for(int j = m;j&gt;-1;j--)&#123;</span></span><br><span class="line">        <span class="comment">//         if(cost1*i + cost2*j &lt;=total)&#123;</span></span><br><span class="line">        <span class="comment">//             k = j;</span></span><br><span class="line">        <span class="comment">//             break;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     ret+= k+1;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return ret;</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(total&lt;cost1 &amp;&amp; total &lt;cost2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(total&lt;cost1)&#123;</span><br><span class="line">            ret = (total/cost2) +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(total&lt;cost2)&#123;</span><br><span class="line">            ret = (total/cost1) +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> val1 = <span class="built_in">max</span>(cost1, cost2), val2 = <span class="built_in">min</span>(cost1, cost2);</span><br><span class="line">        <span class="type">int</span> n = total/val1;</span><br><span class="line">        <span class="comment">// n 短邊</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            ret+= (total/val2)+<span class="number">1</span>;</span><br><span class="line">            total-=val1;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complecity <code>O(n)</code></li>
<li>space complecity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2241. Design an ATM Machine</title>
    <url>/blog/2023/02/12/leetcode/2241_DesignanATMMachine/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-an-atm-machine/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ATM</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">long</span>&gt; bank;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mp = &#123;<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>&#125;;</span><br><span class="line">    <span class="built_in">ATM</span>() &#123;</span><br><span class="line">        bank = <span class="built_in">vector</span>&lt;<span class="type">long</span>&gt;(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deposit</span><span class="params">(vector&lt;<span class="type">int</span>&gt; banknotesCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i) bank[i]+=(<span class="type">long</span>)banknotesCount[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">withdraw</span><span class="params">(<span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mock = amount ;</span><br><span class="line">        vector&lt;<span class="type">long</span>&gt; copy = bank;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; used = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>;i&gt;<span class="number">-1</span> ;i--)&#123;</span><br><span class="line">            <span class="type">int</span> times = mock/mp[i];</span><br><span class="line">            times = <span class="built_in">min</span>((<span class="type">long</span>)times, copy[i]);</span><br><span class="line">            <span class="comment">// 剩餘 ATM 該種幣值的數量 與 貪婪地一次可取該幣別的最大數量</span></span><br><span class="line">            <span class="comment">// Amount of this currency remaining in the bank</span></span><br><span class="line">            <span class="comment">// 考慮到 ATM 剩餘數量不足以去做提款的動作</span></span><br><span class="line">            mock -= times*mp[i];</span><br><span class="line">            copy[i]-=times;</span><br><span class="line">            used[i]+=times;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mock==<span class="number">0</span>)&#123;</span><br><span class="line">            bank = copy;</span><br><span class="line">            <span class="keyword">return</span> used;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">-1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2243. Calculate Digit Sum of a String</title>
    <url>/blog/2023/02/12/leetcode/2243_CalculateDigitSumofaString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/calculate-digit-sum-of-a-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">digitSum</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">size</span>()&gt;k)&#123;</span><br><span class="line">            vector&lt;string&gt; next;</span><br><span class="line">            <span class="type">int</span> i ;</span><br><span class="line">            <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i+=k)&#123;</span><br><span class="line">                next.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i,<span class="built_in">min</span>(k, (<span class="type">int</span>)s.<span class="built_in">size</span>()-i)) ) ;</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span>(string p:next)&#123;</span><br><span class="line">                <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c:p) val +=(c-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                s+=<span class="built_in">to_string</span>(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2244. Minimum Rounds to Complete All Tasks</title>
    <url>/blog/2023/02/12/leetcode/2244_MinimumRoundstoCompleteAllTasks/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minStep</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7   8</span></span><br><span class="line">        <span class="comment">//  1   1   1   1   2   2   2   3   3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  0   1   2   3   4</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span> || n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i<span class="number">-2</span>]+<span class="number">1</span>, dp[i<span class="number">-3</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumRounds</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; tasks)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t:tasks) mp[t]++;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;m:mp)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="built_in">minStep</span>(m.second);</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            step+=count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumRounds</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; tasks)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t:tasks) mp[t]++;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;m:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.second==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            <span class="type">double</span> x = (<span class="type">double</span>)m.second/<span class="number">3.0</span>;</span><br><span class="line">            step+=<span class="built_in">ceil</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code> <code>O(logn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2248. Intersection of Multiple Arrays</title>
    <url>/blog/2023/02/12/leetcode/2248_IntersectionofMultipleArrays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/intersection-of-multiple-arrays/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-native"><a href="#option-1-native" class="headerlink" title="option 1 - native"></a>option 1 - native</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="comment">// for(auto v:nums) sort(v.begin(), v.end());</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m=nums[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> cand = nums[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> a:nums[j])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cand == a) count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==n) ret.<span class="built_in">push_back</span>(cand);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><p>因為每個子陣列元素唯一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> a:num) vec[a]++;</span><br><span class="line">        </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10001</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[i]==n) ret.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nmm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(10000n)</code></li>
<li>space complexity <code>O(10000)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2249. Count Lattice Points Inside a Circle</title>
    <url>/blog/2023/02/12/leetcode/2249_CountLatticePointsInsideaCircle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-lattice-points-inside-a-circle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countLatticePoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; circles)</span> </span>&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; &amp;circle: circles)&#123;</span><br><span class="line">            <span class="type">int</span> ox = circle[<span class="number">0</span>], oy = circle[<span class="number">1</span>], r = circle[<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> lx = ox - r;</span><br><span class="line">            <span class="type">int</span> rx = ox + r;</span><br><span class="line">            <span class="type">int</span> ly = oy - r;</span><br><span class="line">            <span class="type">int</span> ry = oy + r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x = lx;x&lt;=rx;++x)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> y = ly;y&lt;=ry ; ++y)&#123;</span><br><span class="line">                    <span class="comment">// check </span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">pow</span>((x-ox),<span class="number">2</span>) +<span class="built_in">pow</span>( (y-oy),<span class="number">2</span>)&lt;=r*r)&#123;</span><br><span class="line">                        s.<span class="built_in">insert</span>(&#123;x,y&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nxy)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>224. Basic Calculator</title>
    <url>/blog/2023/02/12/leetcode/224_BasicCalculator/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/basic-calculator/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; n;++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;n &amp;&amp; s[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    num = <span class="number">10</span>*num + (s[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                res += sign*num;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>) sign = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) sign = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(res);</span><br><span class="line">                sta.<span class="built_in">push</span>(sign);</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                res*= sta.<span class="built_in">top</span>();sta.<span class="built_in">pop</span>();</span><br><span class="line">                res+= sta.<span class="built_in">top</span>(); sta.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2250. Count Number of Rectangles Containing Each Point</title>
    <url>/blog/2023/02/12/leetcode/2250_CountNumberofRectanglesContainingEachPoint/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countRectangles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; rectangles, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TLE, O(nm)</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:points)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> r:rectangles)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p[<span class="number">0</span>]&lt;=r[<span class="number">0</span>] &amp;&amp; p[<span class="number">1</span>]&lt;=r[<span class="number">1</span>]) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><p>Sort the rectangles at each height and use binary search.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countRectangles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; rectangles, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">(size(rectangles))</span>, <span class="title">maxy</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; r : rectangles)   maxy = <span class="built_in">max</span>(maxy, r[<span class="number">1</span>]);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ls[maxy + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// vector&lt;vector&lt;int&gt;&gt; ls(maxy+1);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; r : rectangles)  ls[r[<span class="number">1</span>]].<span class="built_in">push_back</span>(r[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt;= maxy; ++y)  <span class="built_in">sort</span>(ls[y].<span class="built_in">begin</span>(), ls[y].<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:points)&#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y=p[<span class="number">1</span>]; y&lt;=maxy; ++y) &#123;</span><br><span class="line">                <span class="keyword">auto</span> cnt = ls[y].<span class="built_in">end</span>() - <span class="built_in">lower_bound</span>(ls[y].<span class="built_in">begin</span>(), ls[y].<span class="built_in">end</span>(), p[<span class="number">0</span>]);</span><br><span class="line">                res += cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(res);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>2251. Number of Flowers in Full Bloom</title>
    <url>/blog/2023/02/12/leetcode/2251_NumberofFlowersinFullBloom/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-flowers-in-full-bloom">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>沒解出來, out of memory</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fullBloomFlowers</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flowers, vector&lt;<span class="type">int</span>&gt;&amp; persons)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// prefix sum =&gt; out of memory</span></span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> f:flowers) r = <span class="built_in">max</span>(r, f[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:persons) r= <span class="built_in">max</span>(r, p);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(r+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> f:flowers)&#123;</span><br><span class="line">            prefix[f[<span class="number">0</span>]]++;</span><br><span class="line">            <span class="keyword">if</span>( f[<span class="number">1</span>]+<span class="number">1</span> &lt; r+<span class="number">1</span>) prefix[f[<span class="number">1</span>]+<span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;r+<span class="number">1</span>;++i) prefix[i]+=prefix[i<span class="number">-1</span>];</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:persons) ret.<span class="built_in">push_back</span>(prefix[p]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-reduce-prefix-to-use-hash"><a href="#option-1-reduce-prefix-to-use-hash" class="headerlink" title="option 1 - reduce prefix to use hash"></a>option 1 - reduce prefix to use hash</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fullBloomFlowers</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flowers, vector&lt;<span class="type">int</span>&gt;&amp; persons)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// prefix sum =&gt; out of memory</span></span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="comment">// order by key</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp; f:flowers)&#123;</span><br><span class="line">            mp[f[<span class="number">0</span>]]++;</span><br><span class="line">            mp[f[<span class="number">1</span>]+<span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  &#123;1,1&#125; &#123;3,1&#125; &#123;4,1&#125; &#123;7,-1&#125; &#123;8,-1&#125; &#123;9,1&#125; &#123;13,-1&#125; &#123;14,-1&#125;</span></span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">next</span>(mp.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="comment">// recovery prefix amp</span></span><br><span class="line">        <span class="keyword">for</span>(;it!=mp.<span class="built_in">end</span>();++it) it-&gt;second+=<span class="built_in">prev</span>(it)-&gt;second;</span><br><span class="line">        <span class="comment">//  &#123;1,1&#125; &#123;3,2&#125; &#123;4,3&#125; &#123;7,2&#125; &#123;8,1&#125; &#123;9,2&#125; &#123;13,1&#125; &#123;14,0&#125;</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; p:persons)&#123;</span><br><span class="line">            it = mp.<span class="built_in">upper_bound</span>(p);</span><br><span class="line">            <span class="comment">// upper_bound 找出 key 大於 p 的最小位置，</span></span><br><span class="line">            <span class="comment">// p 落在 it 與it-1 區間</span></span><br><span class="line">            <span class="keyword">if</span>(it==mp.<span class="built_in">begin</span>()) ret.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> ret.<span class="built_in">push_back</span>(<span class="built_in">prev</span>(it)-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogm)</code></li>
<li>space complexity <code>O(m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
        <tag>Binary Search</tag>
        <tag>Sweep line</tag>
      </tags>
  </entry>
  <entry>
    <title>2255. Count Prefixes of a Given String</title>
    <url>/blog/2023/02/12/leetcode/2255_CountPrefixesofaGivenString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-prefixes-of-a-given-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPrefixes</span><span class="params">(vector&lt;string&gt;&amp; words, string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            string temp = s.<span class="built_in">substr</span>(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> word:words)&#123;</span><br><span class="line">                <span class="keyword">if</span>(word == temp) count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2256. Minimum Average Difference</title>
    <url>/blog/2023/02/12/leetcode/2256_MinimumAverageDifference/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-average-difference/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumAverageDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> total = <span class="number">0</span>, ret = INT_MAX , ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> n:nums) total+=n;</span><br><span class="line">        <span class="type">long</span> lsum = <span class="number">0</span>, rsum = total;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            lsum+=nums[i];</span><br><span class="line">            rsum-=nums[i];</span><br><span class="line">            <span class="type">int</span> lv , rv ;</span><br><span class="line">            lv = lsum/(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==n<span class="number">-1</span>) rv = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">else</span> rv = rsum/(n-i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(lv-rv) &lt; ret)&#123;</span><br><span class="line">                ret = <span class="built_in">abs</span>(lv-rv);</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>2257. Count Unguarded Cells in the Grid</title>
    <url>/blog/2023/02/12/leetcode/2257_CountUnguardedCellsintheGrid/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-unguarded-cells-in-the-grid/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; map;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n,<span class="type">int</span> i, <span class="type">int</span> j, vector&lt;<span class="type">int</span>&gt;&amp; dirs)</span></span>&#123;</span><br><span class="line">        i+=dirs[<span class="number">0</span>];</span><br><span class="line">        j+=dirs[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;m<span class="number">-1</span> || j&gt;n<span class="number">-1</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        map[i][j] = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(m,n,i,j, dirs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countUnguarded</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; guards, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; walls)</span> </span>&#123;</span><br><span class="line">        map = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">1</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// guards and Walls is zero</span></span><br><span class="line">        <span class="comment">// the cell is guarded is two</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g:guards) map[g[<span class="number">0</span>]][g[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w:walls) map[w[<span class="number">0</span>]][w[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> guard:guards)&#123;</span><br><span class="line">            <span class="type">int</span> i = guard[<span class="number">0</span>], j= guard[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;dir:dirs) <span class="built_in">dfs</span>(m,n,i,j,dir);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[i][j] == <span class="number">1</span>) count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2259. Remove Digit From Number to Maximize Result</title>
    <url>/blog/2023/02/12/leetcode/2259_RemoveDigitFromNumbertoMaximizeResult/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDigit</span><span class="params">(string number, <span class="type">char</span> digit)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; count;</span><br><span class="line">        <span class="type">int</span> n = number.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i] == digit) count.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> d:count)&#123;</span><br><span class="line">            string str ;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=d) str+=number[i];</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret[ret.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-greedy"><a href="#option-2-greedy" class="headerlink" title="option 2 - greedy"></a>option 2 - greedy</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDigit</span><span class="params">(string number, <span class="type">char</span> digit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = number.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i] == digit &amp;&amp; number[i+<span class="number">1</span>]&gt;digit)&#123;</span><br><span class="line">                <span class="keyword">return</span> number.<span class="built_in">substr</span>(<span class="number">0</span>,i) +number.<span class="built_in">substr</span>(i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// find last digit</span></span><br><span class="line">        <span class="type">int</span> last_d = number.<span class="built_in">find_last_of</span>(digit);</span><br><span class="line">        <span class="keyword">return</span> number.<span class="built_in">substr</span>(<span class="number">0</span>,last_d)+number.<span class="built_in">substr</span>(last_d+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n^2)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>225. Implement Stack using Queues</title>
    <url>/blog/2023/02/12/leetcode/225_ImplementStackusingQueues/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/implement-stack-using-queues/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">int</span> ret ;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">            temp.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ret = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(temp.<span class="built_in">front</span>());</span><br><span class="line">            temp.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">int</span> ret ;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">            ret = q.<span class="built_in">front</span>();</span><br><span class="line">            temp.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(temp.<span class="built_in">front</span>());</span><br><span class="line">            temp.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q1, q2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">empty</span>()) q1.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q1.<span class="built_in">size</span>()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                q2.<span class="built_in">push</span>(x);</span><br><span class="line">                <span class="type">int</span> size = q1.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">while</span>(size &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">                    q1.<span class="built_in">pop</span>();</span><br><span class="line">                    size--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(q2.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                q1.<span class="built_in">push</span>(x);</span><br><span class="line">                <span class="type">int</span> size = q2.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">while</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    q1.<span class="built_in">push</span>(q2.<span class="built_in">front</span>());</span><br><span class="line">                    q2.<span class="built_in">pop</span>();</span><br><span class="line">                    size--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q1.<span class="built_in">size</span>()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> t = q1.<span class="built_in">front</span>();</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(q2.<span class="built_in">size</span>()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> t = q2.<span class="built_in">front</span>();</span><br><span class="line">            q2.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(q1.<span class="built_in">size</span>()&gt;<span class="number">0</span>) <span class="keyword">return</span> q1.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(q2.<span class="built_in">size</span>()&gt;<span class="number">0</span>) <span class="keyword">return</span> q2.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.<span class="built_in">empty</span>() &amp;&amp; q2.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>pop and top operation time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>queue</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>2260. Minimum Consecutive Cards to Pick Up</title>
    <url>/blog/2023/02/12/leetcode/2260_MinimumConsecutiveCardstoPickUp/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-two-pass"><a href="#option-1-two-pass" class="headerlink" title="option 1 - two pass"></a>option 1 - two pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCardPickup</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="type">int</span> n = cards.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) mp[cards[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">size</span>() == n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> ret = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.second.<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m.second.<span class="built_in">size</span>()<span class="number">-1</span>;++i) ret = <span class="built_in">min</span>(ret, <span class="number">1</span> + m.second[i+<span class="number">1</span>] - m.second[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-one-pass"><a href="#option-2-one-pass" class="headerlink" title="option 2 - one pass"></a>option 2 - one pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCardPickup</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> n = cards.<span class="built_in">size</span>(), ret = INT_MAX;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(cards[i]))&#123;</span><br><span class="line">                <span class="comment">// track last</span></span><br><span class="line">                ret = <span class="built_in">min</span>(ret, i-mp[cards[i]]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mp[cards[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret==INT_MAX?<span class="number">-1</span>:ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-vector-instead-of-hash"><a href="#option-3-vector-instead-of-hash" class="headerlink" title="option 3 - vector instead of hash"></a>option 3 - vector instead of hash</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCardPickup</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> last[<span class="number">1000001</span>] = &#123;&#125;, ret = INT_MAX;</span><br><span class="line">        <span class="type">int</span> n = cards.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (last[cards[i]]) ret = <span class="built_in">min</span>(ret, i - last[cards[i]] + <span class="number">2</span>);</span><br><span class="line">            last[cards[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret==INT_MAX?<span class="number">-1</span>:ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2264. Largest 3-Same-Digit Number in String</title>
    <url>/blog/2023/02/12/leetcode/2264_Largest3-Same-DigitNumberinString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/largest-3-same-digit-number-in-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isGood</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (str[<span class="number">0</span>] ==str[<span class="number">1</span>]) &amp;&amp; (str[<span class="number">1</span>]==str[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBigger</span><span class="params">(string a, string b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>&gt;b[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">largestGoodInteger</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> n = num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">-3</span>;++i)&#123;</span><br><span class="line">            string temp = num.<span class="built_in">substr</span>(i,<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isGood</span>(temp))&#123;</span><br><span class="line">                <span class="comment">// compare</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isBigger</span>(temp,ret)) ret = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">largestGoodInteger</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">-1</span>, n=num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]==num[i+<span class="number">1</span>] &amp;&amp; num[i]==num[i+<span class="number">2</span>] )&#123;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, num[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret!=<span class="number">-1</span>? <span class="built_in">string</span>(<span class="number">3</span>,ret+<span class="string">&#x27;0&#x27;</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2265. Count Nodes Equal to Average of Subtree</title>
    <url>/blog/2023/02/12/leetcode/2265_CountNodesEqualtoAverageofSubtree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li><p>另外建立兩棵樹，分別代表原先的樹</p>
<ul>
<li>節點數</li>
<li>總和<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode * <span class="title">Sumtree</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// postorder</span></span><br><span class="line">        TreeNode *ret = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)&#123;</span><br><span class="line">            ret-&gt;left = <span class="built_in">Sumtree</span>(root-&gt;left);</span><br><span class="line">            ret-&gt;val += ret-&gt;left-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) &#123;</span><br><span class="line">            ret-&gt;right = <span class="built_in">Sumtree</span>(root-&gt;right);</span><br><span class="line">            ret-&gt;val += ret-&gt;right-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        ret-&gt;val += root-&gt;val;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode * <span class="title">CountNode</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode *ret = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)&#123;</span><br><span class="line">            ret-&gt;left = <span class="built_in">CountNode</span>(root-&gt;left);</span><br><span class="line">            ret-&gt;val += ret-&gt;left-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)&#123;</span><br><span class="line">            ret-&gt;right = <span class="built_in">CountNode</span>(root-&gt;right);</span><br><span class="line">            ret-&gt;val += ret-&gt;right-&gt;val;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;right);</span><br><span class="line">        cout&lt;&lt;root-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">averageOfSubtree</span><span class="params">(<span class="type">int</span> &amp;ret , TreeNode* root, TreeNode *sum, TreeNode * count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(sum-&gt;val/ count-&gt;val == root-&gt;val) ret++;</span><br><span class="line">        <span class="built_in">averageOfSubtree</span>(ret, root-&gt;left, sum-&gt;left, count-&gt;left);</span><br><span class="line">        <span class="built_in">averageOfSubtree</span>(ret, root-&gt;right, sum-&gt;right, count-&gt;right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">averageOfSubtree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Node(node-&gt;val), number of node, sum</span></span><br><span class="line">        TreeNode *sum = <span class="built_in">Sumtree</span>(root);</span><br><span class="line">        <span class="comment">// postorder(sum);</span></span><br><span class="line">        TreeNode *count = <span class="built_in">CountNode</span>(root);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// postorder(count);</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">averageOfSubtree</span>(ret,root, sum, count);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>簡化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">dfs</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">auto</span> left = <span class="built_in">dfs</span>(root-&gt;left), right = <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">        <span class="type">int</span> sum = left.first + right.first + root-&gt;val;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span> + left.second + right.second;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == sum / count) cnt++;</span><br><span class="line">        <span class="keyword">return</span> &#123;sum, count&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">averageOfSubtree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2266. Count Number of Texts</title>
    <url>/blog/2023/02/12/leetcode/2266_CountNumberofTexts/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-number-of-texts/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> mod = <span class="number">1e+9</span>+<span class="number">7</span>;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">split</span>(string pressedKeys)&#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; nums;</span><br><span class="line">        <span class="comment">//avoid overflow</span></span><br><span class="line">        <span class="type">int</span> cand = pressedKeys[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>, n = pressedKeys.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pressedKeys[i] == pressedKeys[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// string convert to integer</span></span><br><span class="line">                nums.<span class="built_in">push_back</span>(&#123;i-j,cand &#125;);</span><br><span class="line">                <span class="comment">// update index and cand variable</span></span><br><span class="line">                j = i;</span><br><span class="line">                cand = pressedKeys[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(&#123;i-j,cand &#125;);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">dp3</span><span class="params">(<span class="type">int</span> d )</span></span>&#123;</span><br><span class="line">        <span class="comment">//  2   2   2-&gt; 3</span></span><br><span class="line">        <span class="comment">//  1   2   4</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2   2   2   2 -&gt; 7</span></span><br><span class="line">        <span class="comment">//  1   2   4   7</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  7   7   7   7 -&gt;</span></span><br><span class="line">        <span class="comment">//  1   2   4   8</span></span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c =<span class="number">4</span>, ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>;i&lt;=d;++i)&#123;</span><br><span class="line">            ret = (a+b+c)%mod;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">            c=ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">dp4</span><span class="params">(<span class="type">int</span> d )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">4</span>) <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        <span class="type">long</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c =<span class="number">4</span>, dd = <span class="number">8</span> , ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">5</span>;i&lt;=d;++i)&#123;</span><br><span class="line">            ret = (a+b+c+dd)%mod;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">            c=dd;</span><br><span class="line">            dd =ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countTexts</span><span class="params">(string pressedKeys)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="comment">//  2   2   2   3   3</span></span><br><span class="line">        <span class="comment">//  1   2   4   1   2</span></span><br><span class="line">        <span class="comment">// 4*2</span></span><br><span class="line">        <span class="comment">//222=&gt; aaa, ab, ba, c</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2   2   2   2   2</span></span><br><span class="line">        <span class="comment">//  1   2   4   7   13 </span></span><br><span class="line">        <span class="comment">//2222 =&gt; aaaa, aab, aba,baa, ac,    bb, ca</span></span><br><span class="line">        <span class="comment">//7777 =&gt; pppp, pqp, ppq, qpp, qq, pr,rp, s</span></span><br><span class="line">        <span class="comment">//22222=&gt; aaaaa, baaa, abaa, aaba, aaab, caa, aca, aac,     bba, bab, abb, cb, bc</span></span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; nums = <span class="built_in">split</span>(pressedKeys);</span><br><span class="line">        <span class="type">long</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> [numberofDigits, n]:nums)&#123;</span><br><span class="line">            <span class="comment">// // avoid overflow</span></span><br><span class="line">            <span class="keyword">if</span>(n %<span class="number">10</span> ==<span class="number">7</span> || n%<span class="number">10</span> == <span class="number">9</span>) ret*= <span class="built_in">dp4</span>(numberofDigits);</span><br><span class="line">            <span class="keyword">else</span> ret *= <span class="built_in">dp3</span>(numberofDigits);</span><br><span class="line">            ret%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2269. Find the K-Beauty of a Number</title>
    <url>/blog/2023/02/12/leetcode/2269_FindtheK-BeautyofaNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-k-beauty-of-a-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isDivisor</span><span class="params">(string a, <span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">// string to int</span></span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:a) n= <span class="number">10</span>*n+(c-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;a&lt;&lt;&quot;\t&quot;&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> num%n==<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divisorSubstrings</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sliding window to get all substring which size is k</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// int convert to string</span></span><br><span class="line">        string strs;</span><br><span class="line">        <span class="type">int</span> x = num;</span><br><span class="line">        <span class="keyword">while</span>(x) &#123;</span><br><span class="line">            strs+=<span class="built_in">to_string</span>(x%<span class="number">10</span>);</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(strs.<span class="built_in">begin</span>(), strs.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// cout&lt;&lt;strs&lt;&lt;endl;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k<span class="number">-1</span>;i&lt;strs.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            string tmp = strs.<span class="built_in">substr</span>(i-k+<span class="number">1</span>, k);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isDivisor</span>(tmp, num)) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>226. Invert Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/226_InvertBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/invert-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-backtracking"><a href="#option-1-backtracking" class="headerlink" title="option 1 - backtracking"></a>option 1 - backtracking</h4><ul>
<li>inorder traverse version</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// post-order</span></span><br><span class="line">        </span><br><span class="line">        root-&gt;left = <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        root-&gt;right = <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        TreeNode* temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>postorder traverse version</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        root-&gt;left = <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        root-&gt;right = <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        TreeNode* temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        queue&lt;TreeNode * &gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>(size-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">                TreeNode *temp = p-&gt;left;</span><br><span class="line">                p-&gt;left = p-&gt;right;</span><br><span class="line">                p-&gt;right = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2270. Number of Ways to Split Array</title>
    <url>/blog/2023/02/12/leetcode/2270_NumberofWaystoSplitArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-ways-to-split-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">waysToSplitArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur = <span class="number">0</span>, total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) total+=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            cur+=nums[i];</span><br><span class="line">            total-=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(cur&gt;=total) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="ananlysis"><a href="#ananlysis" class="headerlink" title="ananlysis"></a>ananlysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2273. Find Resultant Array After Removing Anagrams</title>
    <url>/blog/2023/02/12/leetcode/2273_FindResultantArrayAfterRemovingAnagrams/</url>
    <content><![CDATA[<h2 id="problems"><a href="#problems" class="headerlink" title="problems"></a><a href="https://leetcode.com/problems/find-resultant-array-after-removing-anagrams/">problems</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">removeAnagrams</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">stack&lt;<span class="type">int</span>&gt; <span class="title">sta</span><span class="params">(&#123;<span class="number">0</span>&#125;)</span></span>;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            string temp = words[i];</span><br><span class="line">            <span class="built_in">sort</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">if</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                string a = words[sta.<span class="built_in">top</span>()];</span><br><span class="line">                <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span>(a==temp) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    sta.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> i = sta.<span class="built_in">top</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(words[i]);</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>2274. Maximum Consecutive Floors Without Special Floors</title>
    <url>/blog/2023/02/12/leetcode/2274_Maximum%20ConsecutiveFloorsWithoutSpecialFloors/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxConsecutive</span><span class="params">(<span class="type">int</span> bottom, <span class="type">int</span> top, vector&lt;<span class="type">int</span>&gt;&amp; special)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(special.<span class="built_in">begin</span>(), special.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        special.<span class="built_in">insert</span>(special.<span class="built_in">begin</span>(), bottom<span class="number">-1</span>);</span><br><span class="line">        special.<span class="built_in">push_back</span>(top+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> n =special.<span class="built_in">size</span>() ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) ret = <span class="built_in">max</span>(ret, special[i]-special[i<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(mligm)</code> m is the legth of <code>vector&lt;int&gt;&amp; special</code></li>
<li>sparse complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2275. Largest Combination With Bitwise AND Greater Than Zero</title>
    <url>/blog/2023/02/12/leetcode/2275_LargestCombinationWithBitwiseANDGreaterThanZero/</url>
    <content><![CDATA[<h2 id="problem-https-leetcode-com-problems-largest-combination-with-bitwise-and-greater-than-zero"><a href="#problem-https-leetcode-com-problems-largest-combination-with-bitwise-and-greater-than-zero" class="headerlink" title="[problem](https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero/"></a>[problem](<a href="https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero/">https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero/</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestCombination</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  [16,17,71,62,12,24,14]</span></span><br><span class="line">        <span class="comment">//      0010000     16</span></span><br><span class="line">        <span class="comment">//      0010001     17</span></span><br><span class="line">        <span class="comment">//      1000111     71</span></span><br><span class="line">        <span class="comment">//      0111110     62</span></span><br><span class="line">        <span class="comment">//      0001100     12</span></span><br><span class="line">        <span class="comment">//      0011000     24</span></span><br><span class="line">        <span class="comment">//      0001110     14</span></span><br><span class="line">        <span class="comment">//     &#123;1,1,4,4,4,3,2&#125;</span></span><br><span class="line">        <span class="comment">// 10000000 = 0000 0001 0110 1001 0001 1001</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// 找出最大的數字</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">31</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c:candidates)&#123;</span><br><span class="line">                <span class="keyword">if</span>( (c&gt;&gt;i)&amp;<span class="number">1</span>==<span class="number">1</span> ) vec[<span class="number">30</span>-i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, vec[<span class="number">30</span>-i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>2278. Percentage of Letter in String</title>
    <url>/blog/2023/02/12/leetcode/2278_PercentageofLetterinString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/percentage-of-letter-in-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">percentageLetter</span><span class="params">(string s, <span class="type">char</span> letter)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> &amp;c:s) count+=(c==letter);</span><br><span class="line">        <span class="type">int</span> ret=count*<span class="number">100</span>/s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2279. Maximum Bags With Full Capacity of Rocks</title>
    <url>/blog/2023/02/12/leetcode/2279_MaximumBagsWithFullCapacityofRocks/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-bags-with-full-capacity-of-rocks/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumBags</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; capacity, vector&lt;<span class="type">int</span>&gt;&amp; rocks, <span class="type">int</span> additionalRocks)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = rocks.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">temp</span><span class="params">(n,<span class="number">0</span>)</span>, vec</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            temp[i] = <span class="built_in">max</span>(<span class="number">0</span>, capacity[i] - rocks[i] );</span><br><span class="line">            <span class="keyword">if</span>(temp[i]&gt;<span class="number">0</span>)  vec.<span class="built_in">push_back</span>(temp[i]);</span><br><span class="line">            <span class="keyword">else</span> ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a = additionalRocks, i=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span>(i&lt;vec.<span class="built_in">size</span>() &amp;&amp; a - vec[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            a-=vec[i++];</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumBags</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; capacity, vector&lt;<span class="type">int</span>&gt;&amp; rocks, <span class="type">int</span> additionalRocks)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = rocks.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            capacity[i] = <span class="built_in">max</span>(<span class="number">0</span>, capacity[i] - rocks[i] );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(capacity.<span class="built_in">begin</span>(), capacity.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp;capacity[i] == <span class="number">0</span> ) i++;</span><br><span class="line">        <span class="type">int</span> ret = i;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; additionalRocks-capacity[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            additionalRocks-=capacity[i++];</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2283. Check if Number Has Equal Digit Count and Digit Value</title>
    <url>/blog/2023/02/12/leetcode/2283_CheckifNumberHasEqualDigitCountandDigitValue/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/check-if-number-has-equal-digit-count-and-digit-value/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">digitCount</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">his</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:num) his[c-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(his[i] != num[i]-<span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2284. Sender With Largest Word Count</title>
    <url>/blog/2023/02/12/leetcode/2284_SenderWithLargestWordCount/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sender-with-largest-word-count/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">split</span><span class="params">(string strs, <span class="type">char</span> delimiters)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:strs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==delimiters) size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ++size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">largestWordCount</span><span class="params">(vector&lt;string&gt;&amp; messages, vector&lt;string&gt;&amp; senders)</span> </span>&#123;</span><br><span class="line">        map&lt;string, <span class="type">int</span>&gt; mp; <span class="comment">//  If there is more than one sender with the largest word count, return the one with the lexicographically largest name.</span></span><br><span class="line">        <span class="type">int</span> n = senders.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mp[senders[i]]+=<span class="built_in">split</span>(messages[i], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[k,v]:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v&gt;=count) &#123;</span><br><span class="line">                ret = k;</span><br><span class="line">                count = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">largestWordCount</span><span class="params">(vector&lt;string&gt;&amp; messages, vector&lt;string&gt;&amp; senders)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; mp; <span class="comment">//  If there is more than one sender with the largest word count, return the one with the lexicographically largest name.</span></span><br><span class="line">        <span class="type">int</span> n = senders.<span class="built_in">size</span>();</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> words = std::<span class="built_in">count</span>(<span class="built_in">begin</span>(messages[i]), <span class="built_in">end</span>(messages[i]), <span class="string">&#x27; &#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> freq = mp[senders[i]] += words;</span><br><span class="line">            <span class="keyword">if</span>(freq &gt; count || ( freq == count &amp;&amp; senders[i]&gt;ret ) ) &#123;</span><br><span class="line">                ret = senders[i];</span><br><span class="line">                count = freq;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2285. Maximum Total Importance of Roads</title>
    <url>/blog/2023/02/12/leetcode/2285_MaximumTotalImportanceofRoads/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-total-importance-of-roads/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumImportance</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; roads)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 最多連結的給最大，然後遞減</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; arr;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; memo;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret= <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> road:roads)&#123;</span><br><span class="line">            vec[road[<span class="number">0</span>]]++;</span><br><span class="line">            vec[road[<span class="number">1</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(i,vec[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> &amp;a, <span class="keyword">auto</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.second&gt;b.second;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> cur =n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[a,b]:arr)&#123;</span><br><span class="line">            b = cur--;</span><br><span class="line">            memo[a] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> road:roads)&#123;</span><br><span class="line">            ret+= memo[road[<span class="number">0</span>]]+memo[road[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2287. Rearrange Characters to Make Target String</title>
    <url>/blog/2023/02/12/leetcode/2287_RearrangeCharacterstoMakeTargetString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rearrange-characters-to-make-target-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rearrangeCharacters</span><span class="params">(string s, string target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) vec[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> _ = <span class="number">0</span>; _ &lt; s.<span class="built_in">size</span>()/target.<span class="built_in">size</span>() ; ++_)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> a:target)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vec[a-<span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">1</span>) <span class="keyword">return</span> count;</span><br><span class="line">                vec[a-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>target complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2288. Apply Discount to Prices</title>
    <url>/blog/2023/02/12/leetcode/2288_ApplyDiscounttoPrices/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/apply-discount-to-prices/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string strs, <span class="type">char</span> delimiter)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:strs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == delimiter)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cur+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]!=<span class="string">&#x27;$&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">size</span>() ==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;str.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> c = str[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(c &lt; <span class="number">0</span> || c&gt; <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">string <span class="title">discountPrices</span><span class="params">(string sentence, <span class="type">int</span> discount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// parser</span></span><br><span class="line">        vector&lt;string&gt; parser = <span class="built_in">split</span>(sentence, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;parser.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isValid</span>(parser[i]))&#123;</span><br><span class="line">                string temp = parser[i].<span class="built_in">substr</span>(<span class="number">1</span>);    </span><br><span class="line">                <span class="comment">// convert to int</span></span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> n = <span class="number">0</span> ;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c:temp)&#123;</span><br><span class="line">                    n = <span class="number">10</span>*n + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                n *= (<span class="number">100</span>-discount);</span><br><span class="line">                std::stringstream stream;</span><br><span class="line">                stream&lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; (<span class="type">double</span>)n/<span class="number">100.0</span>;</span><br><span class="line">                std::string t = stream.<span class="built_in">str</span>();</span><br><span class="line">                ret += <span class="string">&quot;$&quot;</span> + t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ret+=parser[i];</span><br><span class="line">            <span class="keyword">if</span>(i!=parser.<span class="built_in">size</span>()<span class="number">-1</span>) ret+= <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2293. Min Max Game</title>
    <url>/blog/2023/02/12/leetcode/2293_MinMaxGame/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/min-max-game/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMaxGame</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:nums) q.<span class="built_in">push</span>(a);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> a = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        <span class="type">int</span> b = q.<span class="built_in">front</span>();</span><br><span class="line">                        q.<span class="built_in">pop</span>();</span><br><span class="line">                        q.<span class="built_in">push</span>(<span class="built_in">min</span>(a, b));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="type">int</span> a = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        <span class="type">int</span> b = q.<span class="built_in">front</span>();</span><br><span class="line">                        q.<span class="built_in">pop</span>();</span><br><span class="line">                        q.<span class="built_in">push</span>(<span class="built_in">max</span>(a, b));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">front</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O()</code></li>
<li>space complexity <code>O()</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2295. Replace Elements in an Array</title>
    <url>/blog/2023/02/12/leetcode/2295_ReplaceElementsinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/replace-elements-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arrayChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; operations)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) mp[nums[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">auto</span> op : operations)&#123;</span><br><span class="line">            nums[mp[op[<span class="number">0</span>]]] = op[<span class="number">1</span>];</span><br><span class="line">            mp[op[<span class="number">1</span>]] = mp[op[<span class="number">0</span>]];</span><br><span class="line">            mp.<span class="built_in">erase</span>(op[<span class="number">0</span>]); <span class="comment">// option</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code> </li>
<li>space complexity <code>O(n)</code>  can reduce <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2299. Strong Password Checker II</title>
    <url>/blog/2023/02/12/leetcode/2299_StrongPasswordCheckerII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/strong-password-checker-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; special = &#123;</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Rule1</span><span class="params">(string password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password.<span class="built_in">size</span>()&gt;<span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Rule2</span><span class="params">(string password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:password)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Rule3</span><span class="params">(string password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:password)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Rule4</span><span class="params">(string password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:password)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Rule5</span><span class="params">(string password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:password)&#123;</span><br><span class="line">            <span class="keyword">if</span>(special.<span class="built_in">count</span>(c)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Rule6</span><span class="params">(string password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;password.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(password[i] == password[i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">strongPasswordCheckerII</span><span class="params">(string password)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">true</span>;</span><br><span class="line">        ret &amp;= <span class="built_in">Rule1</span>(password);</span><br><span class="line">        ret &amp;= <span class="built_in">Rule2</span>(password);</span><br><span class="line">        ret &amp;= <span class="built_in">Rule3</span>(password);</span><br><span class="line">        ret &amp;= <span class="built_in">Rule4</span>(password);</span><br><span class="line">        ret &amp;= <span class="built_in">Rule5</span>(password);</span><br><span class="line">        ret &amp;= <span class="built_in">Rule6</span>(password);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>229. Majority Element II</title>
    <url>/blog/2023/02/12/leetcode/229_MajorityElementII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/majority-element-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-hash-tables"><a href="#option-1-hash-tables" class="headerlink" title="option 1 - hash tables"></a>option 1 - hash tables</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) freq[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:freq)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.second &gt; n/<span class="number">3</span>) ret.<span class="built_in">push_back</span>(m.first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="option-2-vote"><a href="#option-2-vote" class="headerlink" title="option 2  - vote"></a>option 2  - vote</h4><p>最多兩個數字出現頻率超過 n&#x2F;3</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多數投票算法 O(n) time and O(1) space</span></span><br><span class="line">        <span class="comment">// from hint: 任意一數組出現次數大於 n/3 的數最多有兩個</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> &#123;nums[<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="type">int</span> freq1 = <span class="number">0</span>, cand1 = <span class="number">0</span>, freq2 = <span class="number">0</span>, cand2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == cand1) freq1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == cand2) freq2++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(freq1==<span class="number">0</span>)&#123; cand1 = nums[i];freq1=<span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(freq2==<span class="number">0</span>) &#123;cand2 = nums[i];freq2=<span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; freq1--; freq2--; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check </span></span><br><span class="line">        freq1 = freq2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n == cand1) freq1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n== cand2) freq2++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(freq1&gt;n/<span class="number">3</span>) ret.<span class="built_in">push_back</span>(cand1);</span><br><span class="line">        <span class="keyword">if</span>(freq2&gt;n/<span class="number">3</span>) ret.<span class="built_in">push_back</span>(cand2);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - hash table <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 1 - vote<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>22. Generate Parentheses</title>
    <url>/blog/2023/02/12/leetcode/22_GenerateParentheses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/generate-parentheses/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, string  path)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 目前為止右括號用的比左括號多</span></span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">0</span> &amp;&amp; r==<span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&lt; <span class="number">0</span> || r&lt;<span class="number">0</span> ) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="built_in">backtracking</span>(l<span class="number">-1</span>, r,path+<span class="string">&#x27;(&#x27;</span> );</span><br><span class="line">        <span class="built_in">backtracking</span>(l, r<span class="number">-1</span>, path+<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">backtracking</span>(n,n, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; diff;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        diff.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n*<span class="number">2</span>;++i)&#123;</span><br><span class="line">            vector&lt;string&gt; temp1;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; temp2;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;ret.<span class="built_in">size</span>() ;++j)&#123;</span><br><span class="line">                string s = ret[j];</span><br><span class="line">                <span class="type">int</span> k = diff[j];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">2</span>*n<span class="number">-1</span>)&#123;</span><br><span class="line">                    temp1.<span class="built_in">push_back</span>(s+<span class="string">&quot;(&quot;</span>);</span><br><span class="line">                    temp2.<span class="built_in">push_back</span>(k+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(k&gt;<span class="number">0</span> &amp;&amp; i&lt;<span class="number">2</span>*n<span class="number">-1</span> || k==<span class="number">1</span> &amp;&amp; i==<span class="number">2</span>*n<span class="number">-1</span>)&#123;</span><br><span class="line">                    temp1.<span class="built_in">push_back</span>(s+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                    temp2.<span class="built_in">push_back</span>(k<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret= temp1;</span><br><span class="line">            diff = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2303. Calculate Amount Paid in Taxes</title>
    <url>/blog/2023/02/12/leetcode/2303_CalculateAmountPaidinTaxes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/calculate-amount-paid-in-taxes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">calculateTax</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; brackets, <span class="type">int</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> ret= <span class="number">0</span>;</span><br><span class="line">        brackets.<span class="built_in">insert</span>(brackets.<span class="built_in">begin</span>(),&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;brackets.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">double</span> earn = (<span class="built_in">min</span>(brackets[i][<span class="number">0</span>], income) - brackets[i<span class="number">-1</span>][<span class="number">0</span>]) ;</span><br><span class="line">            earn *= brackets[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(earn&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ret += earn  / <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2309. Greatest English Letter in Upper and Lower Case</title>
    <url>/blog/2023/02/12/leetcode/2309_GreatestEnglishLetterinUpperandLowerCase/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/greatest-english-letter-in-upper-and-lower-case/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">greatestLetter</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lower</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span>, <span class="title">upper</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="number">65</span> &amp;&amp; c&lt;=<span class="number">90</span>) upper[c-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">else</span> lower[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">25</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lower[i]&gt;<span class="number">0</span> &amp;&amp; upper[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>230. Kth Smallest Element in a BST</title>
    <url>/blog/2023/02/12/leetcode/230_KthSmallestElementinaBST/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/">problem</a></h2><blockquote>
<p>Follow up 中說假設該 BST 被修改的很频繁</p>
</blockquote>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><blockquote>
<p>follow up 必須先建立一個樹其值存該節點下包含(自己)節點。</p>
</blockquote>
<h4 id="option-1-dfs-in-order-recursive"><a href="#option-1-dfs-in-order-recursive" class="headerlink" title="option 1 - dfs in-order recursive"></a>option 1 - dfs in-order recursive</h4><p>用inorder 拜訪每個節點，每拜訪一個節點 <code>k--</code>，直到<code>k=0</code>時，便返回節點的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, <span class="type">int</span>&amp; k, <span class="type">int</span> &amp;ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, k, ret);</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) &#123;</span><br><span class="line">            ret = root-&gt;val;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, k, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root,k, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以inorder traverse方式拜訪節點並存在vector ，最後在<code>return vector[k];</code> 即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode *root, <span class="type">int</span> *k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left, k);</span><br><span class="line">        (*k)--;</span><br><span class="line">        <span class="keyword">if</span>(*k==<span class="number">0</span>)&#123;</span><br><span class="line">            ret=root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root,&amp;k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dfs-in-order-iterative"><a href="#option-2-dfs-in-order-iterative" class="headerlink" title="option 2 dfs in-order iterative"></a>option 2 dfs in-order iterative</h4><p>需要一個stack ，將當下拜訪到的節點的左子樹都每一個節點push 進去stack<br>如果拜訪到的是空節點，那則會從stack 頂部取得拜訪節點。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode *&gt; sta;</span><br><span class="line">        TreeNode * p = root;</span><br><span class="line">        <span class="keyword">while</span>(p || !sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(p)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(p);</span><br><span class="line">                p=p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            p = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            k--;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> p-&gt;val;</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3"><a href="#option-3" class="headerlink" title="option 3"></a>option 3</h4><ul>
<li>由於BST 特性，可以快速定位第k小的是在左右子樹。</li>
<li>先計算左子樹有多少節點，在判斷要往左子樹還是右子樹去尋找還是當前節點。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">count</span>(node-&gt;left)+<span class="built_in">count</span>(node-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lcount = <span class="built_in">count</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=lcount) <span class="keyword">return</span> <span class="built_in">kthSmallest</span>(root-&gt;left, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k==lcount+<span class="number">1</span>) <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">kthSmallest</span>(root-&gt;right, k-lcount<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code> </li>
<li>space complexity <code>O(h)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code> </li>
<li>space complexity <code>O(h)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code> for best case, <code>O(n^2)</code> for worst case</li>
<li>space complexity <code>O(h)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2315. Count Asterisks</title>
    <url>/blog/2023/02/12/leetcode/2315_CountAsterisks/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-asterisks/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countAsterisks</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>() ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;|&#x27;</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;s.<span class="built_in">size</span>() &amp;&amp; s[i]!=<span class="string">&#x27;|&#x27;</span>) i++;</span><br><span class="line">                <span class="comment">// i++;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">&#x27;*&#x27;</span>) ret++;</span><br><span class="line">                <span class="comment">// i++;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>231. Power of Two</title>
    <url>/blog/2023/02/12/leetcode/231_PowerofTwo/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/power-of-two/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (n&amp;(n<span class="number">-1</span>)) ==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>232. Implement Queue using Stacks</title>
    <url>/blog/2023/02/12/leetcode/232_ImplementQueueusingStacks/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/implement-queue-using-stacks/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        sta.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">int</span> ret , size = sta.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">            temp.<span class="built_in">push</span>(sta.<span class="built_in">top</span>());</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ret = sta.<span class="built_in">top</span>();</span><br><span class="line">        sta.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>()) &#123; sta.<span class="built_in">push</span>(temp.<span class="built_in">top</span>());temp.<span class="built_in">pop</span>();&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">int</span> ret ;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            temp.<span class="built_in">push</span>(ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>()) &#123; sta.<span class="built_in">push</span>(temp.<span class="built_in">top</span>());temp.<span class="built_in">pop</span>();&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt;temp;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt;value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value.<span class="built_in">empty</span>()) value.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!value.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                temp.<span class="built_in">push</span>(value.<span class="built_in">top</span>());</span><br><span class="line">                value.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            value.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                value.<span class="built_in">push</span>(temp.<span class="built_in">top</span>());</span><br><span class="line">                temp.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = value.<span class="built_in">top</span>(); </span><br><span class="line">        value.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>pop and peek operation time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>queue</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>234. Palindrome Linked List</title>
    <url>/blog/2023/02/12/leetcode/234_PalindromeLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/palindrome-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h5 id="option-1-iterative"><a href="#option-1-iterative" class="headerlink" title="option 1 - iterative"></a>option 1 - iterative</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// iterative + stack</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast =fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(slow)&#123;</span><br><span class="line">            sta.<span class="built_in">push</span>(slow-&gt;val);</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; fast-&gt;val==sta.<span class="built_in">top</span>())&#123;</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">empty</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="option-2-recursive"><a href="#option-2-recursive" class="headerlink" title="option 2 - recursive"></a>option 2 - recursive</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode *left;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(ListNode *right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">bool</span> ret = <span class="built_in">traverse</span>(right-&gt;next);</span><br><span class="line">        <span class="keyword">if</span>(left-&gt;val != right-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        left = left-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> ret ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// recursive</span></span><br><span class="line">        left = head;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>235. Lowest Common Ancestor of a Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/235_LowestCommonAncestorofaBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">problem</a></h2><blockquote>
<p>Follow up <a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree</a></p>
</blockquote>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>比較<code>root</code> <code>p</code> <code>q</code> 三個節點的值</li>
<li>如果<code>root-&gt;val</code> 是其他兩個節點的值，則<code>return root</code></li>
<li>如果<code>root-&gt;val</code> 小於其他兩節點的值，則向<code>root-&gt;right</code> 搜尋</li>
<li>如果<code>root-&gt;val</code> 大於其他兩節點的值，則向<code>root-&gt;left</code> 搜尋</li>
<li>剩餘狀況，則<code>return root</code></li>
</ul>
<h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &gt; <span class="built_in">min</span>(p-&gt;val, q-&gt;val) &amp;&amp; root-&gt;val &lt; <span class="built_in">max</span>(p-&gt;val, q-&gt;val)) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val) <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;left,p, q);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>if(root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val)</code> 可改成<br><code>if(root-&gt;val &gt; max(p-&gt;val, q-&gt;val) )</code></p>
</blockquote>
<ul>
<li>postorder<br>沒用到BST特性<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root ==p || root==q) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode *l = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode *r = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( l &amp;&amp; r) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!l) <span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-iterative"><a href="#option-2-iterative" class="headerlink" title="option 2 - iterative"></a>option 2 - iterative</h4>不斷更新root 節點</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root ==p || root==q) <span class="keyword">return</span> root;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val) root = root-&gt;left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &lt; p-&gt;val &amp;&amp; root-&gt;val &lt; q-&gt;val) root = root-&gt;right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> n is node number of tree</li>
<li>space complexity <code>O(h)</code> h is height of tree</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>236. Lowest Common Ancestor of a Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/236_LowestCommonAncestorofaBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h5 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h5><ul>
<li>先遞迴檢查 <code>p</code>和<code>q</code> 是否在<code>root</code>的左子樹</li>
<li>如果都在左子樹，則往左子樹搜尋</li>
<li>如果都不在，則往右子樹搜尋</li>
<li>其餘狀況，則<code>return root</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cover</span><span class="params">(TreeNode * node, TreeNode * p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(node==p) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cover</span>(node-&gt;left, p) || <span class="built_in">cover</span>(node-&gt;right,p); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==p || root==q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="type">bool</span> pchild = <span class="built_in">cover</span>(root-&gt;left, p);</span><br><span class="line">        <span class="type">bool</span> qchild = <span class="built_in">cover</span>(root-&gt;left, q);</span><br><span class="line">        <span class="keyword">if</span>(pchild &amp;&amp; qchild) <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!pchild &amp;&amp; !qchild) <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">return</span> root;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dfs-postorder-traverse"><a href="#option-2-dfs-postorder-traverse" class="headerlink" title="option 2 - dfs + postorder traverse"></a>option 2 - dfs + postorder traverse</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// post-order</span></span><br><span class="line">        TreeNode *left = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        TreeNode *right = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">if</span>(left &amp;&amp; right) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> left==<span class="literal">nullptr</span>?right:left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(t)</code> t is the size of the subtree for the first common ancestor on average case, <code>O(n)</code> on worst case, n is number of nodes in BT</li>
<li>space complexity <code>O(h)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code> n is number of nodes in BT</li>
<li>space complexity <code>O(h)</code> h is the height of BT</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>237. Delete Node in a Linked List</title>
    <url>/blog/2023/02/12/leetcode/237_DeleteNodeinaLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">struct</span> ListNode* node)</span> </span>&#123;</span><br><span class="line">    node-&gt;val = node-&gt;next-&gt;val;</span><br><span class="line">    node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>238. Product of Array Except Self</title>
    <url>/blog/2023/02/12/leetcode/238_ProductofArrayExceptSelf/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/product-of-array-except-self/">problem</a></h2><p>返回陣列，其元素為其餘元素相乘</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>維護兩個dp，一個從左往右累乘，另一個由右往左累乘</p>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">1</span>)</span>, <span class="title">left</span><span class="params">(n,<span class="number">1</span>)</span>, <span class="title">right</span><span class="params">(n,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//          1   2   3   4</span></span><br><span class="line">        <span class="comment">//left      1   1   2   6</span></span><br><span class="line">        <span class="comment">//right     24  12  4   1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) left[i] = left[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;i--) right[i] = right[i+<span class="number">1</span>]*nums[i+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) ret[i] = left[i]*right[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce"><a href="#option-2-reduce" class="headerlink" title="option 2 - reduce"></a>option 2 - reduce</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n,<span class="number">1</span>)</span>, <span class="title">right</span><span class="params">(n,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  1   2   3   4   </span></span><br><span class="line">        <span class="comment">//l     1   2   6</span></span><br><span class="line">        <span class="comment">//r 24  12  4   </span></span><br><span class="line">        <span class="comment">//  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;i--) right[i] = right[i+<span class="number">1</span>]*nums[i+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            cur*=nums[i<span class="number">-1</span>];</span><br><span class="line">            right[i] *= cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>239. Sliding Window Maximum</title>
    <url>/blog/2023/02/12/leetcode/239_SlidingWindowMaximum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sliding-window-maximum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li><p>time out  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret, window;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            window.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(window.<span class="built_in">size</span>()&gt;k) window.<span class="built_in">erase</span>(window.<span class="built_in">begin</span>());</span><br><span class="line">            <span class="keyword">if</span>(window.<span class="built_in">size</span>() == k)&#123;</span><br><span class="line">                <span class="type">int</span> mx = INT_MIN;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> w:window) mx = <span class="built_in">max</span>(w, mx);</span><br><span class="line">                ret.<span class="built_in">push_back</span>(mx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>monotonic queue </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MonotonicQueue</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dq.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!dq.<span class="built_in">empty</span>() &amp;&amp; dq.<span class="built_in">back</span>()&lt;n)&#123;</span><br><span class="line">            dq.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        dq.<span class="built_in">push_back</span>(n);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( n== dq.<span class="built_in">front</span>()) dq.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        MonotonicQueue mq;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mq.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;k<span class="number">-1</span>) mq.<span class="built_in">pop</span>(nums[i-k]);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) ret.<span class="built_in">push_back</span>(mq.<span class="built_in">max</span>());                  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(k)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>monotonic queue</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>23. Merge k Sorted Lists</title>
    <url>/blog/2023/02/12/leetcode/23_MergekSortedLists/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-k-sorted-lists/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-merge-lists"><a href="#option-1-merge-lists" class="headerlink" title="option 1 - merge lists"></a>option 1 - merge lists</h4><p>用for 迴圈遍歷，並兩兩linked list 合併</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeLists</span><span class="params">(ListNode *a, ListNode* b)</span></span>&#123;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>),*ans = ret;</span><br><span class="line">        <span class="keyword">while</span>(a &amp;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;val &lt; b-&gt;val)&#123;</span><br><span class="line">                ret-&gt;next = a;</span><br><span class="line">                a = a-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret-&gt;next = b;</span><br><span class="line">                b = b-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a) ret-&gt;next =a;</span><br><span class="line">        <span class="keyword">if</span>(b) ret-&gt;next = b;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 兩兩合併</span></span><br><span class="line">        <span class="keyword">if</span>(lists.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *c = lists[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;lists.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            c = <span class="built_in">mergeLists</span>(c, lists[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><p>建立一個 <code>priority_queue</code> 來儲存每個linked list的頭。<br>在遍歷pq，每次從<code>priority_queue</code>取出最小的linked list 頭，從<code>priority_queue</code> pop，再儲存linked list head-&gt;next。直到<code>priority_queue</code> 為空 </p>
<p><code>priority_queue</code> 排序可理解成<code>return a-&gt;val &gt; b-&gt;val;</code>從大排到小，但從尾部開始pop，所以每次取出的是最小的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](ListNode *a, ListNode*b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a-&gt;val &gt; b-&gt;val;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;ListNode *,vector&lt;ListNode*&gt; , <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span>(ListNode * list :lists)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list) pq.<span class="built_in">push</span>(list);</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ListNode *p = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            ret-&gt;next = p;</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(p) pq.<span class="built_in">push</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>heap pop <code>O(logn)</code><br>heap push <code>O(logn)</code></p>
</blockquote>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 merge<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(nk)</code></li>
</ul>
</li>
<li>option 2 heap<ul>
<li>time complexity <code>O(nlogk)</code></li>
<li>space complexity <code>O(n)k</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>240. Search a 2D Matrix II</title>
    <url>/blog/2023/02/12/leetcode/240_Searcha2DMatrixII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i= n<span class="number">-1</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">-1</span> &amp;&amp; j&gt;<span class="number">-1</span> &amp;&amp; i&lt;n &amp;&amp; j&lt;m)&#123;</span><br><span class="line">            <span class="type">int</span> cur = matrix[i][j];</span><br><span class="line">            <span class="keyword">if</span>(cur == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur&lt;target) j++;</span><br><span class="line">            <span class="keyword">else</span> i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - Binary Search"></a>option 2 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span> , r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">search</span>(matrix[i], target)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - Two Pointers<ul>
<li>time complexity <code>O(n+m)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - Binary Search<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>242. Valid Anagram</title>
    <url>/blog/2023/02/12/leetcode/242_ValidAnagram/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-anagram/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> s==t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-hash-table"><a href="#option-2-hash-table" class="headerlink" title="option 2 - hash table"></a>option 2 - hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) vec[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t) vec[c-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">return</span> vec==<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>2460. Apply Operations to an Array</title>
    <url>/blog/2023/02/12/leetcode/2460_ApplyOperationstoanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/apply-operations-to-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>One pass<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">applyOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n<span class="number">-1</span> &amp;&amp; nums[i] == nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                ret[k++] = nums[i]*<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ret[k++] = nums[i];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>Move Zeroes<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">applyOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[i]*=<span class="number">2</span>;</span><br><span class="line">                nums[i+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[j++], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>2465. Number of Distinct Averages</title>
    <url>/blog/2023/02/12/leetcode/2465_NumberofDistinctAverages/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-distinct-averages/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distinctAverages</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 0    1   3   4   4   5</span></span><br><span class="line">        <span class="comment">//  2.5 2.5 3.5</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>() );</span><br><span class="line">        unordered_set&lt;<span class="type">float</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(),  l = n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> t = (nums[i] + nums[n<span class="number">-1</span>-i]);</span><br><span class="line">            ret.<span class="built_in">insert</span>(t/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>2465. Number of Distinct Averages</title>
    <url>/blog/2023/02/12/leetcode/2466_CountWaysToBuildGoodStrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-ways-to-build-good-strings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// low = 3, high = 3, zero = 1, one = 1 </span></span><br><span class="line">        <span class="comment">//dp    1    2  4   8   </span></span><br><span class="line">        <span class="comment">//長度為 i 的建構方法數</span></span><br><span class="line">        <span class="comment">//ret   0   0   0   8</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// low = 2, high = 3, zero = 1, one = 2</span></span><br><span class="line">        <span class="comment">// dp   1   1   2   3</span></span><br><span class="line">        <span class="comment">// ret  0   0   2   5  </span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, mod = <span class="number">1000000007</span>;   </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(high+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=high;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= zero) dp[i] = (dp[i] + dp[i - zero]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= one) dp[i] = (dp[i] + dp[i - one]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= low) ret = (ret + dp[i]) % mod;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;     </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>2469. Convert the Temperature</title>
    <url>/blog/2023/02/12/leetcode/2469_Convert%20heTemperature/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/convert-the-temperature/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">convertTemperature</span><span class="params">(<span class="type">double</span> celsius)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        ret[<span class="number">0</span>] = celsius+<span class="number">273.15</span>;</span><br><span class="line">        ret[<span class="number">1</span>] = celsius*<span class="number">1.80</span> + <span class="number">32.0</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2470. Number of Subarrays With LCM Equal to K</title>
    <url>/blog/2023/02/12/leetcode/2470_NumberofSubarraysWithLCMEqualtoK/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-subarrays-with-lcm-equal-to-k/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarrayLCM</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> n= nums.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> t = nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                t= <span class="built_in">lcm</span>(t, nums[j]);</span><br><span class="line">                <span class="keyword">if</span>(t==k) ret++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2471. Minimum Number of Operations to Sort a Binary Tree by Level</title>
    <url>/blog/2023/02/12/leetcode/2471_Minimum%20NumberofOperationstoSortaBinaryTreebyLevel/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMinSwap</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;arr, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// temporary vector to store values, along with its index in the original vector</span></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">temp</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// values in the vector</span></span><br><span class="line">        temp[i].first = arr[i];</span><br><span class="line">        <span class="comment">// index of the particular value.</span></span><br><span class="line">        temp[i].second = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//sort the temp vector according to the values</span></span><br><span class="line">    <span class="built_in">sort</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// variable to store the answer</span></span><br><span class="line">    <span class="type">int</span> minimum_swaps = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If there is no need to swap then continue</span></span><br><span class="line">        <span class="keyword">if</span> (temp[i].second == i <span class="keyword">or</span> temp[i].first == arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// swap the values accordingly</span></span><br><span class="line">            <span class="built_in">swap</span>(temp[i].first, temp[temp[i].second].first);</span><br><span class="line">            <span class="comment">// swap the indices also within the temp array also</span></span><br><span class="line">            <span class="built_in">swap</span>(temp[i].second, temp[temp[i].second].second);</span><br><span class="line">            <span class="comment">// stay on the same position until, we fulfill the criterion</span></span><br><span class="line">            <span class="keyword">if</span> (temp[i].second != i)</span><br><span class="line">                i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//increment the answer</span></span><br><span class="line">        minimum_swaps++;</span><br><span class="line">        <span class="comment">// move to the next index</span></span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minimum_swaps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">     vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;TreeNode *&gt;<span class="built_in">q</span>(&#123;root&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; level;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                </span><br><span class="line">                TreeNode *p =  q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                level.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(level);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumOperations</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; level = <span class="built_in">levelOrder</span>(root);</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(vector arr:level)</span><br><span class="line">        &#123;</span><br><span class="line">            ret+=<span class="built_in">findMinSwap</span>(arr, arr.<span class="built_in">size</span>());</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>2475. Number of Unequal Triplets in Array</title>
    <url>/blog/2023/02/12/leetcode/2475_NumberofUnequalTripletsinArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-unequal-triplets-in-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution 1"></a>solution 1</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">unequalTriplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2 3 4 4 4</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n<span class="number">-1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = j+<span class="number">1</span>;k&lt;n;++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]!=nums[j] &amp;&amp; nums[j]!=nums[k]) count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>sloution 1<ul>
<li>time complexity <code>O(n^3)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>solution 2<ul>
<li>time complexity <code>O()</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>2476. Closest Nodes Queries in a Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/2476_ClosestNodesQueriesinaBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *root, vector&lt;<span class="type">int</span>&gt; &amp;ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, ret);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">closestNodes</span>(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; queries) &#123;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(queries.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="built_in">traverse</span>(root, nums);</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// for(int r:nums) cout&lt;&lt;r&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> q=<span class="number">0</span>;q&lt;queries.<span class="built_in">size</span>() ; ++q)&#123;</span><br><span class="line">            <span class="keyword">if</span>(queries[q]&lt;nums[<span class="number">0</span>])&#123;</span><br><span class="line">                    res[q][<span class="number">0</span>] =<span class="number">-1</span>;</span><br><span class="line">                    res[q][<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(queries[q] &gt; nums[n<span class="number">-1</span>])&#123;</span><br><span class="line">                    res[q][<span class="number">0</span>] = nums[n<span class="number">-1</span>];</span><br><span class="line">                    res[q][<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 1 2 4 6 9 13 14 15 </span></span><br><span class="line">                <span class="comment">// binary search</span></span><br><span class="line">                <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                    <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(nums[mid] == queries[q])&#123;</span><br><span class="line">                        res[q][<span class="number">0</span>] = nums[mid];</span><br><span class="line">                        res[q][<span class="number">1</span>] = nums[mid];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(nums[mid] &gt; queries[q]) r = mid<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(res[q][<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res[q][<span class="number">0</span>] = <span class="built_in">min</span>( nums[l],  nums[r]);</span><br><span class="line">                    res[q][<span class="number">1</span>] =  <span class="built_in">max</span>( nums[l],  nums[r]);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *root, vector&lt;<span class="type">int</span>&gt; &amp;ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">closestNodes</span>(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; queries) &#123;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="built_in">traverse</span>(root, nums);</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> q: queries)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(<span class="built_in">begin</span>(nums), <span class="built_in">end</span>(nums), q);</span><br><span class="line">            <span class="keyword">if</span> (it != <span class="built_in">end</span>(nums) &amp;&amp; *it == q)</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;q, q&#125;);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;it == <span class="built_in">begin</span>(nums) ? <span class="number">-1</span> : *<span class="built_in">prev</span>(it), it == <span class="built_in">end</span>(nums) ? <span class="number">-1</span> : *it&#125;);</span><br><span class="line">            </span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(mlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>2481. Minimum Cuts to Divide a Circle</title>
    <url>/blog/2023/02/12/leetcode/2481_MinimumCutstoDivideaCircle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-cuts-to-divide-a-circle/">problem</a></h2><h2 id="sloution"><a href="#sloution" class="headerlink" title="sloution"></a>sloution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfCuts</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// n, ret</span></span><br><span class="line">        <span class="comment">// (1,0) (2,1) (3,3) (4,2) (5,5) (6,3) (7,7) (8,4) (9,9) (10,5)</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">0</span>?n/<span class="number">2</span>:n;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2482. Difference Between Ones and Zeros in Row and Column</title>
    <url>/blog/2023/02/12/leetcode/2482_DifferenceBetweenOnesandZerosinRowandColumn/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/difference-between-ones-and-zeros-in-row-and-column/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">onesMinusZeros</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">oneRow</span><span class="params">(n,<span class="number">0</span>)</span>, <span class="title">zeroRow</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">oneCol</span><span class="params">(m,<span class="number">0</span>)</span>, <span class="title">zeroCol</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j) oneRow[i]+=(grid[i][j] == <span class="number">1</span>);</span><br><span class="line">            zeroRow[i] = m-oneRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) oneCol[j] += (grid[i][j] == <span class="number">1</span>);</span><br><span class="line">            zeroCol[j] = n-oneCol[j];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">diff</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                diff[i][j] = oneRow[i] + oneCol[j] - zeroRow[i] - zeroCol[j]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diff;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(n)</code>, <code>max(O(n), O(m))</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2483. Minimum Penalty for a Shop</title>
    <url>/blog/2023/02/12/leetcode/2483_MinimumPenaltyforaShop/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-penalty-for-a-shop/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bestClosingTime</span><span class="params">(string customers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 從右往左，數(N=0) 個數</span></span><br><span class="line">        <span class="comment">// 從左往右，數(Y=1) 個數</span></span><br><span class="line">        <span class="type">int</span> n = customers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span>, <span class="title">right</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:customers) total+=(c==<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">        left[<span class="number">0</span>] = total;</span><br><span class="line">        right[n] = n-total;</span><br><span class="line">        <span class="type">int</span> p = total;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(customers[i] ==<span class="string">&#x27;Y&#x27;</span>) p--;</span><br><span class="line">            left[i+<span class="number">1</span>] = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>,  p = n-total;i&gt;<span class="number">-1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(customers[i] == <span class="string">&#x27;N&#x27;</span>) p--;</span><br><span class="line">            right[i] = p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i) left[i] +=right[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find index of  minimum value ;</span></span><br><span class="line">        <span class="type">int</span> idx= <span class="number">-1</span>, value = <span class="number">100001</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(left[i] &lt; value )&#123;</span><br><span class="line">                 idx = i;value = left[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>2485. Find the Pivot Integer</title>
    <url>/blog/2023/02/12/leetcode/2485_FindthePivotInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-pivot-integer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>prefix sum<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotInteger</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> total = (n*(n+<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            left +=i;</span><br><span class="line">            <span class="keyword">if</span>(left == total) <span class="keyword">return</span> i;</span><br><span class="line">            total-=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>binary search<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotInteger</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> total = (n*(n+<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> l= <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> left = ((mid+<span class="number">1</span>)*mid)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> right = (n+mid)*(n-mid+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(left == right) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(left &lt; right) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><a href="https://leetcode.com/problems/find-the-pivot-integer/discuss/2851954/O(sqrt(n))-oror-Simple-Maths-proof">Math</a><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotInteger</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = (n*n+n)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> sq = <span class="built_in">sqrt</span>(ans);</span><br><span class="line">        <span class="keyword">if</span>(sq * sq == ans)<span class="keyword">return</span> sq;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>prefix sum<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>binary search<ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>Math<ul>
<li>time complexity <code>O(sqrt(n))</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
        <tag>Math</tag>
        <tag>Binary</tag>
      </tags>
  </entry>
  <entry>
    <title>2486. Append Characters to String to Make Subsequence</title>
    <url>/blog/2023/02/12/leetcode/2486_AppendCharacterstoStringtoMakeSubsequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/append-characters-to-string-to-make-subsequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">appendCharacters</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = <span class="number">0</span>, n =s.<span class="built_in">size</span>(), m= t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l] == t[r])&#123;</span><br><span class="line">                l++;r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m-r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>2487. Remove Nodes From Linked List</title>
    <url>/blog/2023/02/12/leetcode/2487_RemoveNodesFromLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-nodes-from-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode * <span class="title">reverse</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// iteratively</span></span><br><span class="line">        ListNode * pre = <span class="literal">nullptr</span>, *cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode *post = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = post;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(ListNode *head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next)&#123;</span><br><span class="line">            cout&lt;&lt;head-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;head-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode * <span class="title">greater</span><span class="params">(ListNode * head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *newhead = head, *next = newhead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next-&gt;val &lt;  newhead-&gt;val) next=next-&gt;next;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                newhead-&gt;next = next;</span><br><span class="line">                newhead=newhead-&gt;next;</span><br><span class="line">                next=next-&gt;next;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        newhead-&gt;next = next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNodes</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// from right hand , the linked list is greater.</span></span><br><span class="line">        head = <span class="built_in">reverse</span>(head);</span><br><span class="line">        <span class="built_in">traverse</span>(head);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;done reverse&quot;&lt;&lt;endl;</span></span><br><span class="line">        head = <span class="built_in">greater</span>(head);</span><br><span class="line">        <span class="comment">// traverse(head);</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;done greater&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(head);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>monotonic stack</tag>
      </tags>
  </entry>
  <entry>
    <title>2490. Circular Sentence</title>
    <url>/blog/2023/02/12/leetcode/2490_CircularSentence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/circular-sentence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string sentence, <span class="type">char</span> sep)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string temp ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : sentence)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">                temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> temp+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCircularSentence</span><span class="params">(string sentence)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; sentences = <span class="built_in">split</span>(sentence, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(string str:sentences) cout&lt;&lt;str&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="type">char</span> last = sentences[<span class="number">0</span>].<span class="built_in">back</span>();</span><br><span class="line">        <span class="type">int</span> n = sentences.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> sentences[<span class="number">0</span>].<span class="built_in">front</span>() == sentences[<span class="number">0</span>].<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sentences[i][<span class="number">0</span>] == last)&#123;</span><br><span class="line">                last = sentences[i].<span class="built_in">back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sentences[<span class="number">0</span>].<span class="built_in">front</span>() == last;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>one pass<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCircularSentence</span><span class="params">(string sentence)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = sentence.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(sentence[l]!=sentence[n<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        r = l;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n &amp;&amp; sentence[r]!=<span class="string">&#x27; &#x27;</span>) r++;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            l = r<span class="number">-1</span>;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span>(sentence[l]!=sentence[r]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;n &amp;&amp; sentence[r]!=<span class="string">&#x27; &#x27;</span>) r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2491. Divide Players Into Teams of Equal Skill</title>
    <url>/blog/2023/02/12/leetcode/2491_DividePlayersIntoTeamsofEqualSkill/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/divide-players-into-teams-of-equal-skill/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dividePlayers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; skill)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>, n=skill.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s:skill) total+=s;</span><br><span class="line">        <span class="keyword">if</span>(total%(n/<span class="number">2</span>)!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> target = total / (n/<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">sort</span>(skill.<span class="built_in">begin</span>(), skill.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>, r = n<span class="number">-1</span>;r&gt;l ; l++, r--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(skill[l] + skill[r] != target) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> ret+=(<span class="type">long</span> <span class="type">long</span>)(skill[l]*skill[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>2496. Maximum Value of a String in an Array</title>
    <url>/blog/2023/02/12/leetcode/2496_MaximumValueofaStringinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-value-of-a-string-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumValue</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string str:strs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">bool</span> leadZeros = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">bool</span> alpha = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c:str)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c&gt;=<span class="number">97</span> &amp;&amp; c&lt;= <span class="number">122</span> )&#123;</span><br><span class="line">                    alpha = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;0&#x27;</span> &amp;&amp; leadZeros) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    leadZeros = <span class="literal">false</span>;</span><br><span class="line">                    count =  <span class="number">10</span>*count + (c-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(alpha) ret = <span class="built_in">max</span>(ret, (<span class="type">int</span>)str.<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">else</span> ret = <span class="built_in">max</span>(ret, count);</span><br><span class="line">            count = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>24. Swap Nodes in Pairs</title>
    <url>/blog/2023/02/12/leetcode/24_SwapNodesinPairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>cheat<br>modify value of the next node<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode *a = head, *b = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(b)&#123;</span><br><span class="line">            <span class="comment">// swap adjacent node&#x27;s value</span></span><br><span class="line">            <span class="type">int</span> temp = a-&gt;val;</span><br><span class="line">            a-&gt;val = b-&gt;val;</span><br><span class="line">            b-&gt;val = temp;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 前進</span></span><br><span class="line">            a=b-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(a) b=a-&gt;next;</span><br><span class="line">            <span class="comment">// 到盡頭了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// else b =nullptr;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="option-1-iterative-x3D-gt-merge-two-list"><a href="#option-1-iterative-x3D-gt-merge-two-list" class="headerlink" title="option 1 - iterative &#x3D;&gt; merge two list"></a>option 1 - iterative &#x3D;&gt; merge two list</h5>可以看作一條奇數索引的list與偶數索引的list 從頭merge two list<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head ||!head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *odd = head, *even = head-&gt;next, *a = odd, *b = even, *newhead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ret = newhead;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(odd &amp;&amp; even)&#123;</span><br><span class="line">            odd-&gt;next = even-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(even-&gt;next) even-&gt;next = even-&gt;next-&gt;next;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 前進</span></span><br><span class="line">            odd=odd-&gt;next;</span><br><span class="line">            even=even-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(a|| b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b)&#123;</span><br><span class="line">                newhead-&gt;next = b;</span><br><span class="line">                newhead=newhead-&gt;next;</span><br><span class="line">                b=b-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a)&#123;</span><br><span class="line">                newhead-&gt;next= a;</span><br><span class="line">                newhead=newhead-&gt;next;</span><br><span class="line">                a=a-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *odd = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *even = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode *oddfirst = odd, *evenfirst = even;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ListNode *p =head;p;p=p-&gt;next, i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                odd-&gt;next = p;</span><br><span class="line">                odd=odd-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                even-&gt;next=p;</span><br><span class="line">                even=even-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        odd-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        even-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        oddfirst = oddfirst-&gt;next;</span><br><span class="line">        evenfirst = evenfirst-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(oddfirst || evenfirst)&#123;</span><br><span class="line">            <span class="keyword">if</span>(evenfirst)&#123;</span><br><span class="line">                ret-&gt;next = evenfirst;</span><br><span class="line">                evenfirst=evenfirst-&gt;next;</span><br><span class="line">                ret = ret-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(oddfirst)&#123;</span><br><span class="line">                ret-&gt;next = oddfirst;</span><br><span class="line">                oddfirst=oddfirst-&gt;next;</span><br><span class="line">                ret=ret-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *a =head, *b=head-&gt;next;</span><br><span class="line">        ListNode *pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = pre;</span><br><span class="line">        ListNode *temp ;</span><br><span class="line">        <span class="keyword">while</span>(a || b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b)&#123;</span><br><span class="line">                temp =b;</span><br><span class="line">                <span class="keyword">if</span>(b-&gt;next) b=b-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">else</span> b = <span class="literal">nullptr</span>;</span><br><span class="line">                pre-&gt;next = temp;</span><br><span class="line">                pre=pre-&gt;next;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a)&#123;</span><br><span class="line">                temp =a;</span><br><span class="line">                <span class="keyword">if</span>(a-&gt;next) a=a-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">else</span> a=<span class="literal">nullptr</span>;</span><br><span class="line">                pre-&gt;next = temp;</span><br><span class="line">                pre=pre-&gt;next;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next= <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="option-2-recursive-can-generalize"><a href="#option-2-recursive-can-generalize" class="headerlink" title="option 2 - recursive can generalize"></a>option 2 - recursive can generalize</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverse</span><span class="params">(ListNode *l, ListNode *r)</span></span>&#123;</span><br><span class="line">        ListNode *pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        pre-&gt;next = l;</span><br><span class="line">        <span class="keyword">while</span>(l-&gt;next !=r)&#123;</span><br><span class="line">            ListNode *temp = l-&gt;next;</span><br><span class="line">            l-&gt;next =temp-&gt;next;</span><br><span class="line">            temp-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *a = head, *b = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!b) <span class="keyword">return</span> head;</span><br><span class="line">            b=b-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *newhead = <span class="built_in">reverse</span>(a,b);</span><br><span class="line">        a-&gt;next = <span class="built_in">swapPairs</span>(b);</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>2529. Maximum Count of Positive Integer and Negative Integer</title>
    <url>/blog/2023/02/12/leetcode/2529_MaximumCountofPositiveIntegerandNegativeInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-count-of-positive-integer-and-negative-integer/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>naive<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ne_count = <span class="number">0</span>, pos_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &lt; <span class="number">0</span>) ne_count++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>) pos_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(ne_count, pos_count);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>binary search<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// find first position large than 0 </span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt;= <span class="number">0</span> ) l = mid +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        l = r<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&gt; <span class="number">-1</span> &amp;&amp; nums[l] ==<span class="number">0</span>) l--;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(n-r, l+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code> -&gt; <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>2530. Maximal Score After Applying K Operations</title>
    <url>/blog/2023/02/12/leetcode/2530_MaximalScoreAfterApplyingKOperations/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximal-score-after-applying-k-operations/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maxKelements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// select max value in vector</span></span><br><span class="line">        priority_queue &lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) pq.<span class="built_in">push</span>(n);</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;            </span><br><span class="line">            <span class="type">double</span> t =pq.<span class="built_in">top</span>();</span><br><span class="line">            ret+=t;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            pq.<span class="built_in">push</span>(<span class="built_in">ceil</span>(t/<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(Klogn)</code> ,  K is the number of query</li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>2558. Take Gifts From the Richest Pile</title>
    <url>/blog/2023/02/12/leetcode/2558_TakeGiftsFromtheRichestPile/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/take-gifts-from-the-richest-pile/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a>C++ solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">pickGifts</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gifts, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> g:gifts) pq.<span class="built_in">push</span>(g); <span class="comment">//  O(nlogn)</span></span><br><span class="line">        <span class="keyword">while</span>(k-- )&#123;</span><br><span class="line">            <span class="type">int</span> t = pq.<span class="built_in">top</span>(); pq.<span class="built_in">pop</span>();</span><br><span class="line">            pq.<span class="built_in">push</span>(<span class="built_in">sqrt</span>(t));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ret += pq.<span class="built_in">top</span>(); pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Python-solution"><a href="#Python-solution" class="headerlink" title="Python solution"></a>Python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pickGifts</span>(<span class="params">self, gifts: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        nums = [-num <span class="keyword">for</span> num <span class="keyword">in</span> gifts]</span><br><span class="line">        heapify(nums)</span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            tmp = math.isqrt(-heappop(nums))</span><br><span class="line">            heappush(nums, -tmp)</span><br><span class="line">            k-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="built_in">sum</span>(nums)</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code> </li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>2559. Count Vowel Strings in Ranges</title>
    <url>/blog/2023/02/12/leetcode/2559_CountVowelStringsinRanges/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-vowel-strings-in-ranges">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a>C++ solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; vowels = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkStartAndEndVowel</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> ret = vowels.<span class="built_in">count</span>(word.<span class="built_in">front</span>())==<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ret) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ret &amp;&amp; vowels.<span class="built_in">count</span>(word.<span class="built_in">back</span>())==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vowelStrings</span><span class="params">(vector&lt;string&gt;&amp; words, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>(), q = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">filters</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefixSum</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// prefix sum</span></span><br><span class="line">        <span class="comment">//      1    0   1   1   1</span></span><br><span class="line">        <span class="comment">// 0    1    1   2   3   4</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(q, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ;i&lt;n;++i) filters[i] = <span class="built_in">checkStartAndEndVowel</span>(words[i]);</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            tmp += (filters[i]);</span><br><span class="line">            prefixSum[i+<span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q ; ++i)&#123;</span><br><span class="line">            ret[i] = prefixSum[queries[i][<span class="number">1</span>]+<span class="number">1</span>] - prefixSum[queries[i][<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Python-solution"><a href="#Python-solution" class="headerlink" title="Python solution"></a>Python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">vowelStrings</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>&#125;</span><br><span class="line">        filters = [<span class="number">1</span> <span class="keyword">if</span> word[<span class="number">0</span>] <span class="keyword">in</span> s <span class="keyword">and</span> word[-<span class="number">1</span>] <span class="keyword">in</span> s <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> word <span class="keyword">in</span> words]</span><br><span class="line">        prefix = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> filters:</span><br><span class="line">            prefix.append(f + prefix[-<span class="number">1</span>])</span><br><span class="line">        ret = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> queries:</span><br><span class="line">            ret.append( prefix[q[<span class="number">1</span>]+<span class="number">1</span>] - prefix[q[<span class="number">0</span>]])</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n + m)</code>, m &#x3D; queries length, n &#x3D; words length</li>
<li>space complexity <code>O(n + m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>2562. Find the Array Concatenation Value</title>
    <url>/blog/2023/02/12/leetcode/2562_FindtheArrayConcatenationValue/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-array-concatenation-value/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a>C++ solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">digitLen</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">findTheArrayConcVal</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span> ;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = size<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l==r) ret += nums[l];</span><br><span class="line">            <span class="comment">// else ret += nums[l] * pow( 10, trunc(log10(nums[r])) + 1) +  nums[r]  ;</span></span><br><span class="line">            <span class="keyword">else</span> ret += nums[l] * <span class="built_in">pow</span>( <span class="number">10</span>, <span class="built_in">digitLen</span>(nums[r])) +  nums[r] ;</span><br><span class="line">            l++;r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Python-solution"><a href="#Python-solution" class="headerlink" title="Python solution"></a>Python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findTheArrayConcVal</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        sums = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> nums:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(nums) &gt; <span class="number">1</span> :</span><br><span class="line">                sums += <span class="built_in">int</span>(<span class="built_in">str</span>(nums.pop(<span class="number">0</span>)) + <span class="built_in">str</span>(nums.pop()))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sums += nums.pop()</span><br><span class="line">        <span class="keyword">return</span> sums</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2563. Count the Number of Fair Pairs</title>
    <url>/blog/2023/02/12/leetcode/2563_CounttheNumberofFairPairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-the-number-of-fair-pairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findFirstGreat</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> eval = nums[mid];</span><br><span class="line">            <span class="keyword">if</span>(eval &lt;  target ) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findFirstGreatThan</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> eval = nums[mid];</span><br><span class="line">            <span class="keyword">if</span>(eval &lt;=  target ) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countFairPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// binary search</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = lower - nums[i], t = upper - nums[i];</span><br><span class="line">            <span class="comment">// find the first greater and equal than lower and upper;</span></span><br><span class="line">            <span class="type">int</span> a = <span class="built_in">findFirstGreat</span>(nums, i+<span class="number">1</span>, n<span class="number">-1</span>, s);</span><br><span class="line">            <span class="type">int</span> b = <span class="built_in">findFirstGreatThan</span>(nums, i+<span class="number">1</span>, n <span class="number">-1</span> , t);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( b &gt;= <span class="number">0</span> &amp;&amp; a &gt;= <span class="number">0</span> &amp;&amp; b &lt; n &amp;&amp; a &lt; n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[a] &gt;= s &amp;&amp; nums[b]  &lt;= t) &#123;</span><br><span class="line">                    count += (b-a+<span class="number">1</span>);</span><br><span class="line">                    cout&lt;&lt;(b-a+<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[a] &gt;= s &amp;&amp; nums[b<span class="number">-1</span>] &lt;=t)&#123;</span><br><span class="line">                    count += b-a;</span><br><span class="line">                    cout&lt;&lt;b-a&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>binary search</tag>
        <tag>two pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>2578. Split With Minimum Sum</title>
    <url>/blog/2023/03/19/leetcode/2578_SplitWithMinimumSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/split-with-minimum-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a>C++ solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">splitNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">while</span>(num )&#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(num%<span class="number">10</span>);</span><br><span class="line">            num/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()%<span class="number">2</span>!=<span class="number">0</span>) nums.<span class="built_in">insert</span>(nums.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; n;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) ret*=<span class="number">10</span>;</span><br><span class="line">            ret+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="python-solution"><a href="#python-solution" class="headerlink" title="python solution"></a>python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">splitNum</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums = <span class="built_in">list</span>()</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(num):</span><br><span class="line">            nums.append(num%<span class="number">10</span>)</span><br><span class="line">            num//=<span class="number">10</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(nums)%<span class="number">2</span>!=<span class="number">0</span>):</span><br><span class="line">            nums = [<span class="number">0</span>] + nums</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">                ret*=<span class="number">10</span></span><br><span class="line">            ret+=v</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>2579. Count Total Number of Colored Cells</title>
    <url>/blog/2023/03/19/leetcode/2579_CountTotalNumberofColoredCells/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-total-number-of-colored-cells/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="recursive-solution"><a href="#recursive-solution" class="headerlink" title="recursive solution"></a>recursive solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">coloredCells</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 1</span></span><br><span class="line">        <span class="comment">// 2: 1 + 4 = f(1) + 2*4-4</span></span><br><span class="line">        <span class="comment">// 3: 5 + 8 = f(2) + 3*4-4</span></span><br><span class="line">        <span class="comment">// 4: 13 + 12= f(3) + 4*4-4</span></span><br><span class="line">        <span class="comment">// 5: 25 + 16</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">coloredCells</span>(n<span class="number">-1</span>) + n*<span class="number">4</span><span class="number">-4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="i-solution"><a href="#i-solution" class="headerlink" title="i solution"></a>i solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">coloredCells</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 1</span></span><br><span class="line">        <span class="comment">// 2: 1 + 4 = f(1) + 2*4-4</span></span><br><span class="line">        <span class="comment">// 3: 5 + 8 = f(2) + 3*4-4</span></span><br><span class="line">        <span class="comment">// 4: 13 + 12= f(3) + 4*4-4</span></span><br><span class="line">        <span class="comment">// 5: 25 + 16</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// else return coloredCells(n-1) + n*4-4;</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ret = <span class="number">1</span>, tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span> ;i&lt;=n; ++i)&#123;</span><br><span class="line">            tmp = ret + i*<span class="number">4</span><span class="number">-4</span>;</span><br><span class="line">            ret = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity : could lower to <code>O(1)</code> <code>(long long)n * n + (long long)(n - 1) * (n - 1);</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>MATH</tag>
      </tags>
  </entry>
  <entry>
    <title>257. Binary Tree Paths</title>
    <url>/blog/2023/02/12/leetcode/257_BinaryTreePaths/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-paths/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *root, string path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;right &amp;&amp; !root-&gt;left)&#123;</span><br><span class="line">            path+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> path+=<span class="built_in">to_string</span>(root-&gt;val)+<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left,path);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right,path);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">traverse</span>(root, path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>2582. Pass the Pillow</title>
    <url>/blog/2023/03/19/leetcode/2582_PassthePillow/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/pass-the-pillow/d">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">passThePillow</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1-2-3-4-3-2-1-2-3-4</span></span><br><span class="line">        <span class="comment">// pattern is 1-2-3-4-3-2</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; lines;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) lines.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">1</span> ;i--) lines.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">return</span> lines[time%(<span class="number">2</span>*n<span class="number">-2</span>)];      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">passThePillow</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1-2-3-4-3-2-1-2-3-4</span></span><br><span class="line">        <span class="comment">// pattern is 1-2-3-4-3-2</span></span><br><span class="line">        <span class="comment">// vector&lt;int&gt; lines;</span></span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=n;++i) lines.push_back(i);</span></span><br><span class="line">        <span class="comment">// for(int i=n-1;i&gt;1 ;i--) lines.push_back(i);</span></span><br><span class="line">        <span class="comment">// return lines[time%(2*n-2)];   </span></span><br><span class="line">        time%=(<span class="number">2</span>*n<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">if</span>(time &gt; n<span class="number">-1</span> ) <span class="keyword">return</span> n-time%(n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> time+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> could lower to <code>O(1)</code></li>
<li>space complexity <code>O(n)</code> could lower to <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>2583. Kth Largest Sum in a Binary Tree</title>
    <url>/blog/2023/03/19/leetcode/2583_KthLargestSuminaBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/kth-largest-sum-in-a-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">kthLargestLevelSum</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; levels;</span><br><span class="line">        <span class="comment">// level traversal</span></span><br><span class="line">        <span class="function">queue&lt;TreeNode*&gt; <span class="title">q</span><span class="params">(&#123;root&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> level = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size; ++i) &#123;</span><br><span class="line">                TreeNode *node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                level+=node-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left != <span class="literal">nullptr</span>) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right != <span class="literal">nullptr</span>) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="comment">// cout&lt;&lt;node-&gt;val&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            levels.<span class="built_in">push_back</span>(level);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(levels.<span class="built_in">begin</span>(), levels.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;());</span><br><span class="line">        <span class="keyword">if</span>( k<span class="number">-1</span> &gt;= levels.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> levels[(k<span class="number">-1</span>)];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>you could replace vector to priority</p>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>2586. Count the Number of Vowel Strings in Range</title>
    <url>/blog/2023/03/19/leetcode/2586_CounttheNumberofVowelStringsinRange/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-the-number-of-vowel-strings-in-range/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; vowels = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vowels.<span class="built_in">count</span>(word.<span class="built_in">front</span>()) &amp;&amp; vowels.<span class="built_in">count</span>(word.<span class="built_in">back</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">vowelStrings</span><span class="params">(vector&lt;string&gt;&amp; words, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left ; i&lt;=right ; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isValid</span>(words[i])) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2587. Rearrange Array to Maximize Prefix Score</title>
    <url>/blog/2023/03/19/leetcode/2587_RearrangeArraytoMaximizePrefixScore/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rearrange-array-to-maximize-prefix-score/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="type">int</span> count = (nums.<span class="built_in">front</span>()&gt;<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>() ; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            cur += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(cur &gt; <span class="number">0</span>) count++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>greedy</tag>
        <tag>Prefix sum</tag>
      </tags>
  </entry>
  <entry>
    <title>258. Add Digits</title>
    <url>/blog/2023/02/12/leetcode/258_AddDigits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/add-digits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">addDigits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = num ;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n)&#123;</span><br><span class="line">                sum+=(n%<span class="number">10</span>);</span><br><span class="line">                n/=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2592. Maximize Greatness of an Array</title>
    <url>/blog/2023/03/19/leetcode/2592_MaximizeGreatnessofanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximize-greatness-of-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximizeGreatness</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span> ,r  = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span>  i = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= nums[r]) l++; <span class="comment">// 打不過就派最小的</span></span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-r<span class="number">-1</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>2593. Find Score of an Array After Marking All Elements</title>
    <url>/blog/2023/03/19/leetcode/2593_FindScoreofanArrayAfterMarkingAllElements/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-score-of-an-array-after-marking-all-elements/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">findScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> comp = [](vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt; vector&lt;<span class="type">int</span>&gt; , vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; , <span class="keyword">decltype</span>(comp)&gt; <span class="built_in">pq</span>(comp);</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// vector&lt;bool&gt; visit(n, false);</span></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visit;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) pq.<span class="built_in">push</span>(&#123;nums[i],i&#125; );</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> score = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>( !pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; cur = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(visit.<span class="built_in">count</span>(cur[<span class="number">1</span>])) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            score += cur[<span class="number">0</span>] ;</span><br><span class="line">            visit.<span class="built_in">insert</span>(cur[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(cur[<span class="number">1</span>]<span class="number">-1</span> &gt; <span class="number">-1</span>) visit.<span class="built_in">insert</span>(cur[<span class="number">1</span>]<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(cur[<span class="number">1</span>] +<span class="number">1</span> &lt; n) visit.<span class="built_in">insert</span>(cur[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>2595. Number of Even and Odd Bits</title>
    <url>/blog/2023/03/19/leetcode/2595_NumberofEvenandOddBits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-even-and-odd-bits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">evenOddBit</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ret[idx%<span class="number">2</span>]+=n&amp;<span class="number">1</span>; </span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>2596. Check Knight Tour Configuration</title>
    <url>/blog/2023/03/19/leetcode/2596_CheckKnightTourConfiguration/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/check-knight-tour-configuration/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkValidGrid</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, maxCount = grid.<span class="built_in">size</span>() * grid.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// (-1, 2), (-2, 1) , (-2,-1),(-1,-2) , (1,-2), (2, -1), (2,1), (1, 2)</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; acts = &#123;</span><br><span class="line">            &#123;<span class="number">-1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">            &#123;<span class="number">-2</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,</span><br><span class="line">            &#123; <span class="number">1</span>,<span class="number">-2</span>&#125;,</span><br><span class="line">            &#123; <span class="number">2</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">            &#123; <span class="number">2</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123; <span class="number">1</span>,  <span class="number">2</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span>(count++ &lt; maxCount) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; act : acts) &#123;</span><br><span class="line">                i = x + act[<span class="number">0</span>], j = y + act[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">-1</span> &amp;&amp; j &gt; <span class="number">-1</span> &amp;&amp; i&lt;grid.<span class="built_in">size</span>() &amp;&amp; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>() &amp;&amp; grid[i][j] ==count)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    x = i, y =j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>2597. The Number of Beautiful Subsets</title>
    <url>/blog/2023/03/19/leetcode/2597_TheNumberofBeautifulSubsets/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/the-number-of-beautiful-subsets/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; subsets;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> l, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!path.<span class="built_in">empty</span>()) subsets.<span class="built_in">push_back</span>(path);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l; i&lt;nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!path.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">isValid</span>( nums[i], k, path)) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(i+<span class="number">1</span>, path, nums, k);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt; &amp; path)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=path.<span class="built_in">size</span>()<span class="number">-1</span> ;i&gt;<span class="number">-1</span>;i--) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(target - path[i]  ==k)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">beautifulSubsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(<span class="number">0</span>, path, nums, k);</span><br><span class="line">        <span class="keyword">return</span> subsets.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity </li>
<li>space complexity</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>25. Reverse Nodes in k-Group</title>
    <url>/blog/2023/02/12/leetcode/25_ReverseNodesink-Group/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode * left, ListNode *right)</span></span>&#123;</span><br><span class="line">        ListNode * pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        pre-&gt;next = left;</span><br><span class="line">        ListNode * cur = left;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next!=right)&#123;</span><br><span class="line">            ListNode *temp = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// recursive</span></span><br><span class="line">        ListNode *a = head, *b = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">            <span class="comment">// 鏈接串列長度不足k個</span></span><br><span class="line">            <span class="keyword">if</span>(!b) <span class="keyword">return</span> head;</span><br><span class="line">            b= b-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *newhead = <span class="built_in">reverse</span>(a, b);</span><br><span class="line">        a-&gt;next = <span class="built_in">reverseKGroup</span>(b, k);</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-iterative"><a href="#option-2-iterative" class="headerlink" title="option 2 - iterative"></a>option 2 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getsize</span><span class="params">(ListNode *p)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;p;p=p-&gt;next, i++);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">getTailNode</span><span class="params">(ListNode *head, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p) <span class="keyword">return</span> head;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> size = <span class="built_in">getsize</span>(head);</span><br><span class="line">        <span class="type">int</span> revertimes = size/k;</span><br><span class="line">        ListNode *cur= head, *b = cur;</span><br><span class="line">        ListNode *ans= <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *pre = ans;</span><br><span class="line">        pre-&gt;next = cur;</span><br><span class="line">        <span class="comment">// 要反轉 reversetime 次</span></span><br><span class="line">        <span class="keyword">while</span>(revertimes--)&#123;</span><br><span class="line">            <span class="comment">// reverse node [cur,nextHead)</span></span><br><span class="line">            ListNode *nextHead = <span class="built_in">getTailNode</span>(cur,k);</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next!=nextHead)&#123;</span><br><span class="line">                ListNode * temp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = temp-&gt;next;</span><br><span class="line">                temp-&gt;next = pre-&gt;next;</span><br><span class="line">                pre-&gt;next = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update the next term head and tail node</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur= nextHead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - recursive<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(n)</code> function call</li>
</ul>
</li>
<li>option 2 - iterative<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>260. Single Number III</title>
    <url>/blog/2023/02/12/leetcode/260_SingleNumberIII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/single-number-iii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) diff^=n;</span><br><span class="line">        diff &amp;= (-diff);</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>, b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;diff) a^= n;</span><br><span class="line">            <span class="keyword">else</span> b^=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;a,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>263. Ugly Number</title>
    <url>/blog/2023/02/12/leetcode/263_UglyNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/ugly-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUgly</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">2</span>==<span class="number">0</span>) n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">3</span>==<span class="number">0</span>) n/=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">5</span>==<span class="number">0</span>) n/=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>264. Ugly Number II</title>
    <url>/blog/2023/02/12/leetcode/264_UglyNumberII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/ugly-number-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-time-out"><a href="#option-1-time-out" class="headerlink" title="option 1 - time out"></a>option 1 - time out</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUgly</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">// O(logn)</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">2</span>==<span class="number">0</span>) n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">3</span>==<span class="number">0</span>) n/=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">5</span>==<span class="number">0</span>) n/=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>, ret = <span class="number">0</span>, number = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isUgly</span>(number))&#123;</span><br><span class="line">                c++;</span><br><span class="line">                ret = number;</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 每次取最小值</span></span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// repr 2 3 5 倍數</span></span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>, c=<span class="number">1</span>, d;</span><br><span class="line">        <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count++ &lt;n)&#123;</span><br><span class="line">            d = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">// 去掉重複的值</span></span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() == d) pq.<span class="built_in">pop</span>();   </span><br><span class="line">            <span class="keyword">if</span>(d&lt; INT_MAX/<span class="number">2</span>) pq.<span class="built_in">push</span>(d*<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(d&lt; INT_MAX/<span class="number">3</span>) pq.<span class="built_in">push</span>(d*<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span>(d&lt; INT_MAX/<span class="number">5</span>) pq.<span class="built_in">push</span>(d*<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-dp"><a href="#option-3-dp" class="headerlink" title="option 3 - dp"></a>option 3 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> p2 = <span class="number">0</span>, p3=<span class="number">0</span>, p5 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ret.<span class="built_in">size</span>() &lt; n)&#123;</span><br><span class="line">            <span class="type">int</span> a = ret[p2]*<span class="number">2</span>, b = ret[p3]*<span class="number">3</span>, c= ret[p5]*<span class="number">5</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> mn = <span class="built_in">min</span>(a,<span class="built_in">min</span>(b,c));</span><br><span class="line">            </span><br><span class="line">            ret.<span class="built_in">push_back</span>(mn);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(mn == a) p2++;</span><br><span class="line">            <span class="keyword">if</span>(mn == b) p3++;</span><br><span class="line">            <span class="keyword">if</span>(mn == c) p5++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.<span class="built_in">back</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>268. Missing Number</title>
    <url>/blog/2023/02/12/leetcode/268_MissingNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/missing-number/">problem</a></h2><p>給定一維陣列，那一個數字遺失</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="math"><a href="#math" class="headerlink" title="math"></a>math</h4><p>三角形公式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> total = n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) total-=n;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>total變數，可能會有overflow 問題</li>
</ul>
<h4 id="Bit"><a href="#Bit" class="headerlink" title="Bit"></a>Bit</h4><ul>
<li>善用 <code>x^x=0</code> 以及 XOR交換率</li>
<li>因題目限制，陣列元素只會是正整數，利用陣列索引與元素做XOR</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ret = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n; ++i) ret^= (i^nums[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>26. Remove Duplicates from Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/26_RemoveDuplicatesfromSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>, n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">            <span class="comment">// 維護nums[0...slow] 無重複就好</span></span><br><span class="line">            <span class="keyword">if</span>(nums[slow] != nums[fast]) nums[++slow] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>274. H-Index</title>
    <url>/blog/2023/02/12/leetcode/274_H-Index/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/h-index/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>(), greater&lt;&gt;()) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(citations[i] &lt;= i) <span class="keyword">return</span> i;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span> ,n=citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">rbegin</span>(), citations.<span class="built_in">rend</span>());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(citations[i]&gt;i) ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-binary-search"><a href="#option-2-binary-search" class="headerlink" title="option 2 - binary search"></a>option 2 - binary search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>(), greater&lt;&gt;()) ;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r= n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(citations[mid] &gt; mid ) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span> ,n=citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">rbegin</span>(), citations.<span class="built_in">rend</span>());</span><br><span class="line">        <span class="comment">//  0   1   2   3   4</span></span><br><span class="line">        <span class="comment">//  6   5   3   1   0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  0   1   2</span></span><br><span class="line">        <span class="comment">//  3   1   1</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(citations[mid]&gt;mid) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>275. H-Index II</title>
    <url>/blog/2023/02/12/leetcode/275_H-IndexII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/h-index-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// given ascwnding order</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">reverse</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 找出最小的索引其數值小於其索引</span></span><br><span class="line">        <span class="comment">//              -</span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   </span></span><br><span class="line">        <span class="comment">//  6   5   3   1   0</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//          -    </span></span><br><span class="line">        <span class="comment">//  0   1   2</span></span><br><span class="line">        <span class="comment">//  100 2   1</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(citations[mid] &gt; mid) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// given ascending order</span></span><br><span class="line">        <span class="type">int</span> n = citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (citations[mid] == n - mid) <span class="keyword">return</span> n - mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (citations[mid] &gt; n - mid) r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>278. First Bad Version</title>
    <url>/blog/2023/02/12/leetcode/278_FirstBadVersion/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/first-bad-version/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isBadVersion</span>(mid))  r= mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">isBadVersion</span>(mid)) l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>lower bound<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isBadVersion</span>(mid) ) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>279. Perfect Squares</title>
    <url>/blog/2023/02/12/leetcode/279_PerfectSquares/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/perfect-squares/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7   8   9   10  11  12</span></span><br><span class="line">        <span class="comment">//  0   1   2   3   1   2   3   4   2   1   2   3   3</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;i+j*j&lt;=n;++j)&#123;</span><br><span class="line">                dp[i+j*j] = <span class="built_in">min</span>(dp[i]+<span class="number">1</span>, dp[i+j*j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-math"><a href="#option-2-math" class="headerlink" title="option 2 - math"></a>option 2 - math</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*sqrt(n))</code> <code>O(sqrt(n))</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>27. Remove Element</title>
    <url>/blog/2023/02/12/leetcode/27_RemoveElement/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-element/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] !=val ) nums[slow++] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>283. Move Zeroes</title>
    <url>/blog/2023/02/12/leetcode/283_MoveZeroes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/move-zeroes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> slow= <span class="number">-1</span>, fast =<span class="number">0</span>, n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val) nums[++slow] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">removeElement</span>(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;nums.<span class="built_in">size</span>();++i) nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>287. Find the Duplicate Number</title>
    <url>/blog/2023/02/12/leetcode/287_FindtheDuplicateNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-duplicate-number/">problem</a></h2><p>給定一維陣列，找出重複一遍的數字，其餘數字皆為不重複。不能修改原陣列。</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>set stl<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">count</span>(n)) <span class="keyword">return</span> n;</span><br><span class="line">            s.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>modify value<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> idx = <span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// number has visited/ modified</span></span><br><span class="line">            <span class="keyword">if</span>(nums[idx]&lt;<span class="number">0</span>) <span class="keyword">return</span> idx+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> nums[idx] *=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>sorting<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4></li>
<li>利用兩個索引，一個跑的慢，一個跑得快，並找出相交位置。找到後一個從原點開始再跑，另一個從相遇地點開始跑。在遇到則為答案</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//  1   3   4   2   2   </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//slow 0 -&gt; 1 -&gt; 3 -&gt; 2 -&gt; 4 -&gt; 2 -&gt; 4</span></span><br><span class="line">        <span class="comment">//fast 0 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 4</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//slow 4 -&gt; 2 -&gt; 4 -&gt; 2 </span></span><br><span class="line">        <span class="comment">//fast 0 -&gt; 1 -&gt; 3 -&gt; 2 </span></span><br><span class="line">        <span class="type">int</span> slow =<span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>289. Game of Life</title>
    <url>/blog/2023/02/12/leetcode/289_GameofLife/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/game-of-life/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; neighbor = &#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">LiveNei</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> live = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> nei:neighbor)&#123;</span><br><span class="line">            <span class="type">int</span> x = i+nei[<span class="number">0</span>], y = j+nei[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;<span class="number">-1</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;<span class="number">-1</span> &amp;&amp; y&lt;m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[x][y] == <span class="number">1</span>) live++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> live;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isLive</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> live = <span class="built_in">LiveNei</span>(board,i,j);</span><br><span class="line">        <span class="keyword">if</span>(board[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(live==<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(live&lt;<span class="number">2</span> || live&gt;<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">gameOfLife</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 少於兩個鄰居活者，自己將來會死</span></span><br><span class="line">        <span class="comment">// 兩三個鄰居活著，自己將來還活著</span></span><br><span class="line">        <span class="comment">// 超過三個以上鄰居活者，自己將來會被餓死。</span></span><br><span class="line">        <span class="comment">// 自己原先死了，但有剛好有三位活著的鄰居，自己會下一階段復活</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; nums = board;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isLive</span>(board,i,j)) nums[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> nums[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        board = nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-in-place"><a href="#option-2-in-place" class="headerlink" title="option 2 - in-place"></a>option 2 - in-place</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; neighbor = &#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">LiveNei</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> live = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> nei:neighbor)&#123;</span><br><span class="line">            <span class="type">int</span> x = i+nei[<span class="number">0</span>], y = j+nei[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;<span class="number">-1</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;<span class="number">-1</span> &amp;&amp; y&lt;m)&#123;</span><br><span class="line">                <span class="comment">// 1-&gt;0 =&gt; 3</span></span><br><span class="line">                <span class="comment">// 1-&gt;1 =&gt; 1    </span></span><br><span class="line">                <span class="keyword">if</span>(board[x][y] %<span class="number">2</span> == <span class="number">1</span>) live++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> live;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nextState</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 0-&gt;0 =&gt; 0</span></span><br><span class="line">        <span class="comment">// 0-&gt;1 =&gt; 2</span></span><br><span class="line">        <span class="comment">// 1-&gt;0 =&gt; 3</span></span><br><span class="line">        <span class="comment">// 1-&gt;1 =&gt; 1</span></span><br><span class="line">        <span class="type">int</span> live = <span class="built_in">LiveNei</span>(board,i,j);</span><br><span class="line">        <span class="keyword">if</span>(board[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(live==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(live&lt;<span class="number">2</span> || live&gt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">gameOfLife</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 少於兩個鄰居活者，自己將來會死</span></span><br><span class="line">        <span class="comment">// 兩三個鄰居活著，自己將來還活著</span></span><br><span class="line">        <span class="comment">// 超過三個以上鄰居活者，自己將來會被餓死。</span></span><br><span class="line">        <span class="comment">// 自己原先死了，但有剛好有三位活著的鄰居，自己會下一階段復活</span></span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                board[i][j] = <span class="built_in">nextState</span>(board,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="number">2</span>) board[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="number">3</span>) board[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="ananlysis"><a href="#ananlysis" class="headerlink" title="ananlysis"></a>ananlysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>28. Implement strStr()</title>
    <url>/blog/2023/02/12/leetcode/28_ImplementstrStr()/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/implement-strstr/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="option-2-KMP"><a href="#option-2-KMP" class="headerlink" title="option 2 - KMP"></a>option 2 - KMP</h4><h4 id="option-3-Sunday-匹配"><a href="#option-3-Sunday-匹配" class="headerlink" title="option 3 -  Sunday 匹配"></a>option 3 -  Sunday 匹配</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity </li>
<li>space</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>290. Word Pattern</title>
    <url>/blog/2023/02/12/leetcode/290_WordPattern/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/word-pattern/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string cur ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cur+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cur.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordPattern</span><span class="params">(string pattern, string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mpa;</span><br><span class="line">        unordered_map &lt;string,<span class="type">int</span>&gt; mpb;</span><br><span class="line">        vector&lt;string&gt; str = <span class="built_in">split</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">size</span>()!=pattern.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pattern.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = pattern[i];</span><br><span class="line">            <span class="keyword">if</span>(mpa[c]!=mpb[str[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            mpa[c] = i+<span class="number">1</span>;</span><br><span class="line">            mpb[str[i]] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string cur ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cur+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cur.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordPattern</span><span class="params">(string pattern, string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,string&gt; mp;</span><br><span class="line">        vector&lt;string&gt; str = <span class="built_in">split</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">size</span>()!=pattern.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pattern.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = pattern[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(c))&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[c] !=str[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// not exist in map key</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> a:mp)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a.second == str[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mp[c] = str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>292. Nim Game</title>
    <url>/blog/2023/02/12/leetcode/292_NimGame/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/nim-game/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">4</span>!=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>295. Find Median from Data Stream</title>
    <url>/blog/2023/02/12/leetcode/295_FindMedianfromDataStream/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 需要兩個heap，一個放大於中位數的heap，每次取最小，另一個放小於中位數的heap，每次取最大</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; down;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt; up;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(up.<span class="built_in">size</span>() &gt;= down.<span class="built_in">size</span>())&#123;</span><br><span class="line">            up.<span class="built_in">push</span>(num);</span><br><span class="line">            down.<span class="built_in">push</span>(up.<span class="built_in">top</span>());</span><br><span class="line">            up.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            down.<span class="built_in">push</span>(num);</span><br><span class="line">            up.<span class="built_in">push</span>(down.<span class="built_in">top</span>());</span><br><span class="line">            down.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(up.<span class="built_in">size</span>() &gt; down.<span class="built_in">size</span>()) <span class="keyword">return</span> up.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(down.<span class="built_in">size</span>() &gt; up.<span class="built_in">size</span>()) <span class="keyword">return</span> down.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">return</span> (up.<span class="built_in">top</span>() + down.<span class="built_in">top</span>())/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder* obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj-&gt;findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li><code>addNum</code> time complexity <code>O(logn)</code></li>
<li><code>findMedian</code> time complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>297. Serialize and Deserialize Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/297_SerializeandDeserializeBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">string <span class="title">encode</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)  <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        string ret ;</span><br><span class="line">        </span><br><span class="line">        ret += <span class="built_in">to_string</span>( root-&gt;val) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        ret += <span class="built_in">encode</span>(root-&gt;left);</span><br><span class="line">        ret += <span class="built_in">encode</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="comment">//  1,2,##3,4,##5,##</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string ret = <span class="built_in">encode</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">decode</span><span class="params">(vector&lt;string&gt; &amp;vec, <span class="type">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==vec.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(vec[i] == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>, j= <span class="number">0</span> ;</span><br><span class="line">        string temp = vec[i];</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp[j]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;temp.<span class="built_in">size</span>();j++) val = <span class="number">10</span>*val + temp[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!flag) val *= <span class="number">-1</span>;</span><br><span class="line">        TreeNode *root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        i++;</span><br><span class="line">        </span><br><span class="line">        root-&gt;left = <span class="built_in">decode</span>(vec, i);</span><br><span class="line">        root-&gt;right = <span class="built_in">decode</span>(vec, i);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string data)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;data.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i] == <span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(data[i]==<span class="string">&#x27;#&#x27;</span>) ret.<span class="built_in">push_back</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> cur+=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;string&gt; vec = <span class="built_in">split</span>(data);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        TreeNode *root = <span class="built_in">decode</span>(vec, i);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser, deser;</span></span><br><span class="line"><span class="comment">// TreeNode* ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>299. Bulls and Cows</title>
    <url>/blog/2023/02/12/leetcode/299_BullsandCows/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/bulls-and-cows/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getHint</span><span class="params">(string secret, string guess)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; mp, mpb;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;secret.<span class="built_in">size</span>() ; ++i) mp[secret[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;guess.<span class="built_in">size</span>() ; ++i) mpb[guess[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mpb.<span class="built_in">count</span>(m.first))&#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; s = m.second, g = mpb[m.first];</span><br><span class="line">                <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">0</span> ,  ca=<span class="number">0</span>, cb= <span class="number">0</span> ;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;s.<span class="built_in">size</span>() &amp;&amp; r&lt;g.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[l] == g[r])&#123;</span><br><span class="line">                        ca++;</span><br><span class="line">                        l++;</span><br><span class="line">                        r++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(s[l]&lt;g[r]) l++;</span><br><span class="line">                    <span class="keyword">else</span> r++;</span><br><span class="line">                &#125;</span><br><span class="line">                a+=ca;</span><br><span class="line">                cb = <span class="built_in">min</span>(s.<span class="built_in">size</span>(), g.<span class="built_in">size</span>()) - ca;</span><br><span class="line">                b+=cb;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(a)+<span class="string">&quot;A&quot;</span>+<span class="built_in">to_string</span>(b)+<span class="string">&quot;B&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getHint</span><span class="params">(string secret, string guess)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span>, <span class="title">g</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> a= <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;secret.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c1 = secret[i], c2 = guess[i];</span><br><span class="line">            <span class="keyword">if</span>(c1==c2) a++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s[c1-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">                g[c2-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i) b+=<span class="built_in">min</span>(s[i], g[i]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(a)+<span class="string">&quot;A&quot;</span>+<span class="built_in">to_string</span>(b)+<span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n+m)</code></li>
<li>space complexity <code>O(n+m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>29. Divide Two Integers</title>
    <url>/blog/2023/02/12/leetcode/29_DivideTwoIntegers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/divide-two-integers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        <span class="type">long</span> m = <span class="built_in">labs</span>(dividend), n = <span class="built_in">labs</span>(divisor), res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sign = ((dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>)) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> sign == <span class="number">1</span> ? m : -m;</span><br><span class="line">        <span class="keyword">while</span> (m &gt;= n) &#123;</span><br><span class="line">            <span class="type">long</span> t = n, p = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (m &gt;= (t &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += p;</span><br><span class="line">            m -= t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign == <span class="number">1</span> ? res : -res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space compleity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2. Add Two Numbers</title>
    <url>/blog/2023/02/12/leetcode/2_AddTwoNumbers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/add-two-numbers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-iterative"><a href="#option-1-iterative" class="headerlink" title="option 1 - iterative"></a>option 1 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || carry)&#123;</span><br><span class="line">            <span class="type">int</span> sum = carry;</span><br><span class="line">            <span class="keyword">if</span>(l1)&#123;</span><br><span class="line">                sum+=l1-&gt;val;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2)&#123;</span><br><span class="line">                sum+=l2-&gt;val;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            ret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum%<span class="number">10</span>);</span><br><span class="line">            ret = ret-&gt;next;</span><br><span class="line">            carry = sum/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-recursive"><a href="#option-2-recursive" class="headerlink" title="option 2 - recursive"></a>option 2 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwo</span><span class="params">(ListNode* l1, ListNode*l2, <span class="type">int</span> carry)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l1 &amp;&amp; !l2 &amp;&amp; carry == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode * node;</span><br><span class="line">        <span class="keyword">if</span>(l1 || l2 || carry)&#123;</span><br><span class="line">            <span class="type">int</span> sum = carry;</span><br><span class="line">            <span class="keyword">if</span>(l1)&#123;</span><br><span class="line">                sum+=l1-&gt;val;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2)&#123;</span><br><span class="line">                sum+=l2-&gt;val;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            node = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum%<span class="number">10</span>);</span><br><span class="line">            sum/=<span class="number">10</span>;</span><br><span class="line">            node-&gt;next = <span class="built_in">addTwo</span>(l1, l2, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ret-&gt;next = <span class="built_in">addTwo</span>(l1, l2, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> function call</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>300. Longest Increasing Subsequence</title>
    <url>/blog/2023/02/12/leetcode/300_LongestIncreasingSubsequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/">problem</a></h2><p>給定一個整數陣列，找出最遞增子序列。</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  10  9   2   5   3   7   101 18</span></span><br><span class="line">        <span class="comment">//  1   1   1   1   1   1   1   1</span></span><br><span class="line">        <span class="comment">//  1   1   1   2   2   3   4   4</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="comment">// 每次確定第 ith 最長子序列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j] ) dp[i] = <span class="built_in">max</span>(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - *Binary Search"></a>option 2 - *Binary Search</h4><p>更多可以參考<code>patience sorting</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> piles = <span class="number">0</span>, n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">top</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n ; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> poker = nums[i];</span><br><span class="line">            <span class="type">int</span> l =<span class="number">0</span>, r = piles;</span><br><span class="line">            <span class="comment">// 從top 陣列可視範圍 l-r 區間找到poker放入的位置，使得top 是單調遞增陣列</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(top[mid] == poker) r = mid;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(top[mid] &lt; poker ) l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 插入的位置不在陣列可視範圍內</span></span><br><span class="line">            <span class="keyword">if</span>(l==piles) piles++;</span><br><span class="line">            <span class="comment">// 將poker 放進陣列top</span></span><br><span class="line">            top[l] = poker;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//  2   3   7   18 </span></span><br><span class="line">            <span class="comment">//  9   5   101</span></span><br><span class="line">            <span class="comment">//  10</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> piles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - dp<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - binary search <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>sapcency complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>303. Range Sum Query - Immutable</title>
    <url>/blog/2023/02/12/leetcode/303_RangeSumQuery-Immutable/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/range-sum-query-immutable/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>brute forces</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">//  -2  0   3   -5  2   -1</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;nums = nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// brute force</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left;i&lt;=right;i++) ret+=nums[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>prefix sum<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preSum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">//  -2  0   3   -5  2   -1</span></span><br><span class="line">        <span class="comment">//   0 -2  -2  1   -4  -2  -3</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        preSum = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            preSum[i] = preSum[i<span class="number">-1</span>] + nums[i<span class="number">-1</span>];     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preSum[right+<span class="number">1</span>] - preSum[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li><code>sumRange</code> 函數 time complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>304. Range Sum Query 2D - Immutable</title>
    <url>/blog/2023/02/12/leetcode/304_RangeSumQuery2D-Immutable/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;prefixSum;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        prefixSum = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//  3   0   1   4   2   </span></span><br><span class="line">        <span class="comment">//  5   6   3   2   1</span></span><br><span class="line">        <span class="comment">//  1   2   0   1   5</span></span><br><span class="line">        <span class="comment">//  4   1   0   1   7</span></span><br><span class="line">        <span class="comment">//  1   0   3   0   5</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//  0   3   3   4   8   10</span></span><br><span class="line">        <span class="comment">//  0   8   14  18  24  27</span></span><br><span class="line">        <span class="comment">//  0   9   17  21  28  36</span></span><br><span class="line">        <span class="comment">//  0   13  22  26  34  49</span></span><br><span class="line">        <span class="comment">//  0   14  23  30  38  58</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;n+<span class="number">1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;m+<span class="number">1</span>;++j) &#123;</span><br><span class="line">                prefixSum[i][j] = prefixSum[i<span class="number">-1</span>][j] + prefixSum[i][j<span class="number">-1</span>] - prefixSum[i<span class="number">-1</span>][j<span class="number">-1</span>]+matrix[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefixSum[row1][col1] + prefixSum[row2+<span class="number">1</span>][col2+<span class="number">1</span>] - prefixSum[row1][col2+<span class="number">1</span>] - prefixSum[row2+<span class="number">1</span>][col1];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li><code>sumRegion</code> 函數 time complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>309. Best Time to Buy and Sell Stock with Cooldown</title>
    <url>/blog/2023/02/12/leetcode/309_BestTimetoBuyandSellStockwithCooldown/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// sell vs. hold</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]= <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>][<span class="number">0</span>], prices[<span class="number">1</span>]+dp[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>][<span class="number">1</span>], -prices[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>], dp[i<span class="number">-2</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = INT_MIN;</span><br><span class="line">        <span class="type">int</span> dp_pre_0 = <span class="number">0</span>; <span class="comment">// 代表 dp[i-2][0]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = <span class="built_in">max</span>(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = <span class="built_in">max</span>(dp_i_1, dp_pre_0 - prices[i]);</span><br><span class="line">            dp_pre_0 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>30 Substring with Concatenation of All Words</title>
    <url>/blog/2023/02/12/leetcode/30_SubstringwithConcatenationofAllWords/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;x</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>() || words.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        unordered_map&lt;string,<span class="type">int</span>&gt; wordCnt;</span><br><span class="line">        <span class="comment">// words 中每個詞彙長度一致</span></span><br><span class="line">        <span class="type">int</span> n= words.<span class="built_in">size</span>(), len = words[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;word:words) wordCnt[word]++;</span><br><span class="line">        <span class="comment">// s.size() 需轉為int data type</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(<span class="type">int</span>)s.<span class="built_in">size</span>()-n*len ; ++i)&#123;</span><br><span class="line">            unordered_map&lt;string, <span class="type">int</span>&gt; strCnt;</span><br><span class="line">            <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                string t = s.<span class="built_in">substr</span>(i+j*len, len);</span><br><span class="line">                <span class="comment">// 如果不在詞彙表裡就break</span></span><br><span class="line">                <span class="keyword">if</span>(!wordCnt.<span class="built_in">count</span>(t)) <span class="keyword">break</span>;</span><br><span class="line">                strCnt[t]++;</span><br><span class="line">                <span class="comment">// 相同詞彙出現兩次以上</span></span><br><span class="line">                <span class="keyword">if</span>(strCnt[t]&gt; wordCnt[t]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// words 每個詞彙都有在以i為索引開頭的字串</span></span><br><span class="line">            <span class="keyword">if</span>(j==n) ret.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(m)</code> m is words</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
        <tag>sliding window</tag>
      </tags>
  </entry>
  <entry>
    <title>315. Count of Smaller Numbers After Self</title>
    <url>/blog/2023/02/12/leetcode/315_CountofSmallerNumbersAfterSelf/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countSmaller</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; t, <span class="built_in">ret</span>(n,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// insert sort + binary search</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">-1</span> ; --i)&#123;</span><br><span class="line">            <span class="type">int</span> target = nums[i];</span><br><span class="line">            <span class="type">int</span> l =<span class="number">0</span>, r = t.<span class="built_in">size</span>();</span><br><span class="line">            <span class="comment">// 要插入的數字為target </span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(t[mid] &lt; target)  l = mid +<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// r 說明有多少數字在後面且比 nums[i]大</span></span><br><span class="line">            ret[i] = r;</span><br><span class="line">            t.<span class="built_in">insert</span>(t.<span class="built_in">begin</span>()+r, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>318. Maximum Product of Word Lengths</title>
    <url>/blog/2023/02/12/leetcode/318_MaximumProductofWordLengths/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-brute-force-maybe-TLE"><a href="#option-1-brute-force-maybe-TLE" class="headerlink" title="option 1 - brute force, maybe TLE"></a>option 1 - brute force, maybe TLE</h4><ul>
<li>TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCommon</span><span class="params">(string a, string b)</span></span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:a) nums[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[c-<span class="string">&#x27;a&#x27;</span>]&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), [](string &amp;a, string &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="built_in">size</span>()&gt;b.<span class="built_in">size</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">hasCommon</span>(words[i], words[j]))&#123;</span><br><span class="line">                    <span class="type">int</span> size =  words[i].<span class="built_in">size</span>()*words[j].<span class="built_in">size</span>();</span><br><span class="line">                    ret = <span class="built_in">max</span>(ret,size);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>pre-process<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// pre process</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dict</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c:words[i]) dict[i][c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="type">bool</span> isCommon = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;<span class="number">26</span>;++c)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dict[i][c]&gt;<span class="number">0</span> &amp;&amp; dict[j][c]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        isCommon = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!isCommon)&#123;</span><br><span class="line">                    <span class="type">int</span> size = words[i].<span class="built_in">size</span>()*words[j].<span class="built_in">size</span>();</span><br><span class="line">                    ret = <span class="built_in">max</span>(size, ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Bit-Manipulation"><a href="#option-2-Bit-Manipulation" class="headerlink" title="option 2 - Bit Manipulation"></a>option 2 - Bit Manipulation</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因為只會是小寫字母 共 26 個，int共32 ，如此可以將每個word 編碼</span></span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span>,  n= words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mask</span><span class="params">(words.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c:words[i]) mask[i] |= <span class="number">1</span>&lt;&lt;(c-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="comment">// j&lt;i 避免重複選擇</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!(mask[i] &amp; mask[j])) ret = <span class="built_in">max</span>(ret, <span class="built_in">int</span>(words[i].<span class="built_in">size</span>()*words[j].<span class="built_in">size</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>319. Bulb Switcher</title>
    <url>/blog/2023/02/12/leetcode/319_BulbSwitcher/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/bulb-switcher/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bulbSwitch</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>31. Next Permutation</title>
    <url>/blog/2023/02/12/leetcode/31_NextPermutation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/next-permutation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a><a href="https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order">solution</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 給定陣列如果是 降序，說明是全排列的最後一種情況，下一個排序則是初始排序</span><br><span class="line">//  1   2   7   4   3   1</span><br><span class="line">//  1   3   1   2   4   7 下一排列</span><br><span class="line">//  step 1. 從右往左看，數字逐漸變大，直到2時才變小，</span><br><span class="line">//  step 2. 然後在從右往前找第一個比 2 大的數字，是3</span><br><span class="line">//  step 3. 將 2 3 交換，</span><br><span class="line">//  step 4. 把3後面的數字反轉，讓其保持升序</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先從右往左找到，非遞增的位置</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> j = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; nums[j<span class="number">-1</span>] &gt;= nums[j] ) j--;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pivot=j<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> bigger = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(bigger &gt; pivot &amp;&amp; nums[bigger] &lt;= nums[pivot]) bigger--;</span><br><span class="line">        <span class="built_in">swap</span>(nums[pivot], nums[bigger]);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+pivot+<span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>322. Coin Change</title>
    <url>/blog/2023/02/12/leetcode/322_CoinChange/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/coin-change/">problem</a></h2><p>給定一組整數陣列<code>coins</code>，表示不同面額的硬幣，一個整數<code>amount</code>，請問最少硬幣數，可以組成<code>amount</code>元，如果不行<code>return -1</code></p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><blockquote>
<p>至少四種作法</p>
<ol>
<li>brute force, backtracking</li>
<li>backtracking + memo pattern</li>
<li>dp</li>
<li>reduce dp</li>
</ol>
</blockquote>
<ul>
<li><code>base case</code> 面額0元，不需硬幣數，所以為0。</li>
<li>遍歷<code>coins</code>，不斷尋找是否可以更新更小硬幣數</li>
</ul>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 要湊出amount 元最少需要幾個硬幣</span></span><br><span class="line">        <span class="comment">//      0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//      12  12  12  12  12  12  12  12  12  12  12  12  </span></span><br><span class="line">        <span class="comment">//1     0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//2     0   1   1   2   2   3   3   4   4   5   5   6</span></span><br><span class="line">        <span class="comment">//5     0   1   1   2   2   1   2   2   3   3   2   3</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount+<span class="number">1</span>, amount+<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// base case </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;amount+<span class="number">1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=coins[i<span class="number">-1</span>]) dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j], <span class="number">1</span>+dp[i][j-coins[i<span class="number">-1</span>]]);</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][amount]==amount+<span class="number">1</span>?<span class="number">-1</span>:dp[n][amount];      </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 reduce dp"></a>option 2 reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//      12  12  12  12  12  12  12  12  12  12  12  12  </span></span><br><span class="line">        <span class="comment">//1     0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//2     0   1   1   2   2   3   3   4   4   5   5   6</span></span><br><span class="line">        <span class="comment">//5     0   1   1   2   2   1   2   2   3   3   2   3</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, amount+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// base case </span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;amount+<span class="number">1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=coins[i<span class="number">-1</span>]) dp[j] = <span class="built_in">min</span>(dp[j],<span class="number">1</span>+dp[j-coins[i<span class="number">-1</span>]] );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount]==amount+<span class="number">1</span>?<span class="number">-1</span>:dp[amount];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n^amount)</code></li>
<li>space complexity <code>O(n^2)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n*amount)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>324. Wiggle Sort II</title>
    <url>/blog/2023/02/12/leetcode/324_WiggleSortII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/wiggle-sort-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wiggleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = (n<span class="number">-1</span>)/<span class="number">2</span>,  r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) ret[i] = nums[l--];</span><br><span class="line">            <span class="keyword">else</span> ret[i] = nums[r--];</span><br><span class="line">        &#125;</span><br><span class="line">        nums = ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>326. Power of Three</title>
    <url>/blog/2023/02/12/leetcode/326_PowerofThree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/power-of-three/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-iterative-and-recursive"><a href="#option-1-iterative-and-recursive" class="headerlink" title="option 1 iterative and recursive"></a>option 1 iterative and recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">3</span>==<span class="number">0</span>) n/=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">isPowerOfThree</span>(n/<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>因為在<code>[0,2^31-1]</code> 之間最大的三次方數為<code>3^19 = 1162261467</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h4 id="option-2-換底公式"><a href="#option-2-換底公式" class="headerlink" title="option 2 - 換底公式"></a>option 2 - 換底公式</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">int</span>(<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(<span class="number">3</span>))-<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(<span class="number">3</span>)==<span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>328. Odd Even Linked List</title>
    <url>/blog/2023/02/12/leetcode/328_OddEvenLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/odd-even-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">oddEvenList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head ||!head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *odd= <span class="keyword">new</span> <span class="built_in">ListNode</span> (<span class="number">-1</span>), *a = odd, *even = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *b = even;</span><br><span class="line">        ListNode * p = head;</span><br><span class="line">        <span class="keyword">while</span>(p )&#123;</span><br><span class="line">            odd-&gt;next = p;</span><br><span class="line">            odd=odd-&gt;next;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(p)&#123;</span><br><span class="line">                even-&gt;next = p;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                even = even-&gt;next;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        even-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        odd-&gt;next = b-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> a-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>329. Longest Increasing Path in a Matrix</title>
    <url>/blog/2023/02/12/leetcode/329_LongestIncreasingPathinaMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>dfs , TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; matrix, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> len, <span class="type">int</span> &amp;ans)</span></span>&#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans ,len );</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> d:dirs)&#123;</span><br><span class="line">            <span class="type">int</span> x = i +d[<span class="number">0</span>], y = j+d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; matrix[x][y] &gt; matrix[i][j]) <span class="built_in">dfs</span>(matrix,x , y, len+<span class="number">1</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestIncreasingPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m= matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">path</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 因為最短為 1x1</span></span><br><span class="line">        <span class="type">int</span> longpath = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(matrix, i,j,<span class="number">1</span>, path[i][j]);</span><br><span class="line">                longpath = <span class="built_in">max</span>(longpath,  path[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longpath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-dfs-memo"><a href="#option-1-dfs-memo" class="headerlink" title="option 1 -  dfs + memo"></a>option 1 -  dfs + memo</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; memo;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; matrix, <span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(memo[i][j]&gt; <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> d:dirs)&#123;</span><br><span class="line">            <span class="type">int</span> x = i +d[<span class="number">0</span>], y = j+d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; matrix[x][y] &gt; matrix[i][j]) &#123;</span><br><span class="line">                memo[i][j] =  <span class="built_in">max</span>(memo[i][j], <span class="built_in">dfs</span>(matrix,x , y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ++memo[i][j];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestIncreasingPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m= matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">path</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">1</span>));</span><br><span class="line">        memo = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> longpath = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="type">int</span> ret = <span class="built_in">dfs</span>(matrix, i,j);</span><br><span class="line">                longpath = <span class="built_in">max</span>(longpath,  ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longpath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-bfs-maybe-TLE"><a href="#option-2-bfs-maybe-TLE" class="headerlink" title="option 2 - bfs , maybe TLE"></a>option 2 - bfs , maybe TLE</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestIncreasingPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.<span class="built_in">empty</span>() || matrix[<span class="number">0</span>].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j]&gt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">q</span>(&#123;&#123;i,j&#125;&#125;);</span><br><span class="line">                <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k&lt;size;++k)&#123;</span><br><span class="line">                        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">auto</span> d:dirs)&#123;</span><br><span class="line">                            <span class="type">int</span> x = t.first + d[<span class="number">0</span>],  y= t.second+d[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&lt;<span class="number">0</span> || y&gt;m<span class="number">-1</span> || matrix[x][y] &lt;= matrix[t.first][t.second] ||  cnt &lt;= dp[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">                            dp[x][y] = cnt;</span><br><span class="line">                            ret = <span class="built_in">max</span>(ret, cnt);</span><br><span class="line">                            q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ret; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>32. Longest Valid Parentheses</title>
    <url>/blog/2023/02/12/leetcode/32_LongestValidParentheses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-valid-parentheses/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, ret= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">char</span> c= s[i];</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) start = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    sta.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) ret = <span class="built_in">max</span>(i-start+<span class="number">1</span>, ret);</span><br><span class="line">                    <span class="keyword">else</span> ret = <span class="built_in">max</span>(ret, i- sta.<span class="built_in">top</span>());</span><br><span class="line">                        </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><h4 id="option-3-Two-Pointers-reduce-dp"><a href="#option-3-Two-Pointers-reduce-dp" class="headerlink" title="option 3 - Two Pointers , reduce dp"></a>option 3 - Two Pointers , reduce dp</h4>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
        <tag>dp</tag>
        <tag>Two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>331. Verify Preorder Serialization of a Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/331_VerifyPreorderSerializationofaBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string words)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; pre;</span><br><span class="line">        string cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">                pre.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur+=c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cur.<span class="built_in">empty</span>()) pre.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSerialization</span><span class="params">(string preorder)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;string&gt; pre = <span class="built_in">split</span>(preorder);</span><br><span class="line">        <span class="type">int</span> num_child = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(string str:pre)&#123;</span><br><span class="line">            num_child--;</span><br><span class="line">            <span class="keyword">if</span>(num_child&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(str!=<span class="string">&quot;#&quot;</span>)&#123;</span><br><span class="line">                num_child+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num_child==<span class="number">0</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>334. Increasing Triplet Subsequence</title>
    <url>/blog/2023/02/12/leetcode/334_IncreasingTripletSubsequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/increasing-triplet-subsequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>dp and TLE<blockquote>
<ol start="300">
<li>Longest Increasing Subsequence</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">increasingTriplet</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// subsequence ，未必連續</span></span><br><span class="line">        <span class="comment">// 最長遞增子序列</span></span><br><span class="line">        <span class="comment">//  20  100 10  12  5   13</span></span><br><span class="line">        <span class="comment">//  1   1   1   1   1   1</span></span><br><span class="line">        <span class="comment">//  1   2   1   2   1   3</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) dp[i] = <span class="built_in">max</span>(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><p>維護兩陣列</p>
<blockquote>
<p>152 Maximum Product Subarray<br>42 Trapping Rain Water</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">increasingTriplet</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mx</span><span class="params">(n, INT_MIN)</span>, <span class="title">mn</span><span class="params">(n, INT_MAX)</span></span>;</span><br><span class="line">        <span class="comment">//      2   1   5   0   4   6</span></span><br><span class="line">        <span class="comment">//mn    +   2   1   1   0   0</span></span><br><span class="line">        <span class="comment">//mx    6   6   6   6   6   -</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) mn[i] = <span class="built_in">min</span>(mn[i<span class="number">-1</span>], nums[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;i--) mx[i] = <span class="built_in">max</span>(mx[i+<span class="number">1</span>], nums[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 夾擠</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; mn[i] &amp;&amp; nums[i] &lt; mx[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">increasingTriplet</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      2   1   5   0   4   6</span></span><br><span class="line">        <span class="comment">//m1    2   1   1   0   0   </span></span><br><span class="line">        <span class="comment">//m2    +   +   5   5   4   </span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> m1 = INT_MAX, m2 = INT_MAX, n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt;=m1) m1= nums[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]&gt;m1 &amp;&amp; nums[i]&lt;= m2) m2 = nums[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Binary-search"><a href="#option-3-Binary-search" class="headerlink" title="option 3 - Binary search"></a>option 3 - Binary search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">increasingTriplet</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> piles = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">top</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> poker = nums[i];</span><br><span class="line">            <span class="type">int</span> l=<span class="number">0</span>, r = piles;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(top[mid] &gt; poker) r = mid ;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(top[mid] == poker) r  = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l==piles) piles++;</span><br><span class="line">            top[l] = poker;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> piles&gt;=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>TLE<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3 - Binary search<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>337. House Robber III</title>
    <url>/blog/2023/02/12/leetcode/337_HouseRobberIII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/house-robber-iii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>dfs - time out</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">robber</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> do_it = root-&gt;val, not_do_it=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) do_it+=<span class="built_in">robber</span>(root-&gt;left-&gt;left)+<span class="built_in">robber</span>(root-&gt;left-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) do_it+=<span class="built_in">robber</span>(root-&gt;right-&gt;left)+<span class="built_in">robber</span>(root-&gt;right-&gt;right);</span><br><span class="line">        not_do_it+=<span class="built_in">robber</span>(root-&gt;left)+<span class="built_in">robber</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(do_it,not_do_it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">robber</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-1-memo-pattern"><a href="#option-1-memo-pattern" class="headerlink" title="option 1 - memo pattern"></a>option 1 - memo pattern</h4><p>memo 紀錄拜訪過的，避免重複拜訪節點</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;TreeNode*, <span class="type">int</span>&gt; memo;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">robber</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> do_it = root-&gt;val, not_do_it=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(memo.<span class="built_in">find</span>(root)!=memo.<span class="built_in">end</span>()) <span class="keyword">return</span> memo[root];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) do_it+=<span class="built_in">robber</span>(root-&gt;left-&gt;left)+<span class="built_in">robber</span>(root-&gt;left-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) do_it+=<span class="built_in">robber</span>(root-&gt;right-&gt;left)+<span class="built_in">robber</span>(root-&gt;right-&gt;right);</span><br><span class="line">        not_do_it+=<span class="built_in">robber</span>(root-&gt;left)+<span class="built_in">robber</span>(root-&gt;right);</span><br><span class="line">        </span><br><span class="line">        memo[root] = <span class="built_in">max</span>(do_it,not_do_it);</span><br><span class="line">        <span class="keyword">return</span> memo[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">robber</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dfs</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">dfs</span>(root-&gt;left);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; right = <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// not_do_it vs. do_it</span></span><br><span class="line">        ret[<span class="number">0</span>] = <span class="built_in">max</span>(left[<span class="number">0</span>], left[<span class="number">1</span>]) + <span class="built_in">max</span>(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        ret[<span class="number">1</span>] = left[<span class="number">0</span>]+right[<span class="number">0</span>]+root-&gt;val;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>338. Counting Bits</title>
    <url>/blog/2023/02/12/leetcode/338_CountingBits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/counting-bits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>如果i不是2的指數，那 <code>i&amp;(i-1)</code> 可以找到比i小的2的指數</p>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ret++;</span><br><span class="line">            n &amp;= (n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5</span></span><br><span class="line">        <span class="comment">//  0   1   1   2   </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            ret[i] = <span class="built_in">count</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5</span></span><br><span class="line">        <span class="comment">//  0   1   </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="comment">// ret[i] = ret[ i&amp;(i-1)] +1;</span></span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) ret[i] = ret[i/<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">else</span> ret[i] = ret[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3"><a href="#option-3" class="headerlink" title="option 3"></a>option 3</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7   8   </span></span><br><span class="line">        <span class="comment">//  0   1   1   2   1   2   2   3   1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>( (i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>) ret[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> ret[i] = ret[i&amp;(i<span class="number">-1</span>)]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>33. Search in Rotated Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/33_SearchinRotatedSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">problem</a></h2><p>在有序陣列，旋轉後，搜尋target的index<br>各元素唯一</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>因為是原先是有順序的，要嘛左半部遞增，要嘛右半部遞增</li>
<li>假如右半部遞增，target剛好落在右半部，則向右搜尋，反之向左搜尋</li>
<li>假如左半部遞增，target剛好落在左半部，則向左搜尋，反之向右搜尋</li>
</ul>
<h4 id="option-1-Brute-force"><a href="#option-1-Brute-force" class="headerlink" title="option 1 Brute force"></a>option 1 Brute force</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 Binary Search"></a>option 2 Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="comment">// 右半部遞增</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[r])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]&lt;target &amp;&amp; target &lt;=nums[r]) l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左半部遞增</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[l]&lt;=target &amp;&amp; target &lt; nums[mid]) r =mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l =mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(logn)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>342. Power of Four</title>
    <url>/blog/2023/02/12/leetcode/342_PowerofFour/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/power-of-four/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">4</span>==<span class="number">0</span>) n&gt;&gt;=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>((n&amp;(n<span class="number">-1</span>))!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (n&amp;<span class="number">0x55555555</span>) ==n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-換底公式"><a href="#option-3-換底公式" class="headerlink" title="option 3 - 換底公式"></a>option 3 - 換底公式</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">int</span>(<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(<span class="number">4</span>))-<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(<span class="number">4</span>)==<span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>343. Integer Break</title>
    <url>/blog/2023/02/12/leetcode/343_IntegerBreak/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/integer-break/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>backtracking<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> t, <span class="type">int</span> prod)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, prod);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;++i)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(k,t-i, prod*i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ret = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> prod =<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(n,n,prod);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  2   3   4   5   6   7   8   9   10</span></span><br><span class="line">        <span class="comment">//  1   2   4   6   9   12  18  27  36</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;i;++j)&#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">max</span>(j*(i-j), j*dp[i-j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Math"><a href="#option-2-Math" class="headerlink" title="option 2 - Math"></a>option 2 - Math</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可以看出從5開始，數字都需要先拆出所有的3，一直拆到剩下一個數為2或者4</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span> || n==<span class="number">3</span>) <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">4</span>)&#123;</span><br><span class="line">            ret*=<span class="number">3</span>;</span><br><span class="line">            n-=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret*n;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>344. Reverse String</title>
    <url>/blog/2023/02/12/leetcode/344_ReverseString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span>* b)</span></span>&#123;</span><br><span class="line">        *a = *a^*b;</span><br><span class="line">        *b = *a^*b;</span><br><span class="line">        *a = *a^*b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) <span class="built_in">swap</span>(&amp;s[l++], &amp;s[r--]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="option-2-stack"><a href="#option-2-stack" class="headerlink" title="option 2 - stack"></a>option 2 - stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c:s) sta.<span class="built_in">push</span>(c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c :s)&#123;</span><br><span class="line">            c = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="option-3-without-loop-using-recursive"><a href="#option-3-without-loop-using-recursive" class="headerlink" title="option 3 - without loop , using recursive"></a>option 3 - without loop , using recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() != <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">char</span> temp = s[<span class="number">0</span>];</span><br><span class="line">        s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="built_in">reverseString</span>(s);</span><br><span class="line">        s.<span class="built_in">push_back</span>(temp);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - Two Pointers<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - stack<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>345. Reverse Vowels of a String</title>
    <url>/blog/2023/02/12/leetcode/345_ReverseVowelsofaString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isVowel</span><span class="params">(<span class="type">char</span> &amp;c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;a&#x27;</span> || c==<span class="string">&#x27;e&#x27;</span> || c==<span class="string">&#x27;i&#x27;</span> || c==<span class="string">&#x27;o&#x27;</span> || c==<span class="string">&#x27;u&#x27;</span> || c==<span class="string">&#x27;A&#x27;</span> || c==<span class="string">&#x27;E&#x27;</span> || c==<span class="string">&#x27;I&#x27;</span> || c==<span class="string">&#x27;O&#x27;</span> || c==<span class="string">&#x27;U&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseVowels</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>,r = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isVowel</span>(s[l])) l++;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; !<span class="built_in">isVowel</span>(s[r])) r--;</span><br><span class="line">            <span class="built_in">swap</span>(s[l++],s[r--] );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>347. Top K Frequent Elements</title>
    <url>/blog/2023/02/12/leetcode/347_TopKFrequentElements/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/top-k-frequent-elements/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-heap"><a href="#option-1-heap" class="headerlink" title="option 1 - heap"></a>option 1 - heap</h4><ul>
<li>先用一個hash table 紀錄每個數字與其出次數</li>
<li>用一個heap，並自定義比較的函數，將<code>&#123;數字,出現次數 &#125;</code> push into heap</li>
<li>heap pop</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:nums) mp[a]++;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">auto</span> m:mp) pq.<span class="built_in">push</span>(&#123;m.first, m.second&#125;);</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(pq.<span class="built_in">top</span>()[<span class="number">0</span>]);</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-bucket-sorting"><a href="#option-2-bucket-sorting" class="headerlink" title="option 2 - bucket sorting"></a>option 2 - bucket sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:nums) mp[a]++;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">bucket</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            bucket[m.second<span class="number">-1</span>].<span class="built_in">push_back</span>(m.first);</span><br><span class="line">            f = <span class="built_in">max</span>(f, m.second<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bucket.<span class="built_in">resize</span>(f+<span class="number">1</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = f;i&gt;<span class="number">-1</span> ; i--)&#123;</span><br><span class="line">            <span class="type">int</span> cur = bucket[i].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; cur &gt; <span class="number">-1</span> )&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(bucket[i][cur--]);</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogK)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>349. Intersection of Two Arrays</title>
    <url>/blog/2023/02/12/leetcode/349_IntersectionofTwoArrays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/intersection-of-two-arrays/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-set"><a href="#option-1-set" class="headerlink" title="option 1 - set"></a>option 1 - set</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// set</span></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s, ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums1) s.<span class="built_in">insert</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(n)!=s.<span class="built_in">end</span>()) ret.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-improve-set"><a href="#option-2-improve-set" class="headerlink" title="option 2 - improve set"></a>option 2 - improve set</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span>, ret</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums1) freq[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(freq[n]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(n);</span><br><span class="line">                freq[n]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-sorting"><a href="#option-3-sorting" class="headerlink" title="option 3 - sorting"></a>option 3 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>, n=nums1.<span class="built_in">size</span>(), m = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[l] == nums2[r]) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(nums1[l]);</span><br><span class="line">                <span class="comment">// de duplicate</span></span><br><span class="line">                <span class="keyword">while</span>(l+<span class="number">1</span>&lt;n &amp;&amp; nums1[l] == nums1[l+<span class="number">1</span>]) l++;</span><br><span class="line">                <span class="keyword">while</span>(r+<span class="number">1</span>&lt;m &amp;&amp; nums2[r] == nums2[r+<span class="number">1</span>]) r++;</span><br><span class="line">                l++;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[l]&lt;nums2[r]) l++;</span><br><span class="line">                <span class="keyword">else</span> r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-4-binary-search"><a href="#option-4-binary-search" class="headerlink" title="option 4 - binary search"></a>option 4 - binary search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">BinarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">BinarySearch</span>(nums1, n)) s.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3 - sorting<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 4 - binary search<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>34. Find First and Last Position of Element in Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/34_FindFirstandLastPositionofElementinSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">0</span> || l&gt;n<span class="number">-1</span> || nums[l]!=target) <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> j = l;</span><br><span class="line">        <span class="keyword">while</span>(j+<span class="number">1</span>&lt;n &amp;&amp; nums[j] == nums[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">return</span> &#123;l,j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>lower bound</li>
</ul>
<pre><code class="c++">class Solution &#123;
public:
    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;
        if(nums.empty()) return &#123;-1,-1&#125;;
        int l = 0 , r = nums.size();
        while(l&lt;r)&#123;
            int mid = l +(r-l)/2;
            if(nums[mid]&gt;=target) r= mid;
            else l = mid+1;
        &#125;
        if(l&lt;0 || l&gt;nums.size()-1 || nums[l]!=target) return &#123;-1,-1&#125;;
        r = l;
        while(r&lt;nums.size()-1 &amp;&amp; nums[r+1] == nums[l] ) r++;
        return &#123;l,r&#125;;
    &#125;
&#125;;
```## analysis
- time complexity `O(logn)`
- space complexity `O(1)`
</code></pre>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>350. Intersection of Two Arrays II</title>
    <url>/blog/2023/02/12/leetcode/350_IntersectionofTwoArraysII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-hash-table"><a href="#option-1-hash-table" class="headerlink" title="option 1 - hash table"></a>option 1 - hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums1) mp[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(n)!=mp.<span class="built_in">end</span>() &amp;&amp; mp[n]!=<span class="number">0</span>)&#123;</span><br><span class="line">                mp[n]--;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-improve-hash-table"><a href="#option-2-improve-hash-table" class="headerlink" title="option 2 - improve hash table"></a>option 2 - improve hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span>, ret</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums1) freq[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(freq[n]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(n);</span><br><span class="line">                freq[n]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-sorting"><a href="#option-3-sorting" class="headerlink" title="option 3 - sorting"></a>option 3 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>, n=nums1.<span class="built_in">size</span>(), m = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[l] == nums2[r]) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(nums1[l]);</span><br><span class="line">                <span class="comment">// while(l+1&lt;n &amp;&amp; nums1[l] == nums1[l+1]) l++;</span></span><br><span class="line">                <span class="comment">// while(r+1&lt;m &amp;&amp; nums2[r] == nums2[r+1]) r++;</span></span><br><span class="line">                l++;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[l]&lt;nums2[r]) l++;</span><br><span class="line">                <span class="keyword">else</span> r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3 - sorting<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>354. Russian Doll Envelopes</title>
    <url>/blog/2023/02/12/leetcode/354_RussianDollEnvelopes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/russian-doll-envelopes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><p>可能會time out</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">//  2   3   5   4   5   5   6   7   8</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  3   4   7   4</span></span><br><span class="line">        <span class="comment">//  </span></span><br><span class="line">        <span class="comment">// dp base method =&gt; time out</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ret = <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;i;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt; nums[j]) dp[i] = <span class="built_in">max</span>(<span class="number">1</span>+dp[j], dp[i]);</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxEnvelopes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先確保每個vector&lt;int&gt; 第一元素是升序排列，第一元素相同情況下，第二元素降序排列</span></span><br><span class="line">        <span class="comment">// 在創建一個vector&lt;int&gt; 為 陣列中每個元素的第二元素(剛降序的個果)，再娶嘴長遞增子陣列</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  [2,3] [5,4] [6,7] [6,4]</span></span><br><span class="line">        <span class="comment">// [[1,2],[2,3],[3,5],[3,4],[4,5],[5,5],[5,6],[6,7],[7,8]]</span></span><br><span class="line">        <span class="comment">// [[2,100],[3,200],[4,300],[5,500],[5,400],[5,250],[6,370],[6,360],[7,380]]</span></span><br><span class="line">        <span class="built_in">sort</span>(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>]&gt;b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; v:envelopes) nums.<span class="built_in">push_back</span>(v[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">lengthOfLIS</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - Binary Search"></a>option 2 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">//  2   3   5   4   5   5   6   7   8</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  3   4   7   4</span></span><br><span class="line">        <span class="comment">//  </span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> piles = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">top</span><span class="params">(nums.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> poker:nums)&#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = piles;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(top[mid] == poker) r = mid;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(top[mid] &lt; poker) l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l==piles) piles++;;</span><br><span class="line">            top[l] = poker;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> piles;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxEnvelopes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先確保每個vector&lt;int&gt; 第一元素是升序排列，第一元素相同情況下，第二元素降序排列</span></span><br><span class="line">        <span class="comment">// 在創建一個vector&lt;int&gt; 為 陣列中每個元素的第二元素(剛降序的個果)，再娶嘴長遞增子陣列</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  [2,3] [5,4] [6,7] [6,4]</span></span><br><span class="line">        <span class="comment">// [[1,2],[2,3],[3,5],[3,4],[4,5],[5,5],[5,6],[6,7],[7,8]]</span></span><br><span class="line">        <span class="comment">// [[2,100],[3,200],[4,300],[5,500],[5,400],[5,250],[6,370],[6,360],[7,380]]</span></span><br><span class="line">        <span class="built_in">sort</span>(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>]&gt;b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; v:envelopes) nums.<span class="built_in">push_back</span>(v[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">lengthOfLIS</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - dp<ul>
<li>time complexity <code>O(n^2)</code> </li>
<li>space complexity <code>O(n^2)</code></li>
</ul>
</li>
<li>option 2 - binary search<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>357. Count Numbers with Unique Digits</title>
    <url>/blog/2023/02/12/leetcode/357_CountNumberswithUniqueDigits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-numbers-with-unique-digits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用測資作弊</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNumbersWithUniqueDigits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7   8  </span></span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line">        <span class="comment">// 10</span></span><br><span class="line">        <span class="comment">// 91</span></span><br><span class="line">        <span class="comment">// 739</span></span><br><span class="line">        <span class="comment">// 5275</span></span><br><span class="line">        <span class="comment">// 32491</span></span><br><span class="line">        <span class="comment">// 168571</span></span><br><span class="line">        <span class="comment">// 712891</span></span><br><span class="line">        <span class="comment">// 2345851</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">91</span>,<span class="number">739</span>,<span class="number">5275</span>,<span class="number">32491</span>, <span class="number">168571</span>, <span class="number">712891</span>,<span class="number">2345851</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> nums[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNumbersWithUniqueDigits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// from hint 5;</span></span><br><span class="line">        <span class="comment">// f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) </span></span><br><span class="line">        <span class="comment">// option 1</span></span><br><span class="line">        <span class="keyword">if</span>(n ==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n ==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">9</span>, d = <span class="number">9</span>, t= n;</span><br><span class="line">        <span class="keyword">while</span>(--t)&#123;</span><br><span class="line">            total *=d--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total + <span class="built_in">countNumbersWithUniqueDigits</span>(n<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNumbersWithUniqueDigits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n ==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> j = i<span class="number">-1</span>, d = <span class="number">9</span>, t =d;</span><br><span class="line">            <span class="keyword">while</span>(j--)&#123;</span><br><span class="line">                t*=d;</span><br><span class="line">                d--;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] += t+dp[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code> , beacuse of <code>n&lt;=8</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>35. Search Insert Position</title>
    <url>/blog/2023/02/12/leetcode/35_SearchInsertPosition/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/search-insert-position/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-linear-search"><a href="#option-1-linear-search" class="headerlink" title="option 1 - linear search"></a>option 1 - linear search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">-1</span>, n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;=target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-binary-search"><a href="#option-2-binary-search" class="headerlink" title="option 2 - binary search"></a>option 2 - binary search</h4><ul>
<li>normal version</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] ==target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l ;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>left bound<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), l=<span class="number">0</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] ==target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l ;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>368. Largest Divisible Subset</title>
    <url>/blog/2023/02/12/leetcode/368_LargestDivisibleSubset/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/largest-divisible-subset/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestDivisibleSubset</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span>, <span class="title">parent</span><span class="params">(n,<span class="number">0</span>)</span>, ret </span>;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>, mx_idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span> ; i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i ; j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]%nums[i] == <span class="number">0</span> &amp;&amp; dp[i] &lt; dp[j]+<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i] = dp[j]+<span class="number">1</span>;</span><br><span class="line">                    parent[i] = j;</span><br><span class="line">                    <span class="keyword">if</span>(mx&lt;dp[i])&#123;</span><br><span class="line">                        mx = dp[i];</span><br><span class="line">                        mx_idx = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mx ; ++i)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(nums[mx_idx]);</span><br><span class="line">            mx_idx = parent[mx_idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">                                    </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>36. Valid Sudoku</title>
    <url>/blog/2023/02/12/leetcode/36_ValidSudoku/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-sudoku/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">9</span>, m=<span class="number">9</span>;</span><br><span class="line">        <span class="comment">// check each row</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            unordered_set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">find</span>(board[i][j]) != s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                s.<span class="built_in">insert</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check each col</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">            unordered_set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.<span class="built_in">find</span>(board[i][j]) != s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                s.<span class="built_in">insert</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// check each block</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j+=<span class="number">3</span>)&#123;</span><br><span class="line">                unordered_set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">                <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt; d:dirs)&#123;</span><br><span class="line">                    <span class="type">int</span> x = i+d[<span class="number">0</span>], y = j+d[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(board[x][y] == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(s.<span class="built_in">find</span>(board[x][y]) != s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    s.<span class="built_in">insert</span>(board[x][y]);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>371. Sum of Two Integers</title>
    <url>/blog/2023/02/12/leetcode/371_SumofTwoIntegers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sum-of-two-integers/">problem</a></h2><h2 id="refer-to"><a href="#refer-to" class="headerlink" title="refer to"></a>refer to</h2><ul>
<li><code>&amp;</code> 通常用於二進位的取位操作，例如一個數(x) <code>x &amp; 1</code> 的結果就是取二進位的最末位，可以用來判斷奇偶。另外，相同位的兩個數字都為 1，則為 1，若有一個不為 1，則為0</li>
<li><code>^</code> 異或運算，如果某位不同則為1，否則為0。另外，還有<code>a^b = b^a</code>，<code>a^0=a</code></li>
<li>加法可以用<code>&amp;</code>、<code>^</code> 實現<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">add</span>(<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        sum = a^b;</span><br><span class="line">        count = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        a = sum;</span><br><span class="line">        b = count;</span><br><span class="line">    &#125;<span class="keyword">while</span>(b!=<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2></li>
</ul>
<h4 id="option-1-iterative"><a href="#option-1-iterative" class="headerlink" title="option 1 - iterative"></a>option 1 - iterative</h4><ul>
<li>加入<code> 0x7fffffff</code> 以防overflow <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a)&#123;</span><br><span class="line">            <span class="type">int</span> carry = (a&amp;b&amp;<span class="number">0x7fffffff</span>)&lt;&lt;<span class="number">1</span>, sum = a^b;</span><br><span class="line">            a = carry, b = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-recursive"><a href="#option-2-recursive" class="headerlink" title="option 2 - recursive"></a>option 2 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="type">int</span> carry = (a&amp;b&amp;<span class="number">0x7fffffff</span>)&lt;&lt;<span class="number">1</span>, sum = a^b;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getSum</span>(carry, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>372. Super Pow</title>
    <url>/blog/2023/02/12/leetcode/372_SuperPow/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/super-pow/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> mod = <span class="number">1337</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myPow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        a = a%mod;</span><br><span class="line">        <span class="type">int</span> ret =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k ; ++i) ret = (ret*a) %mod;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">superPow</span><span class="params">(<span class="type">int</span> a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> x = b.<span class="built_in">back</span>();</span><br><span class="line">        b.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="type">int</span> part1 = <span class="built_in">myPow</span>(a,x);</span><br><span class="line">        <span class="type">int</span> part2 = <span class="built_in">myPow</span>(<span class="built_in">superPow</span>(a,b),<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> part1 *part2%mod;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>374. Guess Number Higher or Lower</title>
    <url>/blog/2023/02/12/leetcode/374_GuessNumberHigherorLower/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/guess-number-higher-or-lower/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Forward declaration of guess API.</span></span><br><span class="line"><span class="comment"> * @param  num   your guess</span></span><br><span class="line"><span class="comment"> * @return 	     -1 if num is higher than the picked number</span></span><br><span class="line"><span class="comment"> *			      1 if num is lower than the picked number</span></span><br><span class="line"><span class="comment"> *               otherwise return 0</span></span><br><span class="line"><span class="comment"> * int guess(int num);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">guessNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> ans = <span class="built_in">guess</span>(mid);</span><br><span class="line">            <span class="keyword">if</span>( ans == <span class="number">0</span>) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ans == <span class="number">-1</span>) r = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>377. Combination Sum IV</title>
    <url>/blog/2023/02/12/leetcode/377_CombinationSumIV/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/combination-sum-iv/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>dfs , TLE<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt; &amp; path, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            ret++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">dfs</span>(nums, target-nums[i], path, i);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, target, path,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=target;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> a:nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=a ) dp[i] += dp[i-a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>378. Kth Smallest Element in a Sorted Matrix</title>
    <url>/blog/2023/02/12/leetcode/378_KthSmallestElementinaSortedMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-STL-to-store"><a href="#option-1-STL-to-store" class="headerlink" title="option 1 - STL to store"></a>option 1 - STL to store</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix , <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j) vec.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> vec[k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix , <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j) pq.<span class="built_in">push</span>(matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">while</span>(k--) pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Binary-Search"><a href="#option-3-Binary-Search" class="headerlink" title="option 3- Binary Search"></a>option 3- Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lower_bound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="comment">//left lower</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt;= target ) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix , <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = matrix[<span class="number">0</span>][<span class="number">0</span>], right = matrix[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// cnt 計算陣列有多少數字小於等於mid</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                cnt+=<span class="built_in">lower_bound</span>(matrix[i], mid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt; k) right = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt&lt;k) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space <code>O(n)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>37. Sudoku Solver</title>
    <url>/blog/2023/02/12/leetcode/37_SudokuSolver/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sudoku-solver/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> r, <span class="type">int</span> c, <span class="type">char</span> ch )</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][i] == ch) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[i][c] == ch) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[(r/<span class="number">3</span>)*<span class="number">3</span>+i/<span class="number">3</span>][(c/<span class="number">3</span>)*<span class="number">3</span> +i%<span class="number">3</span>] == ch ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; &amp; board, <span class="type">int</span> r, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">9</span>) <span class="keyword">return</span> <span class="built_in">traverse</span>(board, r+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(r==<span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(board[r][c]!=<span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="built_in">traverse</span>(board, r, c+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch=<span class="string">&#x27;1&#x27;</span>; ch&lt;=<span class="string">&#x27;9&#x27;</span> ;++ch)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isValid</span>(board, r, c, ch)) <span class="keyword">continue</span>;</span><br><span class="line">            board[r][c] = ch;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">traverse</span>(board, r, c+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            board[r][c] =<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">traverse</span>(board, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(9^nm)</code></li>
<li>sparse complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>380. Insert Delete GetRandom O(1)</title>
    <url>/blog/2023/02/12/leetcode/380_InsertDeleteGetRandomO(1)/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/insert-delete-getrandom-o1/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用 array 與 hash table (key:value), key存array元素，value存array索引</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// set : insert O(logn), delete O(logn)</span></span><br><span class="line">    <span class="comment">// unordered_set : insert O(1), delete O(1) 分攤後</span></span><br><span class="line">    <span class="comment">// map : insert O(logn), delete O(logn)</span></span><br><span class="line">    <span class="comment">// unordered_map : insert O(1), delete O(1) 分攤後</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存 value</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="comment">// key 存 list的索引，因為key 必須唯一， value 存value</span></span><br><span class="line">    <span class="comment">// key 存vec的value，value 唯一 , value存索引</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; val2idx;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RandomizedSet</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val2idx.<span class="built_in">find</span>(val) !=val2idx.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        val2idx[val] = vec.<span class="built_in">size</span>();</span><br><span class="line">        vec.<span class="built_in">push_back</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(val2idx.<span class="built_in">find</span>(val)==val2idx.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 重點，需要從vector移除指定元素，但必須要O(1)</span></span><br><span class="line">        <span class="type">int</span> idx = val2idx[val];</span><br><span class="line">        val2idx[vec.<span class="built_in">back</span>()] = idx;</span><br><span class="line">        <span class="built_in">swap</span>(vec[idx], vec.<span class="built_in">back</span>());</span><br><span class="line">        <span class="comment">// remove the last element, this </span></span><br><span class="line">        val2idx.<span class="built_in">erase</span>(val);</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vec[<span class="built_in">rand</span>()% vec.<span class="built_in">size</span>()];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>381. Insert Delete GetRandom O(1) - Duplicates allowed</title>
    <url>/blog/2023/02/12/leetcode/381_InsertDeleteGetRandomO(1)-Duplicatesallowed/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedCollection</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, unordered_set&lt;<span class="type">int</span>&gt;&gt; val2idx;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RandomizedCollection</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        val2idx[val].<span class="built_in">insert</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        nums.<span class="built_in">push_back</span>(val);</span><br><span class="line">        <span class="keyword">return</span> val2idx[val].<span class="built_in">size</span>() ==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val2idx[val].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> idx = *val2idx[val].<span class="built_in">begin</span>();</span><br><span class="line">        val2idx[val].<span class="built_in">erase</span>(idx);</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() <span class="number">-1</span> != idx)&#123;</span><br><span class="line">            <span class="type">int</span> t = nums.<span class="built_in">back</span>();</span><br><span class="line">            nums[idx] = t;</span><br><span class="line">            val2idx[t].<span class="built_in">erase</span>(nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">            val2idx[t].<span class="built_in">insert</span>(idx);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        nums.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="built_in">rand</span>()%nums.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedCollection object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedCollection* obj = new RandomizedCollection();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insert(val);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>382. Linked List Random Node</title>
    <url>/blog/2023/02/12/leetcode/382_LinkedListRandomNode/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/linked-list-random-node/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-cheat-container-to-store"><a href="#option-1-cheat-container-to-store" class="headerlink" title="option 1 - cheat , container to store"></a>option 1 - cheat , container to store</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="type">int</span> size ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Solution</span>(ListNode* head) &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        ListNode *p;</span><br><span class="line">        <span class="keyword">for</span>(p=head;p;p=p-&gt;next) &#123;vec.<span class="built_in">push_back</span>(p-&gt;val);size++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vec[<span class="built_in">rand</span>()%size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-algo"><a href="#option-2-algo" class="headerlink" title="option 2 - algo"></a>option 2 - algo</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ListNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Solution</span>(ListNode* head) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;head = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">rand</span>()%count==<span class="number">0</span>) ret = p-&gt;val;</span><br><span class="line">            </span><br><span class="line">            count++;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Randomized</tag>
      </tags>
  </entry>
  <entry>
    <title>383. Ransom Note</title>
    <url>/blog/2023/02/12/leetcode/383_RansomNote/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/ransom-note/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = ransomNote.<span class="built_in">size</span>(), m = magazine.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:magazine) vec[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:ransomNote)&#123;</span><br><span class="line">            vec[c-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(vec[c-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>386. Lexicographical Numbers</title>
    <url>/blog/2023/02/12/leetcode/386_LexicographicalNumbers/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/lexicographical-numbers/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-iterative"><a href="#option-1-iterative" class="headerlink" title="option 1 - iterative"></a>option 1 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ret[i] = cur;</span><br><span class="line">            <span class="keyword">if</span>(cur*<span class="number">10</span> &lt;=n) cur*=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur&gt;=n) cur/=<span class="number">10</span>;</span><br><span class="line">                cur++;</span><br><span class="line">                <span class="keyword">while</span>(cur%<span class="number">10</span>==<span class="number">0</span>) cur/=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dfs"><a href="#option-2-dfs" class="headerlink" title="option 2 - dfs"></a>option 2 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> n , vector&lt;<span class="type">int</span>&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur&gt;n) <span class="keyword">return</span>;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur*<span class="number">10</span> +i &lt;= n) <span class="built_in">dfs</span>(cur*<span class="number">10</span>+i,n,ret);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i) <span class="built_in">dfs</span>(i,n,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>387. First Unique Character in a String</title>
    <url>/blog/2023/02/12/leetcode/387_FirstUniqueCharacterinaString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) mp[c]++;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[s[i]] == <span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>vector<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) vec[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[s[i] - <span class="string">&#x27;a&#x27;</span>] ==<span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code> 最多26字母</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>389. Find the Difference</title>
    <url>/blog/2023/02/12/leetcode/389_FindtheDifference/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-the-difference/">problem</a></h2><p>給定兩字串，字串t比字串s多出一個字元，將他找出來</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>逐一字串 t 拜訪，拜訪到的字元將轉其對應ASCII 取值，並累加</li>
<li>逐一字串 s 拜訪，拜訪到的字元將轉其對應ASCII 取值，並相減</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t) ret +=c; <span class="comment">// auto cast</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) ret -=c; </span><br><span class="line">        <span class="keyword">return</span> (<span class="type">char</span>)ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>遍歷字串s,t，對所有字元做xor</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> ret =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t) ret ^=c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) ret ^=c; </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>38. Count and Say</title>
    <url>/blog/2023/02/12/leetcode/38_CountandSay/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/count-and-say/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-iterative"><a href="#option-1-iterative" class="headerlink" title="option 1 iterative"></a>option 1 iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string ret = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            string path ;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>, val = ret[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;ret.<span class="built_in">size</span>() ; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ret[j] == val) count++;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    path+=<span class="built_in">to_string</span>(count);</span><br><span class="line">                    path+=val;</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                    val = ret[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;path+=<span class="built_in">to_string</span>(count);path+=val;&#125;</span><br><span class="line">            ret = path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-recursive"><a href="#option-2-recursive" class="headerlink" title="option 2 recursive"></a>option 2 recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>392. Is Subsequence</title>
    <url>/blog/2023/02/12/leetcode/392_IsSubsequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/is-subsequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-two-pointers"><a href="#option-1-two-pointers" class="headerlink" title="option 1 - two pointers"></a>option 1 - two pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = t.<span class="built_in">size</span>(), m = s.<span class="built_in">size</span>(), j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[i] == s[j]) j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j==m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = t.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//      a   h   b   g   d   c   </span></span><br><span class="line">        <span class="comment">//  0   0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//a 0   1   1   1   1   1   1</span></span><br><span class="line">        <span class="comment">//b 0   1   1   2   2   2   2</span></span><br><span class="line">        <span class="comment">//c 0   1   1   2   2   2   3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m+<span class="number">1</span>;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>]) dp[i][j] = <span class="number">1</span>+dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m]==s.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-hash-table-Binary-Search"><a href="#option-3-hash-table-Binary-Search" class="headerlink" title="option 3 - *hash table + Binary Search"></a>option 3 - *hash table + Binary Search</h4><blockquote>
<p>follow up ，當很多個 <code>s</code> 不斷輸入時</p>
</blockquote>
<p>假設 <code>t = &quot;cacbhbc&quot;</code>，需要一個hash table 存每個字元與方出現的位置，如<code>unordered_map&lt;char, vector&lt;int&gt;&gt;hash_table = &#123;&#123;"a", &#123;1&#125;&#125;, &#123;&quot;b&quot;, &#123;3,5&#125;&#125; , &#123;&quot;c&quot;, &#123;0,2,6&#125; &#125;, &#123;&quot;h&quot;, &#123;4&#125;&#125; &#125;</code>，當 <code>s=&quot;abc&quot;</code>，且已經匹配 <code>&quot;ab&quot;</code>了，那這時只需要用二元搜尋查找<code>hash_table[&quot;c&quot;]</code> 這個 vector中比<code>4</code>大的索引。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) r = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) r= mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, vector&lt;<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = t[i];</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(c)==mp.<span class="built_in">end</span>())&#123;</span><br><span class="line">                mp[c].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mp[c].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="type">int</span> j =<span class="number">0</span>; <span class="comment">// index of t</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="comment">// t 字串找不到 s[i] 這字元</span></span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(c)==mp.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> pos = <span class="built_in">left_bound</span>(mp[c], j);</span><br><span class="line">            <span class="comment">// 二元搜尋區間中沒有字元 c</span></span><br><span class="line">            <span class="keyword">if</span>(pos == mp[c].<span class="built_in">size</span>() )  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            j = mp[c][pos]+<span class="number">1</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - two pointers<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - dp<ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code>, n &#x3D; len(s), m&#x3D; len(t)</li>
</ul>
</li>
<li>option 3 - hash table + binary search<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Two Pointers</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>393 UTF-8 Validation</title>
    <url>/blog/2023/02/12/leetcode/393_UTF-8Validation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/utf-8-validation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validUtf8</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; data)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="comment">// ASCII</span></span><br><span class="line">            <span class="keyword">if</span>(data[i] &lt; <span class="number">0b10000000</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 第一位的1 指示標誌符，後面連續跟多少個1，代表後面會有多少byte 以 10開頭</span></span><br><span class="line">            <span class="comment">// cnt 代表要從當前數字往後檢查多少個數字</span></span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>, val = data[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">7</span>;j&gt;=<span class="number">0</span> ; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>((data[i]&gt;&gt;j)&amp;<span class="number">1</span> == <span class="number">1</span>) cnt++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cnt ==<span class="number">1</span> || cnt &gt; <span class="number">4</span> || cnt&gt;n -i)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =i+<span class="number">1</span> ; j&lt;i+cnt ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(data[j] &gt; <span class="number">0b10111111</span> || data[j] &lt; <span class="number">0b10000000</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i+= cnt<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>395. Longest Substring with At Least K Repeating Characters</title>
    <url>/blog/2023/02/12/leetcode/395_LongestSubstringwithAtLeastKRepeatingCharacters/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubstring</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// O(26n)</span></span><br><span class="line">        <span class="type">int</span> ret =  <span class="number">0</span> , n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 子字串不同字母數介於 [1,26] </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cnt = <span class="number">1</span>; cnt &lt;= <span class="number">26</span>; ++cnt) &#123;</span><br><span class="line">            <span class="comment">// uniqueCnt 窗口有多少字母唯一</span></span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, uniqueCnt = <span class="number">0</span>;</span><br><span class="line">            unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; n)&#123;</span><br><span class="line">                <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">char</span> c = s[r++];</span><br><span class="line">                <span class="keyword">if</span>(window[c] == <span class="number">0</span>) uniqueCnt++;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="comment">// 不同字母數 超過cnt</span></span><br><span class="line">                <span class="keyword">while</span>(uniqueCnt &gt; cnt)&#123;</span><br><span class="line">                    <span class="type">char</span> d = s[l++];</span><br><span class="line">                    window[d]--;</span><br><span class="line">                    <span class="keyword">if</span>(window[d] == <span class="number">0</span>) uniqueCnt--;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 檢查window 各個字母數量 是否少於 k </span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> w:window)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(w.second&gt;<span class="number">0</span> &amp;&amp; w.second&lt;k) valid = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新解答</span></span><br><span class="line">                <span class="keyword">if</span>(valid) ret = <span class="built_in">max</span>(ret, r-l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;s</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(26n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sliding window</tag>
      </tags>
  </entry>
  <entry>
    <title>39. Combination Sum</title>
    <url>/blog/2023/02/12/leetcode/39_CombinationSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/combination-sum/">problem</a></h2><p>找出所有組合總和為target 的子序列，可以重複選取，但每組組合必須唯一。</p>
<h2 id="sloution"><a href="#sloution" class="headerlink" title="sloution"></a>sloution</h2><ul>
<li><p>用遞迴暴力求解，遍歷每種可能，終止條件<code>target&lt;0</code></p>
</li>
<li><p>因為可以重複，所以每次調用<code>bracktracking(candidates, target - candidates[i], path, ret, i)</code> 而不是<code>l+1</code>。</p>
</li>
<li><p>version 1 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bracktracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates,<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt; &amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret, <span class="type">int</span> l )</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(target ==<span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;candidates.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">bracktracking</span>(candidates, target - candidates[i], path, ret, i);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;  ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">bracktracking</span>(candidates, target, path, ret, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>version 2 sorting </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bracktracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates,<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt; &amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret, <span class="type">int</span> l )</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(target ==<span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;candidates.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target - candidates[i]&lt;<span class="number">0</span>) <span class="keyword">return</span> ; <span class="comment">//sort</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="comment">// 因為可重複拿取同一元素</span></span><br><span class="line">            <span class="built_in">bracktracking</span>(candidates, target - candidates[i], path, ret, i);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>()); <span class="comment">//sort</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;  ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">bracktracking</span>(candidates, target, path, ret, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li><p>time complexity <code>O(len(nums)^M)</code>, M is the height of our recursive</p>
</li>
<li><p>space complexity <code>L</code> , L is the longest combination</p>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>3. Longest Substring Without Repeating Characters</title>
    <url>/blog/2023/02/12/leetcode/3_LongestSubstringWithoutRepeatingCharacters/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">problem</a></h2><p>Given a string, find the length of the longest substring without repeating characters.</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用一個hash table 紀錄window中，出現個字元與其次數，然後不斷向右移動window，當，當window內出現某個字元出現大於一次，則開始從左邊收縮，直到滿足個字元都為一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">0</span>, n = s.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">char</span> c = s[r++];</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">while</span>(window[c]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">char</span> d = s[l++];</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, r-l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以用固定大小的vector 代替hash table</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">window</span><span class="params">(<span class="number">128</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r=<span class="number">0</span>, ret = <span class="number">0</span>, n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">char</span> c = s[r++];</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">while</span>(window[c]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">char</span> d = s[l++];</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, r-l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code> , 最多26 個英文字母</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>400. Nth Digit</title>
    <url>/blog/2023/02/12/leetcode/400_NthDigit/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/nth-digit/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findNthDigit</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> len = <span class="number">1</span>, cnt = <span class="number">9</span>, start = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 先定位要去哪個區間找尋答案 [1,9] [10,99] [100,999] [1000,9999]</span></span><br><span class="line">        <span class="comment">//                          1個位數*9個   2個位數*90個 ...</span></span><br><span class="line">        <span class="keyword">while</span>(n&gt; len*cnt)&#123;</span><br><span class="line">            n-= len*cnt;</span><br><span class="line">            len++;</span><br><span class="line">            cnt *=<span class="number">10</span>;</span><br><span class="line">            start *=<span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        start += (n<span class="number">-1</span>)/len;</span><br><span class="line">        <span class="comment">// 答案在這數字裡</span></span><br><span class="line">        string t = <span class="built_in">to_string</span>(start);</span><br><span class="line">        <span class="keyword">return</span> t[(n<span class="number">-1</span>)%len]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>401. Binary Watch</title>
    <url>/blog/2023/02/12/leetcode/401_BinaryWatch/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-watch/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            n &amp;= (n<span class="number">-1</span>);</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="type">int</span> turnedOn)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">0</span>;h&lt;<span class="number">12</span>;++h)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">0</span>;m&lt;<span class="number">60</span> ;++m)&#123;</span><br><span class="line">                <span class="type">int</span> account = (h&lt;&lt;<span class="number">6</span>)+m;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">count</span>(account) == turnedOn)&#123;</span><br><span class="line">                    string cand  = <span class="built_in">to_string</span>(h);</span><br><span class="line">                    <span class="keyword">if</span>(m&lt;<span class="number">10</span>) cand +=<span class="string">&quot;:0&quot;</span>;</span><br><span class="line">                    <span class="keyword">else</span> cand += <span class="string">&quot;:&quot;</span>;</span><br><span class="line">                    cand += <span class="built_in">to_string</span>(m);</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(cand);           </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(60*12)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>402. Remove K Digits</title>
    <url>/blog/2023/02/12/leetcode/402_RemoveKDigits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-k-digits/">problem</a></h2><p>給定一個以字串表示的非負數箒數num，移除這個數中的k位數字，使得剩下的數字最小。</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>因為越前面位數越大，所以要先被移除，維護一個monotonic stack(從stack頂部遞減)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeKdigits</span><span class="params">(string num, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> n = num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(k &amp;&amp; !sta.<span class="built_in">empty</span>() &amp;&amp; num[i]-<span class="string">&#x27;0&#x27;</span> &lt; sta.<span class="built_in">top</span>()-<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            sta.<span class="built_in">push</span>(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            k--;</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            ret = sta.<span class="built_in">top</span>()+ret;</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m = ret.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m &amp;&amp; ret[i]==<span class="string">&#x27;0&#x27;</span>) i++;</span><br><span class="line">        string ans = ret.<span class="built_in">substr</span>(i, m-i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans==<span class="string">&quot;&quot;</span>?<span class="string">&quot;0&quot;</span>:ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-string-without-stack"><a href="#option-2-string-without-stack" class="headerlink" title="option 2 - string without stack"></a>option 2 - string without stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeKdigits</span><span class="params">(string num, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// monotonic stack</span></span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> cur:num)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!ret.<span class="built_in">empty</span>() &amp;&amp; k &amp;&amp; cur &lt; ret.<span class="built_in">back</span>() )&#123;</span><br><span class="line">                k--;</span><br><span class="line">                ret.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(k--) ret.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="comment">// remove zero leading</span></span><br><span class="line">        <span class="keyword">while</span>(!ret.<span class="built_in">empty</span>() &amp;&amp; ret[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) ret.<span class="built_in">erase</span>(ret.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">return</span> ret.<span class="built_in">empty</span>() ? <span class="string">&quot;0&quot;</span> :ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> stack</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>monotonic stack</tag>
      </tags>
  </entry>
  <entry>
    <title>409. Longest Palindrome</title>
    <url>/blog/2023/02/12/leetcode/409_LongestPalindrome/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-palindrome/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不用在意順序</span></span><br><span class="line">        <span class="comment">// 統計個字母出現次數 , 2n+1, 2n 都可以是回文</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">128</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s) vec[c]++;</span><br><span class="line">        <span class="type">int</span> one = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:vec)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a&amp;<span class="number">1</span>) one++;</span><br><span class="line">            ret+=a/<span class="number">2</span>*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(one&gt;<span class="number">0</span>) ret++;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-set"><a href="#option-2-set" class="headerlink" title="option 2 - set"></a>option 2 - set</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">count</span>(c))&#123;</span><br><span class="line">                st.<span class="built_in">erase</span>(c);</span><br><span class="line">                ret+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">insert</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">size</span>()&gt;=<span class="number">1</span>) <span class="keyword">return</span> ret+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>40. Combination Sum II</title>
    <url>/blog/2023/02/12/leetcode/40_CombinationSumII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/combination-sum-ii/">problem</a></h2><p>找出所有組合總和為target 的子序列，每個元素只能取一次，每組組合必須唯一。</p>
<h2 id="sloution"><a href="#sloution" class="headerlink" title="sloution"></a>sloution</h2><p><code>if(i&gt;l &amp;&amp; candidates[i-1]==candidates[i]) continue;</code> skip depulicate</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> l, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;candidates.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="comment">// avoid duplicate</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;l &amp;&amp; candidates[i<span class="number">-1</span>]==candidates[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &lt; candidates[i]) <span class="keyword">return</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(candidates, target - candidates[i], i+<span class="number">1</span>, path, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">backtracking</span>(candidates, target, <span class="number">0</span>, path, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(len(nums)^M)</code>, M if theight of our recursive</li>
<li>space complexity <code>L</code> , L is the longest combination</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>413. Arithmetic Slices</title>
    <url>/blog/2023/02/12/leetcode/413_ArithmeticSlices/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/arithmetic-slices/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   2   3   4</span></span><br><span class="line">        <span class="comment">//  0   0   1   3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   3   5   7   9   </span></span><br><span class="line">        <span class="comment">//  0   0   1   3   6 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   2   3   8   9   10</span></span><br><span class="line">        <span class="comment">//  0   0   1   0   0   1</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// sort(nums.begin(), nums.end());</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 從第三個元素開始</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> diff = nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>];</span><br><span class="line">            <span class="keyword">if</span>(diff == nums[i] - nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret+=dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>414. Third Maximum Number</title>
    <url>/blog/2023/02/12/leetcode/414_ThirdMaximumNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-heap"><a href="#option-1-heap" class="headerlink" title="option 1 - heap"></a>option 1 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">thirdMax</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n :nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(n)==s.<span class="built_in">end</span>()) pq.<span class="built_in">push</span>(n);</span><br><span class="line">            s.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &lt;<span class="number">3</span>) <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-Math"><a href="#option-2-Math" class="headerlink" title="option 2 - Math"></a>option 2 - Math</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">thirdMax</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> first = <span class="number">0</span>, second = <span class="number">0</span>, third = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> max_1 =INT_MIN, max_2 =LONG_MIN, max_3 = LONG_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==max_1 || n==max_2 || n== max_3) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(n&gt;max_1)&#123;</span><br><span class="line">                max_3 = max_2;</span><br><span class="line">                max_2 = max_1;</span><br><span class="line">                max_1 = n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;max_2) &#123;</span><br><span class="line">                max_3 = max_2 ;</span><br><span class="line">                max_2 = n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n&gt;max_3)&#123;</span><br><span class="line">                max_3 = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max_3==LONG_MIN?max_1:max_3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>415. Add Strings</title>
    <url>/blog/2023/02/12/leetcode/415_AddStrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/add-strings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addStrings</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= num1.<span class="built_in">size</span>(), m = num2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">max</span>(n,m);</span><br><span class="line">        string zero ;</span><br><span class="line">        zero.<span class="built_in">append</span>(len-<span class="built_in">min</span>(n,m),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(len!=n) num1 = zero + num1;</span><br><span class="line">        <span class="keyword">if</span>(len!=m) num2 = zero + num2;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="type">int</span> sum = (num1[i]-<span class="string">&#x27;0&#x27;</span>) + (num2[i]-<span class="string">&#x27;0&#x27;</span>) + carry;</span><br><span class="line">            ret += <span class="built_in">to_string</span>(sum%<span class="number">10</span>);</span><br><span class="line">            carry = sum/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry) ret +=<span class="built_in">to_string</span>(carry);</span><br><span class="line">        <span class="built_in">reverse</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>416. Partition Equal Subset Sum</title>
    <url>/blog/2023/02/12/leetcode/416_PartitionEqualSubsetSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/partition-equal-subset-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> sum ,<span class="type">int</span> cur, <span class="type">int</span> target, <span class="type">int</span> k )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; target) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">traverse</span>(nums, <span class="number">0</span>,<span class="number">0</span>, target, k);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=cur;i&lt;nums.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">traverse</span>(nums, sum+nums[i], i+<span class="number">1</span>, target, k)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) total+=n;</span><br><span class="line">        <span class="keyword">if</span>(total%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;total;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(nums, <span class="number">0</span>, <span class="number">0</span>, total/<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) total+=n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(total%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        total/=<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// vector&lt;bool&gt; dp(total/2,0);</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(total+<span class="number">1</span>,<span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//  t   f   f   f   f   f   f   f   f   f   f   f</span></span><br><span class="line">        <span class="comment">//1 t   t   f   f   f   f   f   f   f   f   f   f   </span></span><br><span class="line">        <span class="comment">//5 t   t   f   f   f   t   t   f   f   f   f   f</span></span><br><span class="line">        <span class="comment">//11t   t   f   f   f   t   t   f   f   f   f   t</span></span><br><span class="line">        <span class="comment">//5 t   t   f   f   f   t   t   f   f   f   t   t</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;i++) dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;total+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= nums[i<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j] | dp[i<span class="number">-1</span>][j-nums[i<span class="number">-1</span>]];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="comment">// cout&lt;&lt;dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-reduce-dp"><a href="#option-3-reduce-dp" class="headerlink" title="option 3 - reduce dp"></a>option 3 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) total+=n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(total%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        total/=<span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(total+<span class="number">1</span>,<span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5   6   7   8   9   10  11</span></span><br><span class="line">        <span class="comment">//  t   f   f   f   f   f   f   f   f   f   f   f</span></span><br><span class="line">        <span class="comment">//1 t   t   f   f   f   f   f   f   f   f   f   f   </span></span><br><span class="line">        <span class="comment">//5 t   t   f   f   f   t   t   f   f   f   f   f</span></span><br><span class="line">        <span class="comment">//11t   t   f   f   f   t   t   f   f   f   f   t</span></span><br><span class="line">        <span class="comment">//5 t   t   f   f   f   t   t   f   f   f   t   t</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5</span></span><br><span class="line">        <span class="comment">//  t   f   f   f   f   f   </span></span><br><span class="line">        <span class="comment">//1 t   t</span></span><br><span class="line">        <span class="comment">//2 t</span></span><br><span class="line">        <span class="comment">//5 t</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = total;j&gt;<span class="number">-1</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=nums[i<span class="number">-1</span>]) dp[j] = dp[j] | dp[j-nums[i<span class="number">-1</span>]];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>41. First Missing Positive</title>
    <url>/blog/2023/02/12/leetcode/41_FirstMissingPositive/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-cheat"><a href="#option-1-cheat" class="headerlink" title="option 1 - cheat"></a>option 1 - cheat</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==cur) cur++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="number">0</span>) pq.<span class="built_in">push</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> t = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; t==pq.<span class="built_in">top</span>()) pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(ret==t) ret++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-histogram-or-hash-table"><a href="#option-3-histogram-or-hash-table" class="headerlink" title="option 3 - histogram or hash table"></a>option 3 - histogram or hash table</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vec</span><span class="params">(n+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= <span class="number">0</span> &amp;&amp; nums[i]&lt;=n) vec[nums[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[i] == <span class="literal">false</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-4-swap"><a href="#option-4-swap" class="headerlink" title="option 4 - swap"></a>option 4 - swap</h4><p>不斷地交換，直到放到對的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[i]&gt;=<span class="number">1</span> &amp;&amp; nums[i]&lt;=n &amp;&amp; nums[i]!= nums[nums[i]<span class="number">-1</span>]) <span class="built_in">swap</span>(nums[i], nums[nums[i]<span class="number">-1</span>]) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n ;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=i+<span class="number">1</span>) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(k)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 4<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>heap</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>429. N-ary Tree Level Order Traversal</title>
    <url>/blog/2023/02/12/leetcode/429_N-aryTreeLevelOrderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(Node* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; level;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size; ++i)&#123;</span><br><span class="line">                Node *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                level.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">                <span class="keyword">for</span>(Node *n:p-&gt;children) q.<span class="built_in">push</span>(n);</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(level);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>42. Trapping Rain Water</title>
    <url>/blog/2023/02/12/leetcode/42_TrappingRainWater/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/trapping-rain-water/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="optino-1-dp"><a href="#optino-1-dp" class="headerlink" title="optino 1 - dp"></a>optino 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n,<span class="number">0</span>)</span>, <span class="title">right</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">//      0   1   0   2   1   0   1   3   2   1   2   1</span></span><br><span class="line">        <span class="comment">//left  0   1   1   2   2   2   2   3   3   3   3   3</span></span><br><span class="line">        <span class="comment">//right 3   3   3   3   3   3   3   3   2   2   2   1</span></span><br><span class="line">        <span class="comment">//ret               1   1   2   1           1       </span></span><br><span class="line">        </span><br><span class="line">        left[<span class="number">0</span>] = height[<span class="number">0</span>], right[n<span class="number">-1</span>] = height[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;n;++i) left[i] = <span class="built_in">max</span>(left[i<span class="number">-1</span>], height[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;--i) right[i] = <span class="built_in">max</span>(right[i+<span class="number">1</span>], height[i]);</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            ret+= <span class="built_in">min</span>(left[i], right[i]) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>can reduce space complexity <code>O(1)</code></li>
</ul>
<p>s</p>
<h4 id="option-2-monotoic-stack"><a href="#option-2-monotoic-stack" class="headerlink" title="option 2 - monotoic stack"></a>option 2 - monotoic stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp;  height[sta.<span class="built_in">top</span>()] &lt; height[i])&#123;</span><br><span class="line">                <span class="type">int</span> t = sta.<span class="built_in">top</span>(); <span class="comment">// 坑的底 </span></span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) <span class="keyword">break</span>; <span class="comment">// 不夠形成坑</span></span><br><span class="line">                <span class="keyword">else</span> ret += (<span class="built_in">min</span>(height[sta.<span class="built_in">top</span>()], height[i]) - height[t]) * (i-sta.<span class="built_in">top</span>()<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sta.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>monotonic stack</tag>
      </tags>
  </entry>
  <entry>
    <title>430. Flatten a Multilevel Doubly Linked List</title>
    <url>/blog/2023/02/12/leetcode/430_FlattenaMultilevelDoublyLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* prev;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* child;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">flatten</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        stack&lt;Node *&gt; sta;</span><br><span class="line">        Node *p = head;</span><br><span class="line">        <span class="comment">// iterative</span></span><br><span class="line">        <span class="comment">//flatten linked list</span></span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next || p-&gt;child)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;child)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(p-&gt;next);</span><br><span class="line">                p-&gt;next = p-&gt;child;</span><br><span class="line">                p-&gt;child = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            Node *next = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            p-&gt;next = next;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next) p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        p=head;</span><br><span class="line">        <span class="comment">// build bi-direct connection</span></span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">            p-&gt;next-&gt;prev = p;</span><br><span class="line">            </span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>435. Non-overlapping Intervals</title>
    <url>/blog/2023/02/12/leetcode/435_Non-overlappingIntervals/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/non-overlapping-intervals/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>]&lt;b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>, n = intervals.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; &amp; cur = intervals[i];</span><br><span class="line">            <span class="comment">// 不重疊，注意這裡等於算不同區間</span></span><br><span class="line">            <span class="keyword">if</span>(end&lt;=cur[<span class="number">0</span>])&#123;</span><br><span class="line">                end = cur[<span class="number">1</span>];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>437. Path Sum III</title>
    <url>/blog/2023/02/12/leetcode/437_PathSumIII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/path-sum-iii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">traverse</span><span class="params">(TreeNode * root, <span class="type">long</span> targetSum)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        targetSum -= root-&gt;val;</span><br><span class="line">        inlongt ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(targetSum==<span class="number">0</span>) ret++;</span><br><span class="line">        ret+=<span class="built_in">traverse</span>(root-&gt;left, targetSum)+<span class="built_in">traverse</span>(root-&gt;right, targetSum);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 路徑包含當下的節點</span></span><br><span class="line">        <span class="type">long</span> ret = <span class="built_in">traverse</span>(root, targetSum);</span><br><span class="line">        </span><br><span class="line">        ret += <span class="built_in">pathSum</span>(root-&gt;left, targetSum);</span><br><span class="line">        ret += <span class="built_in">pathSum</span>(root-&gt;right, targetSum);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>438. Find All Anagrams in a String</title>
    <url>/blog/2023/02/12/leetcode/438_FindAllAnagramsinaString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>當 window、need 兩個窗口一樣時，且兩個索引等於p字串的長度，此時可以確保s[l:r] 子字串等於字串p</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r=<span class="number">0</span>, n=s.<span class="built_in">size</span>(), valid = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:p) need[c]++;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">char</span> c =s[r++];</span><br><span class="line">            <span class="keyword">if</span>(need.<span class="built_in">find</span>(c)!=need.<span class="built_in">end</span>())&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(window[c] == need[c]) valid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(valid == need.<span class="built_in">size</span>())&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(r-l == p.<span class="built_in">size</span>()) ret.<span class="built_in">push_back</span>(l);</span><br><span class="line">                <span class="type">char</span> d = s[l++];</span><br><span class="line">                <span class="keyword">if</span>(need.<span class="built_in">find</span>(d)!=need.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(need[d] == window[d]) valid--;</span><br><span class="line">                    window[d]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以用固定大小的vector 代替hash table</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">need</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span>, <span class="title">window</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span>, ret</span>;</span><br><span class="line">        <span class="type">int</span> m =p.<span class="built_in">size</span>(), n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:p) need[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            window[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=m) window[s[i-m]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(need == window) ret.<span class="built_in">push_back</span>(i-m+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>43. Multiply Strings</title>
    <url>/blog/2023/02/12/leetcode/43_MultiplyStrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/multiply-strings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= num1.<span class="built_in">size</span>(), m = num2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n+m,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j= m<span class="number">-1</span>;j&gt;<span class="number">-1</span>;j--)&#123;</span><br><span class="line">                <span class="type">int</span> p1 = i+j, p2 = i+j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> mul = ret[p2];</span><br><span class="line">                mul += (num1[i]-<span class="string">&#x27;0&#x27;</span>)*(num2[j]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                ret[p1] += mul/<span class="number">10</span>;</span><br><span class="line">                ret[p2] = mul%<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;ret.<span class="built_in">size</span>() &amp;&amp; ret[i]==<span class="number">0</span> ) i++;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;ret.<span class="built_in">size</span>()) ans+=<span class="built_in">to_string</span>(ret[i++]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans==<span class="string">&quot;&quot;</span>?<span class="string">&quot;0&quot;</span>:ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(n+m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>448. Find All Numbers Disappeared in an Array</title>
    <url>/blog/2023/02/12/leetcode/448_FindAllNumbersDisappearedinanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 4,3,2,7,8,2,3,1</span></span><br><span class="line">        <span class="comment">// 1,2,2,2,3,4,7,8</span></span><br><span class="line">        <span class="comment">// -4, -3, -2, -7, 8, 2, -3, -1</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> idx = <span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[idx]&gt;<span class="number">0</span>) nums[idx] *= (<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) ret.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>450. Delete Node in a BST</title>
    <url>/blog/2023/02/12/leetcode/450_DeleteNodeinaBST/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/delete-node-in-a-bst/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode * <span class="title">findNext</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(root-&gt;left) root=root-&gt;left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deleteNode</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(key == root-&gt;val)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 找繼承者</span></span><br><span class="line">            <span class="keyword">if</span>(!root-&gt;right &amp;&amp; !root-&gt;left) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;right) <span class="keyword">return</span> root-&gt;left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;left) <span class="keyword">return</span> root-&gt;right;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                TreeNode * next = <span class="built_in">findNext</span>(root-&gt;right);</span><br><span class="line">                root-&gt;val = next-&gt;val;</span><br><span class="line">                root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, root-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往左子樹尋找</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &lt; root-&gt;val) root-&gt;left = <span class="built_in">deleteNode</span>(root-&gt;left, key);</span><br><span class="line">        <span class="comment">// 往右子樹尋找</span></span><br><span class="line">        <span class="keyword">else</span> root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>452. Minimum Number of Arrows to Burst Balloons</title>
    <url>/blog/2023/02/12/leetcode/452_MinimumNumberofArrowstoBurstBalloons/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMinArrowShots</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">           <span class="keyword">return</span> a[<span class="number">1</span>]&lt;b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>(), count = <span class="number">1</span>, end = points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt;&amp; cur = points[i];</span><br><span class="line">            <span class="comment">// 區間邊界觸碰也算重疊</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 不重疊狀況</span></span><br><span class="line">            <span class="keyword">if</span>(end &lt; cur[<span class="number">0</span>])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                end = cur[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>454. 4Sum II</title>
    <url>/blog/2023/02/12/leetcode/454_4SumII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/4sum-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用hash table 紀錄前兩陣列總和與及次數。再去拜訪後兩陣列尋找相反數是否存在hash table。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">        <span class="type">int</span> a= nums1.<span class="built_in">size</span>(), b = nums2.<span class="built_in">size</span>(), c= nums3.<span class="built_in">size</span>(),d = nums4.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;b;++j)&#123;</span><br><span class="line">                mp[nums1[i] + nums2[j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;d;++j)&#123;</span><br><span class="line">                <span class="type">int</span> target = - (nums3[i] + nums4[j]);</span><br><span class="line">                ret+=mp[target];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>45. Jump Game II</title>
    <url>/blog/2023/02/12/leetcode/45_JumpGameII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  2   3   1   1   4</span></span><br><span class="line">        <span class="comment">//      1   1   </span></span><br><span class="line">        <span class="comment">//      1   1   2   2</span></span><br><span class="line">        <span class="comment">//      1   1   2</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">dp</span>(n,INT_MAX);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=i+nums[i] &amp;&amp; j&lt;n; ++j)&#123;</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[i]+<span class="number">1</span>,  dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> min(a,b) (a&lt;b)?a:b</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> *dp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*numsSize);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;++i) *(dp+i) = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  2   3   1   1   4</span></span><br><span class="line">    <span class="comment">//  0   1   1   +   +</span></span><br><span class="line">    <span class="comment">//  0   1   1      </span></span><br><span class="line">    *dp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;=i+*(nums+i) &amp;&amp; j&lt;numsSize ;j++)&#123;</span><br><span class="line">            *(dp+j) = min(<span class="number">1</span>+*(dp+i), *(dp+j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> *(dp+numsSize<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-greedy"><a href="#option-2-greedy" class="headerlink" title="option 2 - greedy"></a>option 2 - greedy</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lastReach = <span class="number">0</span>;</span><br><span class="line">	    <span class="type">int</span> reach = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=reach &amp;&amp; i&lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;lastReach)&#123;</span><br><span class="line">                <span class="comment">// update;</span></span><br><span class="line">                step++;</span><br><span class="line">                lastReach = reach;</span><br><span class="line">            &#125;</span><br><span class="line">            reach = <span class="built_in">max</span>(reach, nums[i]+i);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(reach &lt;n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>463. Island Perimeter</title>
    <url>/blog/2023/02/12/leetcode/463_IslandPerimeter/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/island-perimeter/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">islandPerimeter</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> perimeter = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 假設每個方塊周長為4，如果相鄰有其他方塊則減一</span></span><br><span class="line">                <span class="type">int</span> count =<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; grid[i<span class="number">-1</span>][j] ==<span class="number">1</span> ) count--;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; grid[i][j<span class="number">-1</span>] ==<span class="number">1</span> ) count--;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n &amp;&amp; grid[i+<span class="number">1</span>][j] ==<span class="number">1</span> ) count--;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span>&lt;m &amp;&amp; grid[i][j+<span class="number">1</span>] ==<span class="number">1</span> ) count--;</span><br><span class="line">                perimeter+=count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> perimeter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>46. Permutations</title>
    <url>/blog/2023/02/12/leetcode/46_Permutations/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/permutations/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><p><code>if(find(path.begin(), path.end(), nums[i])!=path.end()) continue;</code> 可以用一組陣列代替<code>if(visited[i] = true) conitnue;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp;path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>(), nums[i])!=path.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, vector&lt;<span class="type">int</span>&gt; &amp; path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(nums, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt; (nums.<span class="built_in">size</span>(), <span class="literal">false</span>) ;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, path);</span><br><span class="line">        <span class="keyword">return</span> ret;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-math"><a href="#option-2-math" class="headerlink" title="option 2 - math"></a>option 2 - math</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; ret, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(nums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;nums.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[s]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, ret, s+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[s]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="built_in">traverse</span>(nums,ret, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> n 節點個數</li>
<li>space complexity <code>O(n)</code> n 節點個數</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>47. Permutations II</title>
    <url>/blog/2023/02/12/leetcode/47_PermutationsII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/permutations-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, vector&lt;<span class="type">int</span>&gt; &amp;path, vector&lt;<span class="type">bool</span>&gt; &amp; visited)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件，抵達樹的葉子部分</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            <span class="comment">// avoid duplicates</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; visited[i - <span class="number">1</span>] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, visited);</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">// avoid duplicates</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, visited);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n!)</code> n indices</li>
<li>space complexity <code>O(n!)</code> n indices</li>
</ul>
<h4 id="option-2-set"><a href="#option-2-set" class="headerlink" title="option 2 - set"></a>option 2 - set</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt; &amp; path, set&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; ret, vector&lt;<span class="type">bool</span>&gt; visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">insert</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, ret, visited);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        set&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, ret, visited);</span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>485. Max Consecutive Ones</title>
    <url>/blog/2023/02/12/leetcode/485_MaxConsecutiveOnes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/max-consecutive-ones/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>) count++;</span><br><span class="line">            <span class="keyword">else</span> &#123;ret=  <span class="built_in">max</span>(ret, count); count= <span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(ret, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>48. Rotate Image</title>
    <url>/blog/2023/02/12/leetcode/48_RotateImage/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rotate-image/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><p>先對陣列以行為單位做<code>reverse</code>，再逐一對角線對調。反之亦然</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">        a = a^b;</span><br><span class="line">        b = a^b;</span><br><span class="line">        a = a^b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span> , r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) <span class="built_in">swap</span>(nums[l++], nums[r--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先對角線對調，在每列reverse</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   2   3</span></span><br><span class="line">        <span class="comment">//  4   5   6</span></span><br><span class="line">        <span class="comment">//  7   8   9</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   4   7</span></span><br><span class="line">        <span class="comment">//  2   5   8</span></span><br><span class="line">        <span class="comment">//  3   6   9</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  7   4   1</span></span><br><span class="line">        <span class="comment">//  8   5   2</span></span><br><span class="line">        <span class="comment">//  9   8   7</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(matrix[i][j], matrix[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">reverse</span>(matrix[i]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n<span class="number">-1</span>-i;++j)&#123;</span><br><span class="line">                <span class="type">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[n - <span class="number">1</span> - j][i];</span><br><span class="line">                matrix[n - <span class="number">1</span> - j][i] = matrix[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j];</span><br><span class="line">                matrix[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j] = matrix[j][n - <span class="number">1</span> - i];</span><br><span class="line">                matrix[j][n - <span class="number">1</span> - i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>494. Target Sum</title>
    <url>/blog/2023/02/12/leetcode/494_TargetSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>backtracking<blockquote>
<p><code>O(2^N)</code> time </p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i,string  path, <span class="type">int</span> sum, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == target) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i+<span class="number">1</span>, path+<span class="string">&quot;+&quot;</span>+<span class="built_in">to_string</span>(nums[i]), sum+nums[i], target);</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i+<span class="number">1</span>, path+<span class="string">&quot;-&quot;</span>+<span class="built_in">to_string</span>(nums[i]), sum-nums[i], target);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>, path,<span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ret.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1-backtracking"><a href="#option-1-backtracking" class="headerlink" title="option 1 - backtracking"></a>option 1 - backtracking</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret =<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> sum, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == target) ret++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i+<span class="number">1</span>, sum+nums[i], target);</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, i+<span class="number">1</span>,  sum-nums[i], target);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>,<span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-memo-pattern"><a href="#option-2-memo-pattern" class="headerlink" title="option 2 - memo pattern"></a>option 2 - memo pattern</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt;  memo;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> sum, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == target)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string key = <span class="built_in">to_string</span>(i)+ <span class="string">&quot;,&quot;</span> + <span class="built_in">to_string</span>(sum);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(memo.<span class="built_in">find</span>(key)!=memo.<span class="built_in">end</span>()) <span class="keyword">return</span> memo[key];</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        val+=<span class="built_in">backtracking</span>(nums, i+<span class="number">1</span>,  sum+nums[i], target);</span><br><span class="line">        val+=<span class="built_in">backtracking</span>(nums, i+<span class="number">1</span>,  sum-nums[i], target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[key] = val;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">backtracking</span>(nums, <span class="number">0</span>,<span class="number">0</span>, target);        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>496. Next Greater Element I</title>
    <url>/blog/2023/02/12/leetcode/496_NextGreaterElementI/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/next-greater-element-i/submissions/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-brute-force"><a href="#option-1-brute-force" class="headerlink" title="option 1 - brute force"></a>option 1 - brute force</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// option 1 brute force</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums1)&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>, next = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(nums2[i]!=n) i++;</span><br><span class="line">            <span class="keyword">for</span>(i =i+<span class="number">1</span> ;i&lt;nums2.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums2[i]&gt;n)&#123;</span><br><span class="line">                    next = nums2[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>hash table</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(), m= nums2.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i) mp[nums2[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> start = mp[nums1[i]], temp=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=start+<span class="number">1</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums2[j]&gt;nums1[i])&#123;</span><br><span class="line">                    temp = nums2[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-monotonic-stack"><a href="#option-2-monotonic-stack" class="headerlink" title="option 2 - monotonic stack"></a>option 2 - monotonic stack</h4></li>
<li><p>維護一個單調遞增stack(從stack.top()看起)</p>
</li>
<li><p>需要一個hash table 存取 <code>nums2</code> 各元素及對應索引</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; monoSta;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; index;</span><br><span class="line">        <span class="type">int</span> n = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            index[nums2[i]] = i;</span><br><span class="line">            <span class="keyword">while</span>(!monoSta.<span class="built_in">empty</span>() &amp;&amp; monoSta.<span class="built_in">top</span>() &lt;= nums2[i]  )&#123;</span><br><span class="line">                monoSta.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(monoSta.<span class="built_in">empty</span>()) ret[i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> ret[i] = monoSta.<span class="built_in">top</span>();</span><br><span class="line">            monoSta.<span class="built_in">push</span>(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> q:nums1)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(ret[index[q]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<ul>
<li>other version<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; monoSta;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; index;</span><br><span class="line">        <span class="type">int</span> n = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            index[nums2[i]] = i;</span><br><span class="line">            <span class="keyword">while</span>(!monoSta.<span class="built_in">empty</span>() &amp;&amp; nums2[monoSta.<span class="built_in">top</span>()] &lt; nums2[i])&#123;</span><br><span class="line">                ret[monoSta.<span class="built_in">top</span>()] = nums2[i];</span><br><span class="line">                monoSta.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            monoSta.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> q:nums1)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(ret[index[q]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="anaysis"><a href="#anaysis" class="headerlink" title="anaysis"></a>anaysis</h2></li>
<li>option 1<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>monotonic stack</tag>
      </tags>
  </entry>
  <entry>
    <title>49. Group Anagrams</title>
    <url>/blog/2023/02/12/leetcode/49_GroupAnagrams/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/group-anagrams/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><p>用hash table 存下已出現的字串(排序過)及index</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ret;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">for</span>(string str:strs)&#123;</span><br><span class="line">            string cur = str;</span><br><span class="line">            <span class="built_in">sort</span>(cur.<span class="built_in">begin</span>(), cur.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(cur)!=mp.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="type">int</span> ind = mp[cur];</span><br><span class="line">                ret[ind].<span class="built_in">push_back</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mp[cur] = ret.<span class="built_in">size</span>();</span><br><span class="line">                ret.<span class="built_in">push_back</span>(&#123;str&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h5><p>用字元加上出現次數編碼後當作hash table的key，放進hash table<br>例如：”eat” 編碼後 “a1e1t1”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(string str:strs)&#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            string t ;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c:str) vec[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(vec[i]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                t +=<span class="built_in">string</span>(<span class="number">1</span>,i+<span class="string">&#x27;a&#x27;</span>) + <span class="built_in">to_string</span>(vec[i]);</span><br><span class="line">                <span class="comment">// 按順序拜訪a-z，所以不同排列順序的字串會在hash table會有相同的key</span></span><br><span class="line">            &#125;</span><br><span class="line">            mp[t].<span class="built_in">push_back</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a:mp) ret.<span class="built_in">push_back</span>(a.second);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n*mlogm)</code> , m is the maximum of string</li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>4. Median of Two Sorted Arrays</title>
    <url>/blog/2023/02/12/leetcode/4_MedianofTwoSortedArrays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-cheat-merge-sort"><a href="#option-1-cheat-merge-sort" class="headerlink" title="option 1 - cheat merge sort"></a>option 1 - cheat merge sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(), m = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n+m,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[l] &lt; nums2[r]) ret[i++] = nums1[l++];</span><br><span class="line">            <span class="keyword">else</span> ret[i++] = nums2[r++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n) ret[i++] = nums1[l++];</span><br><span class="line">        <span class="keyword">while</span>(r&lt;m) ret[i++] = nums2[r++];</span><br><span class="line">        <span class="keyword">if</span>((n+m)%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> ret[(n+m)/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">return</span> (<span class="type">double</span>)(ret[(n+m)/<span class="number">2</span>]+ret[(n+m)/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2.0</span>;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - *Binary Search"></a>option 2 - *Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(),  m = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len = n+m;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m) <span class="keyword">return</span> <span class="built_in">findMedianSortedArrays</span>(nums2, nums1);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> (nums2[(m<span class="number">-1</span>)/<span class="number">2</span>] + nums2[m/<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="comment">// i 指向nums1 中間的索引，j 指向nums2 中間的索引</span></span><br><span class="line">            <span class="type">int</span> i = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> j = len/<span class="number">2</span>-i;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 設定搜尋區間</span></span><br><span class="line">            <span class="type">int</span> L1 = (i==<span class="number">0</span>)?INT_MIN:nums1[i<span class="number">-1</span>];</span><br><span class="line">            <span class="type">int</span> R1 = (i==n)?INT_MAX:nums1[i];</span><br><span class="line">            <span class="type">int</span> L2 = (j==<span class="number">0</span>)?INT_MIN:nums2[j<span class="number">-1</span>];</span><br><span class="line">            <span class="type">int</span> R2 = (j==m)?INT_MAX:nums2[j];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(L1 &gt; R2) r = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(L2 &gt; R1) l = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">min</span>(R1, R2);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">return</span> (<span class="built_in">max</span>(L1, L2) + <span class="built_in">min</span>(R1, R2)) / <span class="number">2.0</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(n+m)</code></li>
<li>space complexity <code>O(n+m)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(log(m+n))</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>501. Find Mode in Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/501_FindModeinBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-two-pass"><a href="#option-1-two-pass" class="headerlink" title="option 1 - two pass"></a>option 1 - two pass</h4><p>用array 隨著inorder拜訪樹的每個節點並存下來。便是遞增陣列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode *root, vector&lt;<span class="type">int</span>&gt;&amp; ret )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="comment">// 1. inorder traverse tree and save each node into array</span></span><br><span class="line">        <span class="built_in">inorder</span>(root, ret);</span><br><span class="line">        <span class="comment">// 2. 統計個數字與其頻率</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:ret) freq[a]++;</span><br><span class="line">        <span class="comment">// 3. select freqency of mode in array</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, vote = <span class="number">1</span>, n=ret.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ret[i] == ret[i<span class="number">-1</span>])&#123;</span><br><span class="line">                vote++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="built_in">max</span>(vote, count);</span><br><span class="line">                vote = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="built_in">max</span>(vote, count);</span><br><span class="line">        <span class="comment">// 4. collect mode </span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> f:freq)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.second == count) ans.<span class="built_in">push_back</span>(f.first);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-one-pass"><a href="#option-2-one-pass" class="headerlink" title="option 2 - one pass"></a>option 2 - one pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">    <span class="type">int</span> curCount = <span class="number">0</span>, maxCount = <span class="number">0</span>;</span><br><span class="line">    TreeNode * prev = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// process</span></span><br><span class="line">        <span class="keyword">if</span>(prev == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            curCount = <span class="number">1</span>;</span><br><span class="line">            maxCount = <span class="number">1</span>;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            prev = root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;val == prev-&gt;val)&#123;</span><br><span class="line">                curCount++;</span><br><span class="line">                <span class="keyword">if</span>(curCount == maxCount)&#123;</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(curCount &gt; maxCount)&#123;</span><br><span class="line">                    arr.<span class="built_in">clear</span>();</span><br><span class="line">                    maxCount = curCount;</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 當拜訪到與先前不同數值的節點</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                maxCount = <span class="built_in">max</span>(curCount, maxCount);</span><br><span class="line">                curCount =<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(curCount == maxCount)&#123;</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = root;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">inorder</span>(root);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>503. Next Greater Element II</title>
    <url>/blog/2023/02/12/leetcode/503_NextGreaterElementII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/next-greater-element-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt;sta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n*<span class="number">2</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; nums[sta.<span class="built_in">top</span>()%n] &lt;  nums[i%n])&#123;</span><br><span class="line">                <span class="type">int</span> t =sta.<span class="built_in">top</span>();</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                ret[t%n] = nums[i%n];</span><br><span class="line">            &#125;</span><br><span class="line">            sta.<span class="built_in">push</span>(i% n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r:ret) cout&lt;&lt;r&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>monotonic stack</tag>
      </tags>
  </entry>
  <entry>
    <title>508. Most Frequent Subtree Sum</title>
    <url>/blog/2023/02/12/leetcode/508_MostFrequentSubtreeSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/most-frequent-subtree-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; memo;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) root-&gt;val += root-&gt;left-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) root-&gt;val += root-&gt;right-&gt;val;</span><br><span class="line">        memo[root-&gt;val]++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findFrequentTreeSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">postorder</span>(root);</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; freq;</span><br><span class="line">        <span class="type">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:memo)&#123;</span><br><span class="line">            maxFreq = <span class="built_in">max</span>(maxFreq, m.second);</span><br><span class="line">            freq.<span class="built_in">push_back</span>(&#123;m.first, m.second&#125;);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">sort</span>(freq.<span class="built_in">begin</span>(), freq.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span> &amp;a, <span class="type">const</span> <span class="keyword">auto</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.second&gt;b.second;</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> f:freq)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.second ==maxFreq) ans.<span class="built_in">push_back</span>(f.first);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-optimization-option-1"><a href="#option-2-optimization-option-1" class="headerlink" title="option 2 - optimization option 1"></a>option 2 - optimization option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; memo;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="type">int</span> maxFreq;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) root-&gt;val += root-&gt;left-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) root-&gt;val += root-&gt;right-&gt;val;</span><br><span class="line">        memo[root-&gt;val]++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(memo[root-&gt;val] &gt;= maxFreq)&#123;</span><br><span class="line">            <span class="keyword">if</span>(memo[root-&gt;val] &gt; maxFreq) ans.<span class="built_in">clear</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            maxFreq = memo[root-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findFrequentTreeSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        maxFreq = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">postorder</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>509. Fibonacci Number</title>
    <url>/blog/2023/02/12/leetcode/509_FibonacciNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/fibonacci-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-1-1-memo-pattern"><a href="#option-1-1-memo-pattern" class="headerlink" title="option 1.1 memo pattern"></a>option 1.1 memo pattern</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">find</span>(n)!=ans.<span class="built_in">end</span>()) <span class="keyword">return</span> ans[n];</span><br><span class="line">        ans[n] = <span class="built_in">fib</span>(n<span class="number">-1</span>) + <span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span> ans[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;++i) dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-reduce-dp"><a href="#option-3-reduce-dp" class="headerlink" title="option 3 - reduce dp"></a>option 3 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> a= <span class="number">0</span>, b=<span class="number">1</span>, c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            c = a+b;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li><p>option 1 </p>
<ul>
<li>time complexity <code>O(2^n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li><p>option 2</p>
<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li><p>option 3</p>
<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>50. Pow(x, n)</title>
    <url>/blog/2023/02/12/leetcode/50_Pow(x,n)/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/powx-n/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-recursive"><a href="#option-1-recursive" class="headerlink" title="option 1 - recursive"></a>option 1 - recursive</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span> || x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">pow</span>(x,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// avoid overflow</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>/(x*<span class="built_in">myPow</span>(x,-(n+<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// avoid time limit</span></span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> x*<span class="built_in">myPow</span>(x,n<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">double</span> half = <span class="built_in">myPow</span>(x,n/<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> half*half;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-iterative"><a href="#option-2-iterative" class="headerlink" title="option 2 - iterative"></a>option 2 - iterative</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span> || n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> ret= <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i!=<span class="number">0</span>;i/=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) ret*= x;</span><br><span class="line">            x*=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n&lt;<span class="number">0</span>?<span class="number">1</span>/ret:ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>515. Find Largest Value in Each Tree Row</title>
    <url>/blog/2023/02/12/leetcode/515_FindLargestValueinEachTreeRow/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-largest-value-in-each-tree-row/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bfs </span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> mx = q.<span class="built_in">front</span>()-&gt;val;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                mx = <span class="built_in">max</span>(mx, p-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(mx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>516. Longest Palindromic Subsequence</title>
    <url>/blog/2023/02/12/leetcode/516_LongestPalindromicSubsequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-palindromic-subsequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//  b   b   b   a   b</span></span><br><span class="line">        <span class="comment">//b 1   2   3   3   4</span></span><br><span class="line">        <span class="comment">//b     1   2   2   3</span></span><br><span class="line">        <span class="comment">//b         1   1   3</span></span><br><span class="line">        <span class="comment">//a             1   1</span></span><br><span class="line">        <span class="comment">//b                 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) dp[i][i] =<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span> ; j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j]) dp[i][j] = <span class="number">2</span>+dp[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="comment">// deleting some or no elements</span></span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i+<span class="number">1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>].<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce dp</li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>518. Coin Change 2</title>
    <url>/blog/2023/02/12/leetcode/518_CoinChange2/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/coin-change-2/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 有多少種方法(硬幣組合)可以兌換 amount元</span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5</span></span><br><span class="line">        <span class="comment">//  0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//1 1   1   1   1   1   1</span></span><br><span class="line">        <span class="comment">//2 1   1   2   2   3   3</span></span><br><span class="line">        <span class="comment">//5 1   1   2   2   3   4</span></span><br><span class="line">        <span class="type">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i) dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;amount+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coins[i<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j - coins[i<span class="number">-1</span>]] ;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="comment">// cout&lt;&lt;dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 有多少種方法(硬幣組合)可以兌換 amount元</span></span><br><span class="line">        <span class="comment">//  0   1   2   3   4   5</span></span><br><span class="line">        <span class="comment">//  0   0   0   0   0   0</span></span><br><span class="line">        <span class="comment">//1 1   1   1   1   1   1</span></span><br><span class="line">        <span class="comment">//2 1   1   2   2   3   3</span></span><br><span class="line">        <span class="comment">//5 1   1   2   2   3   4</span></span><br><span class="line">        <span class="type">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;amount+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= coins[i<span class="number">-1</span>]) dp[j] += dp[j-coins[i<span class="number">-1</span>]];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>51. N-Queens</title>
    <url>/blog/2023/02/12/leetcode/51_N-Queens/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/n-queens/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(vector&lt;string&gt;&amp; board, <span class="type">int</span> r, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 檢查所在行列是否有其他皇后</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][c] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[r][i] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左上角</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r<span class="number">-1</span>,j=c<span class="number">-1</span>;i&gt;<span class="number">-1</span> &amp;&amp; j&gt;<span class="number">-1</span> ;i--,j-- )&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右上角 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r<span class="number">-1</span>, j = c+<span class="number">1</span>;i&gt;<span class="number">-1</span> &amp;&amp; j&lt;board.<span class="built_in">size</span>() ; i--,j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;string&gt; &amp; board, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(r==board.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(board);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board[<span class="number">0</span>].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isValid</span>(board, r,i)) <span class="keyword">continue</span>;</span><br><span class="line">            board[r][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="comment">// 因為每列只會有一個皇后，所以放置完後處理下一列</span></span><br><span class="line">            <span class="built_in">backtracking</span>(board, r+<span class="number">1</span>);</span><br><span class="line">            board[r][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">board</span><span class="params">(n, string(n,<span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(board, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>52. N-Queens II</title>
    <url>/blog/2023/02/12/leetcode/52_N-QueensII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/n-queens-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(vector&lt;string&gt;&amp; board, <span class="type">int</span> r, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 檢查所在行列是否有其他皇后</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][c] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(board[r][i] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左上角</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r<span class="number">-1</span>,j=c<span class="number">-1</span>;i&gt;<span class="number">-1</span> &amp;&amp; j&gt;<span class="number">-1</span> ;i--,j-- )&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右上角 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r<span class="number">-1</span>, j = c+<span class="number">1</span>;i&gt;<span class="number">-1</span> &amp;&amp; j&lt;board.<span class="built_in">size</span>() ; i--,j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;string&gt;&amp; board, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r==board.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isValid</span>(board, r, i) == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line">            board[r][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="built_in">backtracking</span>(board, r+<span class="number">1</span>);</span><br><span class="line">            board[r][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">board</span><span class="params">(n, string(n,<span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(board, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>530. Minimum Absolute Difference in BST</title>
    <url>/blog/2023/02/12/leetcode/530_MinimumAbsoluteDifferenceinBST/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode *root, vector&lt;<span class="type">int</span>&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">inorder</span>(root, ret);</span><br><span class="line">        <span class="comment">// ret is increasing array</span></span><br><span class="line">        <span class="type">int</span> ans = ret[<span class="number">1</span>] - ret[<span class="number">0</span>], n= ret.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, ret[i] - ret[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><p>需要多一個節點或是int大小空間紀錄上一次拜訪到的節點</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode *root, TreeNode* &amp; prev, <span class="type">int</span> &amp;diff)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, prev, diff);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最小值位置</span></span><br><span class="line">        <span class="keyword">if</span>(prev == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            prev = root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            diff = <span class="built_in">min</span>(root-&gt;val - prev-&gt;val, diff);</span><br><span class="line">            <span class="comment">// 拜訪完，要更新prev</span></span><br><span class="line">            prev = root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right,prev,  diff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> diff = INT_MAX;</span><br><span class="line">        <span class="comment">// pre 存取上一個拜訪的節點</span></span><br><span class="line">        TreeNode *pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root,pre,  diff);</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>535. Encode and Decode TinyURL</title>
    <url>/blog/2023/02/12/leetcode/535_EncodeandDecodeTinyURL/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/encode-and-decode-tinyurl/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;string, string&gt; short2long, long2short;</span><br><span class="line">    string dict;</span><br><span class="line">    string BASE = <span class="string">&quot;http://tinyurl.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Solution</span>() &#123;</span><br><span class="line">        dict = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">        short2long.<span class="built_in">clear</span>();</span><br><span class="line">        long2short.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Encodes a URL to a shortened URL.</span></span><br><span class="line">    <span class="function">string <span class="title">encode</span><span class="params">(string longUrl)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (long2short.<span class="built_in">count</span>(longUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> BASE + long2short[longUrl];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        string randStr;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) randStr.<span class="built_in">push_back</span>(dict[<span class="built_in">rand</span>() % <span class="number">62</span>]);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;randStr&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span> (short2long.<span class="built_in">count</span>(randStr)) &#123;</span><br><span class="line">            randStr[idx] = dict[<span class="built_in">rand</span>() % <span class="number">62</span>];</span><br><span class="line">            idx = (idx + <span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        short2long[randStr] = longUrl;</span><br><span class="line">        long2short[longUrl] = randStr;</span><br><span class="line">        <span class="keyword">return</span> BASE + randStr;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes a shortened URL to its original URL.</span></span><br><span class="line">    <span class="function">string <span class="title">decode</span><span class="params">(string shortUrl)</span> </span>&#123;</span><br><span class="line">        string randStr = shortUrl.<span class="built_in">substr</span>(shortUrl.<span class="built_in">find_last_of</span>(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> short2long.<span class="built_in">count</span>(randStr) ? short2long[randStr] : shortUrl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Solution solution;</span></span><br><span class="line"><span class="comment">// solution.decode(solution.encode(url));</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>538. Convert BST to Greater Tree</title>
    <url>/blog/2023/02/12/leetcode/538_ConvertBSTtoGreaterTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, <span class="type">int</span> &amp;val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, val);</span><br><span class="line">        </span><br><span class="line">        val+=root-&gt;val;</span><br><span class="line">        root-&gt;val = val;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> cur =<span class="number">0</span>;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">convertBST</span>(root-&gt;right);</span><br><span class="line">        cur+=root-&gt;val;</span><br><span class="line">        root-&gt;val = cur;</span><br><span class="line">        <span class="built_in">convertBST</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>53. Maximum Subarray</title>
    <url>/blog/2023/02/12/leetcode/53_MaximumSubarray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-subarray/">problem</a></h2><p>給定一陣列，求出總和最大連續子陣列，並返回其值</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="option-1-Divide-and-Conquer"><a href="#option-1-Divide-and-Conquer" class="headerlink" title="option 1 - Divide and Conquer"></a>option 1 - Divide and Conquer</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Divide</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> nums[l];</span><br><span class="line">        <span class="type">int</span> mid = l+ (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> lmax = <span class="built_in">Divide</span>(nums, l, mid<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> rmax = <span class="built_in">Divide</span>(nums, mid+<span class="number">1</span>, r);</span><br><span class="line">        <span class="type">int</span> mmax = nums[mid];</span><br><span class="line">        <span class="type">int</span> temp = nums[mid];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid<span class="number">-1</span>;i&gt;=l;--i)&#123;</span><br><span class="line">            temp+=nums[i];</span><br><span class="line">            mmax = <span class="built_in">max</span>(temp, mmax);</span><br><span class="line">        &#125;</span><br><span class="line">        temp = mmax;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)&#123;</span><br><span class="line">            temp+=nums[i];</span><br><span class="line">            mmax = <span class="built_in">max</span>(temp, mmax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(lmax, rmax), mmax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Divide</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><p>維護一個dp 紀錄遍歷至當前的最大的子陣列和。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      -1  1   -3  4   -1  2   1   -5  4</span></span><br><span class="line">        <span class="comment">//dp    -1  1   -2  4   3   5   6   1   5</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ret = nums[<span class="number">0</span>];</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">dp</span>(n, INT_MIN);</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>]+ nums[i], nums[i]);</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Kadane’s-Algorithm"><a href="#option-3-Kadane’s-Algorithm" class="headerlink" title="option 3 - Kadane’s Algorithm"></a>option 3 - Kadane’s Algorithm</h4><p>reduce dp，用變數取代dp array</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> local = <span class="number">0</span>, global = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            local = <span class="built_in">max</span>(local+n, n);</span><br><span class="line">            global = <span class="built_in">max</span>(local, global);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> global;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Kadane&#39;s Algo</tag>
      </tags>
  </entry>
  <entry>
    <title>540. Single Element in a Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/540_SingleElementinaSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/single-element-in-a-sorted-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>cheat<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a:nums) ret^=a;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1-Binary-Search"><a href="#option-1-Binary-Search" class="headerlink" title="option 1 - Binary Search"></a>option 1 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNonDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 一定是奇數長度</span></span><br><span class="line">        <span class="comment">// 如果mid索引是偶數代表索引前面的數字應該都是兩兩一對，如果不是mid索引的值會與前一索引值相同，則落單的數必定在前面，反之相反。</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l +(r-l)/<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (( mid % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[mid] != nums[mid + <span class="number">1</span>]) || ( mid % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; nums[mid] == nums[mid + <span class="number">1</span>])) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNonDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span> , r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+ (r-l)/<span class="number">2</span>;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mid&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid <span class="number">-1</span>&gt;= <span class="number">0</span> &amp;&amp; mid +<span class="number">1</span> &lt;n &amp;&amp; nums[mid]!=nums[mid<span class="number">-1</span>] &amp;&amp; nums[mid]!=nums[mid+<span class="number">1</span>]) <span class="keyword">return</span> nums[mid];</span><br><span class="line">            <span class="keyword">if</span>((mid+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; nums[mid<span class="number">-1</span>] == nums[mid] ) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid+<span class="number">1</span> &lt;n &amp;&amp; (mid+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; nums[mid+<span class="number">1</span>] == nums[mid]) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>541. Reverse String II</title>
    <url>/blog/2023/02/12/leetcode/541_ReverseStringII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-string-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> l, <span class="type">int</span> r )</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) <span class="built_in">swap</span>(s[l++], s[r--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>() ; i+=<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(s, i, <span class="built_in">min</span>(i+k<span class="number">-1</span>, <span class="built_in">int</span>(s.<span class="built_in">size</span>()<span class="number">-1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>542. 01 Matrix</title>
    <url>/blog/2023/02/12/leetcode/542_01Matrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/01-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>bfs -&gt; time out<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="comment">// dfs seem not to work</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>(), m = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ret</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, INT_MAX));</span><br><span class="line">        </span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; d = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span>  j =<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// bfs can find the shortest path</span></span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;i,j&#125;);</span><br><span class="line">                    <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">                    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">                    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> _=<span class="number">0</span>;_&lt;size ; ++_)&#123;</span><br><span class="line">                            vector&lt;<span class="type">int</span>&gt; p = q.<span class="built_in">front</span>();</span><br><span class="line">                            q.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="type">int</span> x = p[<span class="number">0</span>],  y=p[<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&gt;m<span class="number">-1</span> || visited[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">                            visited[x][y] = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">if</span>(mat[x][y] ==<span class="number">1</span>) &#123;</span><br><span class="line">                                ret[x][y] = <span class="built_in">min</span>(ret[x][y], depth);</span><br><span class="line">                            &#125;</span><br><span class="line">                            q.<span class="built_in">push</span>(&#123;x<span class="number">-1</span>, y&#125;);</span><br><span class="line">                            q.<span class="built_in">push</span>(&#123;x+<span class="number">1</span>, y&#125;);</span><br><span class="line">                            q.<span class="built_in">push</span>(&#123;x, y<span class="number">-1</span>&#125;);</span><br><span class="line">                            q.<span class="built_in">push</span>(&#123;x, y+<span class="number">1</span>&#125;);</span><br><span class="line">                             </span><br><span class="line">                        &#125;</span><br><span class="line">                        depth++;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    ret[i][j] = <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><p>將 <code>mat[i][j]=1</code> 的地方先收集起來<br><code>ret[x][y] = 1 + ret[p[0]][p[1]];</code> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>() , m=mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret = mat;</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>) q.<span class="built_in">push</span>(&#123;i,j&#125;);</span><br><span class="line">                <span class="keyword">else</span> ret[i][j] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> d:dirs)&#123;              </span><br><span class="line">                <span class="type">int</span> x= p[<span class="number">0</span>]+d[<span class="number">0</span>], y = p[<span class="number">1</span>] +d[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&gt;m<span class="number">-1</span> || ret[x][y]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 記住父節點，並從他出發</span></span><br><span class="line">                ret[x][y] = <span class="number">1</span>+ ret[p[<span class="number">0</span>]][p[<span class="number">1</span>]];</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>543. Diameter of Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/543_DiameterofBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/diameter-of-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dfs </span></span><br><span class="line">        <span class="comment">// 最大直徑不一定會經過根節點</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> diameter = <span class="built_in">maxDepth</span>(root-&gt;left) + <span class="built_in">maxDepth</span>(root-&gt;right);</span><br><span class="line">        diameter = <span class="built_in">max</span>(diameter, <span class="built_in">max</span>(<span class="built_in">diameterOfBinaryTree</span>(root-&gt;left), <span class="built_in">diameterOfBinaryTree</span>(root-&gt;right)));</span><br><span class="line">        <span class="keyword">return</span> diameter;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">(TreeNode *root, <span class="type">int</span> &amp;ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">depth</span>(root-&gt;left, ret);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">depth</span>(root-&gt;right, ret);</span><br><span class="line">        ret = <span class="built_in">max</span>(r+l, ret);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">depth</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>547. Number of Provinces</title>
    <url>/blog/2023/02/12/leetcode/547_NumberofProvinces/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-provinces/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size, parent;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> cap)&#123;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cap, <span class="number">0</span>);</span><br><span class="line">        size = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cap, <span class="number">1</span>);</span><br><span class="line">        count = cap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cap;++i)&#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pRoot = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> qRoot = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">return</span> pRoot == qRoot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x!=parent[x])&#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pRoot = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> qRoot = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(pRoot == qRoot) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(size[pRoot] &gt;= size[qRoot])&#123;</span><br><span class="line">            size[pRoot] +=size[qRoot];</span><br><span class="line">            parent[qRoot] = parent[pRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            size[qRoot] +=size[pRoot];</span><br><span class="line">            parent[pRoot] = parent[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parent[i] == i) ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = isConnected.<span class="built_in">size</span>();</span><br><span class="line">        UnionFind *uf = <span class="keyword">new</span> <span class="built_in">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isConnected[i][j] == <span class="number">1</span>) uf-&gt;<span class="built_in">unionSet</span>(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> uf-&gt;<span class="built_in">getCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Uniod Find</tag>
      </tags>
  </entry>
  <entry>
    <title>54. Spiral Matrix</title>
    <url>/blog/2023/02/12/leetcode/54_SpiralMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/spiral-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>維護一組陣列，控制下一步要走的方向</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; d = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> n= matrix.<span class="built_in">size</span>(), m= matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(m*n,<span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j=<span class="number">-1</span>, a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> _ = <span class="number">0</span>;_&lt;n*m; ++_)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> x = i+d[a%<span class="number">4</span>], y = j+d[(a+<span class="number">1</span>)%<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">while</span>(x &lt; <span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&gt;m<span class="number">-1</span> || visited[x*m+y])&#123;</span><br><span class="line">                a++;</span><br><span class="line">                x = i+d[a%<span class="number">4</span>];</span><br><span class="line">                y = j+d[(a+<span class="number">1</span>)%<span class="number">4</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            visited[x*m+y] = <span class="literal">true</span>;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(matrix[x][y]);</span><br><span class="line">            i = x;</span><br><span class="line">            j = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>557. Reverse Words in a String III</title>
    <url>/blog/2023/02/12/leetcode/557_ReverseWordsinaStringIII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string &amp;s, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) <span class="built_in">swap</span>(s[l++], s[r--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            <span class="type">char</span> c =s[i];</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// reverse(s.begin()+pre, s.begin()+i);</span></span><br><span class="line">                <span class="built_in">reverse</span>(s, pre, i<span class="number">-1</span>);</span><br><span class="line">                pre = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// reverse(s.begin()+pre, s.end());</span></span><br><span class="line">        <span class="built_in">reverse</span>(s, pre, s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>559. Maximum Depth of N-ary Tree</title>
    <url>/blog/2023/02/12/leetcode/559_MaximumDepthofN-aryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dfs</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// for binary tree</span></span><br><span class="line">        <span class="comment">// return 1+max(maxDepth(root-&gt;left), maxDepth(root-&gt;right));</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// n-ary tree</span></span><br><span class="line">        <span class="type">int</span> depth=<span class="number">1</span>, mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Node *t:root-&gt;children)&#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, <span class="built_in">maxDepth</span>(t));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">queue&lt;Node*&gt; <span class="title">q</span><span class="params">(&#123;root&#125;)</span></span>;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                Node *  p =q.<span class="built_in">front</span>(); </span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(Node *t:p-&gt;children) q.<span class="built_in">push</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>55. Jump Game</title>
    <url>/blog/2023/02/12/leetcode/55_JumpGame/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/jump-game/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>dp 維護的是剩餘跳力，剩餘跳力是前一個位置的剩餘跳力 -1<code>dp[i-1]-1的</code>，或是前一個位置的最大跳力-1 <code>nums[i-1]-1</code> 取最大。如果當前剩餘跳力等於零，代表停在於此，小於零代表跳不到這裏。</p>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      2   3   1   1   4</span></span><br><span class="line">        <span class="comment">//dp    0   1   2   1   0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      3   2   1   0   4</span></span><br><span class="line">        <span class="comment">//dp    0   2   1   0   -1</span></span><br><span class="line">        <span class="type">int</span> n =nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>]<span class="number">-1</span>, nums[i<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(dp[i]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 reduce dp"></a>option 2 reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      2   3   1   1   4</span></span><br><span class="line">        <span class="comment">//dp    0   1   2   1   0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      3   2   1   0   4</span></span><br><span class="line">        <span class="comment">//dp    0   2   1   0   -1</span></span><br><span class="line">        <span class="type">int</span> n =nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> canReach = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            canReach = <span class="built_in">max</span>(canReach<span class="number">-1</span>, nums[i<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(canReach&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>greedy<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> canReach = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(canReach&lt;i) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            canReach = <span class="built_in">max</span>(canReach, i+nums[i]);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>option 1 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>560. Subarray sum equals k</title>
    <url>/blog/2023/02/12/leetcode/560_SubarrayEqualsK/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/subarray-sum-equals-k/">problem</a></h2><p>找出連續子陣列，其總和為k 的數量</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>hash table 統計連續子陣列總和及相應數量<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      1   1   1</span></span><br><span class="line">        <span class="comment">//sum   1   2   3</span></span><br><span class="line">        <span class="comment">// dict = &#123;&#123;0,1&#125;&#125;</span></span><br><span class="line">        <span class="comment">// i = 0, dict = &#123;&#123;0,1&#125;, &#123;1,1&#125;&#125;;</span></span><br><span class="line">        <span class="comment">// i = 1, dict = &#123;&#123;0,1&#125;,&#123;1,1&#125;,&#123;2,1&#125;&#125;;</span></span><br><span class="line">        <span class="comment">// i = 2, dict = &#123;&#123;0,1&#125;,&#123;1,1&#125;,&#123;2,1&#125;, &#123;3,1&#125;&#125;;</span></span><br><span class="line">        <span class="comment">// hash table 代表子陣列總和與其次數</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, n = nums.<span class="built_in">size</span>(), sum=<span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; sub;</span><br><span class="line">        sub[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sub.<span class="built_in">find</span>(sum-k)!=sub.<span class="built_in">end</span>()) count+=sub[sum-k];</span><br><span class="line">            sub[sum]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analyze"><a href="#analyze" class="headerlink" title="analyze"></a>analyze</h2></li>
<li>time complexity <code>O(n)</code> </li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Prefix Sum</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>565. Array Nesting</title>
    <url>/blog/2023/02/12/leetcode/565_ArrayNesting/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/array-nesting/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>detect cycle</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arrayNesting</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> size = <span class="number">0</span>, j = i;</span><br><span class="line">            <span class="keyword">while</span>( visited[j] == <span class="literal">false</span>)&#123;</span><br><span class="line">                visited[j] = <span class="literal">true</span>;</span><br><span class="line">                j = nums[j];</span><br><span class="line">                size++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-constant-space"><a href="#option-2-constant-space" class="headerlink" title="option 2 - constant space"></a>option 2 - constant space</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arrayNesting</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> size = <span class="number">0</span>, j = i;</span><br><span class="line">            <span class="keyword">while</span>( nums[j] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span> idx = nums[j];</span><br><span class="line">                nums[j] = <span class="number">-1</span>;</span><br><span class="line">                j = idx;</span><br><span class="line">                size++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>566. Reshape the Matrix</title>
    <url>/blog/2023/02/12/leetcode/566_ReshapetheMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reshape-the-matrix/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrixReshape</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> r, <span class="type">int</span> c) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ret</span>(r, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(c,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span>(r*c!=mat.<span class="built_in">size</span>()*mat[<span class="number">0</span>].<span class="built_in">size</span>()) <span class="keyword">return</span> mat;</span><br><span class="line">        <span class="type">int</span> k =<span class="number">0</span>, n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;c;++j)&#123;</span><br><span class="line">                k = i*c+j;</span><br><span class="line">                ret[i][j] = mat[k/n][k%n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>easy understand<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrixReshape</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> r, <span class="type">int</span> c) &#123;</span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>(), m = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n*m != r*c) <span class="keyword">return</span> mat;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ret</span>(r, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(c,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> k =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;r;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;c;++j)&#123;</span><br><span class="line">                ret[i][j] = mat[k/m][k%m];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>567. Permutation in String</title>
    <url>/blog/2023/02/12/leetcode/567_PermutationinString/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/permutation-in-string/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>需要兩個hash table紀錄(因順序不重要)，一個紀錄需要match的字串，另一個hash table搭配雙指標(l, r)，並將l與r之間的字元放進，當兩個hash table一樣是，則代表如果 s1 的排列之一是 s2 的子字串</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s1) need[c]++;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>,r=<span class="number">0</span>, n=s2.<span class="built_in">size</span>(), valid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">char</span> c = s2[r++];</span><br><span class="line">            <span class="keyword">if</span>(need.<span class="built_in">find</span>(c)!=need.<span class="built_in">end</span>())&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(window[c] == need[c]) valid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(valid == need.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="keyword">if</span>(r-l == s1.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">char</span> d = s2[l++];</span><br><span class="line">                <span class="keyword">if</span>(need.<span class="built_in">find</span>(d)!=need.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(window[d] == need[d] ) valid--;</span><br><span class="line">                    window[d]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以用固定大小的vector 代替hash table</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">need</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span>, <span class="title">window</span><span class="params">(<span class="number">26</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s1) need[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="type">int</span> n =s1.<span class="built_in">size</span>(), m = s2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            window[s2[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=n) window[s2[i-n]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(window==need) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>56. Merge Intervals</title>
    <url>/blog/2023/02/12/leetcode/56_MergeIntervals/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-intervals/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        <span class="comment">// 先排序，再觀察規律</span></span><br><span class="line">        <span class="comment">// 按區間的start 升序排序 </span></span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = intervals.<span class="built_in">size</span>(), start =intervals[<span class="number">0</span>][<span class="number">0</span>], end= intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        ret.<span class="built_in">push_back</span>(&#123;start, end&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt;&amp;  cur = intervals[i];</span><br><span class="line">            <span class="comment">// 找到有區間有重疊，並更新最大的end</span></span><br><span class="line">            <span class="keyword">if</span>(ret.<span class="built_in">back</span>()[<span class="number">1</span>] &gt;= cur[<span class="number">0</span>])&#123;</span><br><span class="line">                ret.<span class="built_in">back</span>()[<span class="number">1</span>] =<span class="built_in">max</span>( cur[<span class="number">1</span>], ret.<span class="built_in">back</span>()[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 處理下一個區間</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Interval</tag>
      </tags>
  </entry>
  <entry>
    <title>572. Subtree of Another Tree</title>
    <url>/blog/2023/02/12/leetcode/572_SubtreeofAnotherTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/subtree-of-another-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><ul>
<li>遍歷每個節點，並比較當前節點與<code>subRoot</code> 是否為同一棵樹，如果是<code>return true</code>，反之拜訪當前節點的左右子樹，是否與<code>subRoot</code> 同一棵樹，依此類推，直到遇到空節點<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode *root, TreeNode *sub)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root &amp;&amp; !sub) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root || !sub) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == sub-&gt;val) <span class="keyword">return</span> <span class="built_in">isSameTree</span>(root-&gt;left, sub-&gt;left) &amp;&amp; <span class="built_in">isSameTree</span>(root-&gt;right, sub-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root &amp;&amp; !subRoot) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root || !subRoot) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isSameTree</span>(root, subRoot)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSubtree</span>(root-&gt;left, subRoot) || <span class="built_in">isSubtree</span>(root-&gt;right, subRoot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSame</span><span class="params">(TreeNode *a, TreeNode *b)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!a &amp;&amp; !b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!a || !b) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(a-&gt;val != b-&gt;val ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">isSame</span>(a-&gt;left, b-&gt;left) &amp;&amp; <span class="built_in">isSame</span>(a-&gt;right, b-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root &amp;&amp; !subRoot) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root || !subRoot) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == subRoot-&gt;val) ret =  <span class="built_in">isSame</span>(root, subRoot);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSubtree</span>(root-&gt;left, subRoot ) || <span class="built_in">isSubtree</span>(root-&gt;right, subRoot) || ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4>將兩棵樹的每個葉子的left child 補上 “#”，並將樹的節點用字串方式相連接，問題就變成字串是否有在另一字串裡。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode * root, string &amp;ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            ret.<span class="built_in">append</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// inorder traverse</span></span><br><span class="line">        ret.<span class="built_in">append</span>(<span class="string">&quot;,&quot;</span>+<span class="built_in">to_string</span>(root-&gt;val));</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, ret);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, ret);      </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        string str1, str2;</span><br><span class="line">        <span class="built_in">traverse</span>(root, str1);</span><br><span class="line">        <span class="built_in">traverse</span>(subRoot, str2);</span><br><span class="line">        <span class="comment">//  string::npos;  表示字串結束位置</span></span><br><span class="line">        <span class="keyword">return</span> str1.<span class="built_in">find</span>(str2)!= string::npos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(s*t)</code> , for each node of <code>s</code>, check if it’s subtree eaquals <code>t</code></li>
<li>space complexity <code>O(m)</code> m is height of tree for worst case, <code>O(logm)</code> for average case</li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>57. Insert Interval</title>
    <url>/blog/2023/02/12/leetcode/57_InsertInterval/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/insert-interval/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>類似<code>56. Merge Intervals</code>，先將<code>newInterval</code> 加進 <code>intervals</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">insert</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals, vector&lt;<span class="type">int</span>&gt;&amp; newInterval) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        intervals.<span class="built_in">push_back</span>(newInterval);</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>] ) <span class="keyword">return</span> a[<span class="number">1</span>]&gt;b[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> n = intervals.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> start = intervals[<span class="number">0</span>][<span class="number">0</span>], end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        ret.<span class="built_in">push_back</span>(&#123;start, end&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt;&amp; cur = intervals[i];</span><br><span class="line">            <span class="comment">// overlap</span></span><br><span class="line">            <span class="keyword">if</span>(end &gt;= cur[<span class="number">0</span>])&#123;</span><br><span class="line">                end = <span class="built_in">max</span>(end, cur[<span class="number">1</span>]);</span><br><span class="line">                ret.<span class="built_in">back</span>()[<span class="number">1</span>] = end;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                start = cur[<span class="number">0</span>];</span><br><span class="line">                end = cur[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Interval</tag>
      </tags>
  </entry>
  <entry>
    <title>581. Shortest Unsorted Continuous Subarray</title>
    <url>/blog/2023/02/12/leetcode/581_ShortestUnsortedContinuousSubarray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/shortest-unsorted-continuous-subarray/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-0-Insert-sort"><a href="#option-0-Insert-sort" class="headerlink" title="option 0 - Insert sort"></a>option 0 - Insert sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找尋最短子陣列，將子陣列經過升序排序，可以使得整個陣列呈現升序排列。</span></span><br><span class="line">        <span class="comment">//      2   6   4   8   10  9   15</span></span><br><span class="line">        <span class="comment">// 插入排序法</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, n = nums.<span class="built_in">size</span>(), start = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> key = nums[i];</span><br><span class="line">                <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (j &gt; <span class="number">-1</span> &amp;&amp; nums[j] &gt; key)</span><br><span class="line">                &#123;</span><br><span class="line">                    nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                nums[j + <span class="number">1</span>] = key;</span><br><span class="line">                j++;</span><br><span class="line">                start = <span class="built_in">min</span>(start,j);</span><br><span class="line">                ret = i - start + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找尋最短子陣列，將子陣列經過升序排序，可以使得整個陣列呈現升序排列。</span></span><br><span class="line">        <span class="comment">//  2   6   4   8   10  9   15</span></span><br><span class="line">        <span class="comment">//  2   4   6   8   9   10  15</span></span><br><span class="line">        <span class="comment">//      i               j</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec = nums;</span><br><span class="line">        <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=n<span class="number">-1</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k =<span class="number">0</span>;k&lt;n;++k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[k] !=vec[k])&#123;</span><br><span class="line">                i=<span class="built_in">min</span>(i, k);</span><br><span class="line">                j=<span class="built_in">max</span>(j,k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(j-i+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找尋最短子陣列，將子陣列經過升序排序，可以使得整個陣列呈現升序排列。</span></span><br><span class="line">        <span class="comment">//  2   6   4   8   10  9   15</span></span><br><span class="line">        <span class="comment">//  2   4   6   8   9   10  15</span></span><br><span class="line">        <span class="comment">//      i               j</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec = nums;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), i = <span class="number">0</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; nums[i] == vec[i]) i++;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;i &amp;&amp; nums[j] == vec[j]) j--;</span><br><span class="line">        <span class="keyword">return</span> j - i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-improve-option-1"><a href="#option-3-improve-option-1" class="headerlink" title="option 3 - improve option 1"></a>option 3 - improve option 1</h4><p>參考別人的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找尋最短子陣列，將子陣列經過升序排序，可以使得整個陣列呈現升序排列。</span></span><br><span class="line">        <span class="comment">//      2   6   4   8   10  9   15</span></span><br><span class="line">        <span class="comment">//mn    15  9   9   8   4   4   2</span></span><br><span class="line">        <span class="comment">//mx    2   6   6   8   10  10  15</span></span><br><span class="line">        <span class="comment">//end   -2  -2  2   2   2   5   5</span></span><br><span class="line">        <span class="comment">//start -1  4   4   4   1   1   1</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), start = <span class="number">-1</span>, end = <span class="number">-2</span>;</span><br><span class="line">        <span class="type">int</span> mn = nums[n - <span class="number">1</span>], mx = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, nums[i]);</span><br><span class="line">            mn = <span class="built_in">min</span>(mn, nums[n - <span class="number">1</span> - i]);</span><br><span class="line">            <span class="keyword">if</span> (mx &gt; nums[i]) end = i;</span><br><span class="line">            <span class="keyword">if</span> (mn &lt; nums[n - <span class="number">1</span> - i]) start = n - <span class="number">1</span> - i;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;mn&lt;&lt;&quot; &quot;&lt;&lt;mx&lt;&lt;&quot; &quot;&lt;&lt;end&lt;&lt;&quot; &quot;&lt;&lt;start&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end - start + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n*n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>583. Delete Operation for Two Strings</title>
    <url>/blog/2023/02/12/leetcode/583_DeleteOperationforTwoStrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/delete-operation-for-two-strings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      e   a   t</span></span><br><span class="line">        <span class="comment">//  0   1   2   3</span></span><br><span class="line">        <span class="comment">//s 1   2   3   4</span></span><br><span class="line">        <span class="comment">//e 2   1   2   3</span></span><br><span class="line">        <span class="comment">//a 3   2   1   2</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = word1.<span class="built_in">size</span>(), m = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m+<span class="number">1</span>;++j) dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>] !=word2[j<span class="number">-1</span>]) dp[i][j] = <span class="built_in">min</span>( dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>] ) +<span class="number">1</span>; <span class="comment">// insert or delete</span></span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>589. N-ary Tree Preorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/589_N-aryTreePreorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/n-ary-tree-preorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(Node *root, vector&lt;<span class="type">int</span>&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Node *p : root-&gt;children)&#123;</span><br><span class="line">            <span class="built_in">preorder</span>(p, ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">preorder</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>58. Length of Last Word</title>
    <url>/blog/2023/02/12/leetcode/58_LengthofLastWord/</url>
    <content><![CDATA[<h2 id="prolem"><a href="#prolem" class="headerlink" title="prolem"></a><a href="https://leetcode.com/problems/length-of-last-word/">prolem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l =<span class="number">-1</span> , r = s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &gt;l &amp;&amp; s[r]==<span class="string">&#x27; &#x27;</span>) r--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=r;  ++i)&#123;    </span><br><span class="line">            <span class="keyword">if</span>(s[i] ==<span class="string">&#x27; &#x27;</span>) l = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">-1</span>) <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r-l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r= s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;<span class="number">-1</span> &amp;&amp; s[r]==<span class="string">&#x27; &#x27;</span>) r--;</span><br><span class="line">        <span class="keyword">if</span>(r==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>) <span class="keyword">return</span> r-i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>590. N-ary Tree Postorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/590_N-aryTreePostorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/n-ary-tree-postorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(Node *root, vector&lt;<span class="type">int</span>&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Node *p : root-&gt;children)&#123;</span><br><span class="line">            <span class="built_in">postorder</span>(p, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">postorder</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>59. Spiral Matrix II</title>
    <url>/blog/2023/02/12/leetcode/59_SpiralMatrixII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/spiral-matrix-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>維護一組陣列，控制下一步要走的方向</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ret</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n*n,<span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j=<span class="number">-1</span>, t =<span class="number">1</span>, k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(t&lt;=n*n)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> x = i+a[k%<span class="number">4</span>] ,  y = j+a[(k+<span class="number">1</span>)%<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">while</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&gt;n<span class="number">-1</span> || visited[x*n+y])&#123;</span><br><span class="line">                k++;</span><br><span class="line">                x = i+a[k%<span class="number">4</span>] ,  y = j+a[(k+<span class="number">1</span>)%<span class="number">4</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            visited[x*n+y] = <span class="literal">true</span>;</span><br><span class="line">            ret[x][y] = t++;</span><br><span class="line">            i = x, j = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n^2)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>5. Longest Palindromic Substring</title>
    <url>/blog/2023/02/12/leetcode/5_LongestPalindromicSubstring/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/">problem</a></h2><p>最長回文子字串</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-two-pointers"><a href="#option-1-two-pointers" class="headerlink" title="option 1 - two pointers"></a>option 1 - two pointers</h4><p>Manacher’s algorithm is</p>
<ul>
<li>利用雙索引，從拜訪到的字元，當拜訪到字元，相鄰字元都一樣，則向左向右擴散<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>,r = <span class="number">0</span>, n =s.<span class="built_in">size</span>(),  start = <span class="number">0</span>, len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;)&#123;</span><br><span class="line">            l=r=i;</span><br><span class="line">            <span class="keyword">while</span>(r+<span class="number">1</span>&lt;n &amp;&amp; s[r] == s[r+<span class="number">1</span>]) r++;</span><br><span class="line">            i = r+<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(l&gt;<span class="number">0</span> &amp;&amp; r&lt;n<span class="number">-1</span> &amp;&amp; s[l<span class="number">-1</span>] == s[r+<span class="number">1</span>])&#123;</span><br><span class="line">                l--;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(r-l+<span class="number">1</span>&gt;len)&#123;</span><br><span class="line">                len = r-l+<span class="number">1</span>;</span><br><span class="line">                start = l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">longestPalindrome</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>, start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> size ;</span><br><span class="line">    <span class="keyword">for</span>(size =<span class="number">0</span>;s[size]!=<span class="string">&#x27;\0&#x27;</span>;size++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;)&#123;</span><br><span class="line">        <span class="type">int</span> l=i,r=i;</span><br><span class="line">        <span class="keyword">while</span>(r+<span class="number">1</span>&lt;size &amp;&amp; s[r+<span class="number">1</span>] == s[r]) r++;</span><br><span class="line">        i = r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l<span class="number">-1</span>&gt;<span class="number">-1</span> &amp;&amp; r+<span class="number">1</span>&lt;size &amp;&amp; s[l<span class="number">-1</span>] == s[r+<span class="number">1</span>])&#123;</span><br><span class="line">            l--;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r-l+<span class="number">1</span> &gt; len)&#123;</span><br><span class="line">            len = r-l+<span class="number">1</span>;</span><br><span class="line">            start = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *ret = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*(len+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;start+len;++i) ret[i-start] = s[i];</span><br><span class="line">    ret[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      b   a   b   a   d</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//b     1   0   3   0   0</span></span><br><span class="line">        <span class="comment">//a         1   0   3   0 </span></span><br><span class="line">        <span class="comment">//b             1   0   3</span></span><br><span class="line">        <span class="comment">//a                 1   0</span></span><br><span class="line">        <span class="comment">//d                     1</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, len =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) dp[i][i] =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span> ;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j] &amp;&amp; (j-i==<span class="number">1</span> || dp[i+<span class="number">1</span>][j<span class="number">-1</span>] &gt; <span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="comment">// ex: &quot;tt&quot; </span></span><br><span class="line">                    <span class="comment">// ex: babab , dp[i+1][j-1]確保 aba 是回文，才將i往左一格 j 往右一格 </span></span><br><span class="line">                    dp[i][j] = <span class="number">2</span>+dp[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(j-i+<span class="number">1</span>&gt;len)&#123;</span><br><span class="line">                        start = i;</span><br><span class="line">                        len = j-i+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Manacher’s-Algorithm-time-complexity-O-n"><a href="#option-3-Manacher’s-Algorithm-time-complexity-O-n" class="headerlink" title="option 3 - Manacher’s Algorithm time complexity O(n)"></a>option 3 - Manacher’s Algorithm time complexity <code>O(n)</code></h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - two pointers<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - dp<ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n^2)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>60. Permutation Sequence</title>
    <url>/blog/2023/02/12/leetcode/60_PermutationSequence/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/permutation-sequence/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先從右往左找到，非遞增的位置</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> j = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; nums[j<span class="number">-1</span>] &gt;= nums[j] ) j--;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pivot=j<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> bigger = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(bigger &gt; pivot &amp;&amp; nums[bigger] &lt;= nums[pivot]) bigger--;</span><br><span class="line">        <span class="built_in">swap</span>(nums[pivot], nums[bigger]);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+pivot+<span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">string <span class="title">getPermutation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="comment">// ans+=to_string(i);</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(--k) <span class="built_in">nextPermutation</span>(ans);</span><br><span class="line">        string str ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:ans) str+=<span class="built_in">to_string</span>(i);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-math"><a href="#option-2-math" class="headerlink" title="option 2 - *math"></a>option 2 - *math</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getPermutation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) nums.<span class="built_in">push_back</span>(i);</span><br><span class="line">        </span><br><span class="line">        k--;</span><br><span class="line">        <span class="type">int</span> mod = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mod = mod*i;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mod = mod/(n-i);</span><br><span class="line">            <span class="type">int</span> idx = k/mod;</span><br><span class="line">            k=k%mod;</span><br><span class="line">            ret+=<span class="built_in">to_string</span>(nums[idx]);</span><br><span class="line">            nums.<span class="built_in">erase</span>(nums.<span class="built_in">begin</span>()+idx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(kn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>611. Valid Triangle Number</title>
    <url>/blog/2023/02/12/leetcode/611_ValidTriangleNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-triangle-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">triangleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 遞增數列 a b c =&gt; 只需檢查a+b&gt;c即可</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span> ,n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">// 找到最後一個小於 nums[i] + nums[j]    </span></span><br><span class="line">                <span class="type">int</span> sum = nums[i] + nums[j];</span><br><span class="line">                <span class="type">int</span> l = j+<span class="number">1</span>, r = n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                    <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(nums[mid] &gt;= sum) r = mid <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ret+=r-j;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>617. Merge Two Binary Trees</title>
    <url>/blog/2023/02/12/leetcode/617_MergeTwoBinaryTrees/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root1 &amp;&amp; !root2) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root1 || !root2) <span class="keyword">return</span> root1?root1:root2;</span><br><span class="line">        TreeNode * root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        root-&gt;val +=root1-&gt;val;</span><br><span class="line">        root-&gt;val +=root2-&gt;val;</span><br><span class="line">        </span><br><span class="line">        root-&gt;left = <span class="built_in">mergeTrees</span>(root1-&gt;left, root2-&gt;left);</span><br><span class="line">        root-&gt;right = <span class="built_in">mergeTrees</span>(root1-&gt;right, root2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>61. Rotate List</title>
    <url>/blog/2023/02/12/leetcode/61_RotateList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rotate-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">(ListNode* node)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;node;node=node-&gt;next) size++;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next || k==<span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> size = <span class="built_in">getSize</span>(head);</span><br><span class="line">        <span class="type">int</span> n = size - k%size;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>(n--) p=p-&gt;next;</span><br><span class="line">        <span class="comment">// avoid 第一元素即為head</span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">nullptr</span>) p = head;</span><br><span class="line">        ListNode *newhead = p;</span><br><span class="line">        <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">            ret-&gt;next = p;</span><br><span class="line">            ret=ret-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next == <span class="literal">nullptr</span>) p=head;</span><br><span class="line">            <span class="keyword">else</span> p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ret-&gt;next= <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="option-2-cycle"><a href="#option-2-cycle" class="headerlink" title="option 2 - cycle"></a>option 2 - cycle</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span> || head-&gt;next==<span class="literal">nullptr</span> || k==<span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 串列長度</span></span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = head; <span class="comment">// 串列變成cycle</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;length of list: &quot;</span>&lt;&lt;len&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        ListNode * start = head;</span><br><span class="line">        <span class="comment">// 決定起點</span></span><br><span class="line">        <span class="type">int</span> n = len-k%len;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            start = start-&gt;next;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;start&#x27;s value: &quot;</span>&lt;&lt;start-&gt;val&lt;&lt;endl;</span><br><span class="line">        ListNode *res = start;</span><br><span class="line">        <span class="comment">//決定終點</span></span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">while</span>(len)&#123;</span><br><span class="line">            start = start-&gt;next;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        start-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>622. Design Circular Queue</title>
    <url>/blog/2023/02/12/leetcode/622_DesignCircularQueue/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-circular-queue/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>利用初始化陣列 <code>vector&lt;int&gt;(k,-1);</code>，如果數值是-1，代表該空間為空，可以assign</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> front , back, cap ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyCircularQueue</span>(<span class="type">int</span> k) &#123;</span><br><span class="line">        nums = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(k,<span class="number">-1</span>);</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        back = <span class="number">0</span>;</span><br><span class="line">        cap = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isFull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        nums[back] = value;</span><br><span class="line">        back = (back+<span class="number">1</span>)%cap;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        nums[front] = <span class="number">-1</span>;</span><br><span class="line">        front = (front+<span class="number">1</span>)%cap;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> nums[front];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> nums[(back<span class="number">-1</span>+cap)%cap];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[front] == <span class="number">-1</span> &amp;&amp; (back== front);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[back]!=<span class="number">-1</span> &amp;&amp; (back == front);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>62. Unique Paths</title>
    <url>/blog/2023/02/12/leetcode/62_UniquePaths/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/unique-paths/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   1   1   1   1   1   1   </span></span><br><span class="line">        <span class="comment">//  1   2   3   4   5   6   7   </span></span><br><span class="line">        <span class="comment">//  1   3   6   10  15  21  28</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  1   1   1   1   1   1   1   </span></span><br><span class="line">        <span class="comment">//  1   2   3   4   5   6   7   </span></span><br><span class="line">        <span class="comment">//  1   3   6   10  15  21  28</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">1</span>)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                dp[j] += dp[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> *dp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">    <span class="comment">//  0   1   1   1   1   1   1</span></span><br><span class="line">    <span class="comment">//  1   2   3   4   5   6   7   </span></span><br><span class="line">    <span class="comment">//  1   3   6   10  15  21  28</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) *(dp+j) = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>) *(dp+j) = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> *(dp+j) += *(dp+j<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *(dp+n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-use-math"><a href="#option-3-use-math" class="headerlink" title="option 3 use math"></a>option 3 use math</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> num = <span class="number">1</span>, denom = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> small = m &gt; n ? n : m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= small - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            num *=( m + n - <span class="number">1</span> - i);</span><br><span class="line">            denom *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)(num / denom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>637. Average of Levels in Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/637_AverageofLevelsinBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/average-of-levels-in-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="function">queue&lt;TreeNode *&gt; <span class="title">q</span><span class="params">(&#123;root&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">double</span> avg = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                avg+=p-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);                </span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(avg/size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>63. Unique Paths II</title>
    <url>/blog/2023/02/12/leetcode/63_UniquePathsII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/unique-paths-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n= obstacleGrid.<span class="built_in">size</span>(), m= obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  0   0   0       1   1   1   </span></span><br><span class="line">        <span class="comment">//  0   1   0       1   0   1</span></span><br><span class="line">        <span class="comment">//  0   0   0       1   1   2</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// obstacleGrid[i][j] = 0</span></span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>) dp[i][j] = dp[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid.<span class="built_in">empty</span>() || obstacleGrid[<span class="number">0</span>].<span class="built_in">empty</span>() || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid.<span class="built_in">size</span>(), m = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">1</span>) dp[j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;<span class="number">0</span>) dp[j]+= dp[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>641. Design Circular Deque</title>
    <url>/blog/2023/02/12/leetcode/641_DesignCircularDeque/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-circular-deque/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>be careful of pointer out of range<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularDeque</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> cap, front, back;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyCircularDeque</span>(<span class="type">int</span> k) &#123;</span><br><span class="line">        cap = k;</span><br><span class="line">        front = back = <span class="number">0</span>;</span><br><span class="line">        nums = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (k, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertFront</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isFull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        front = (front<span class="number">-1</span>+cap)%cap;</span><br><span class="line">        nums[front] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertLast</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isFull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        nums[back] = value;</span><br><span class="line">        back = (back+<span class="number">1</span>)%cap;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        nums[front] = <span class="number">-1</span>;</span><br><span class="line">        front = (front+<span class="number">1</span>)%cap;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        back = (back<span class="number">-1</span>+cap)%cap;</span><br><span class="line">        nums[back] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> nums[front];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> nums[(back<span class="number">-1</span>+cap)%cap];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[front]==<span class="number">-1</span> &amp;&amp; (back==front);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[front]!=<span class="number">-1</span> &amp;&amp; (back==front);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>645. Set Mismatch</title>
    <url>/blog/2023/02/12/leetcode/645_SetMismatch/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/set-mismatch/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>遍歷陣列，並將元素在陣列中的正確位置(idx)<ul>
<li>未拜訪的元素，取倒數</li>
<li>拜訪過的元素，則為重複出現的數字</li>
</ul>
</li>
<li>再次遍歷陣列，找出正數，即為遺失的數字<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findErrorNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> miss =<span class="number">0</span>, dup = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  1   2   2   4</span></span><br><span class="line">        <span class="comment">//  -1  -2  2   -4</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n ; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> idx = <span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[idx]&gt;<span class="number">0</span>) nums[idx]*=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> dup = <span class="built_in">abs</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) miss = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;dup, miss&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analyze"><a href="#analyze" class="headerlink" title="analyze"></a>analyze</h2></li>
<li>time complexity <code>O(n)</code> </li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>647. Palindromic Substrings</title>
    <url>/blog/2023/02/12/leetcode/647_PalindromicSubstrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/palindromic-substrings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  a   a   a</span></span><br><span class="line">        <span class="comment">//a 1   1   1</span></span><br><span class="line">        <span class="comment">//a     1   1</span></span><br><span class="line">        <span class="comment">//a         1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//  b   a   b   a   b</span></span><br><span class="line">        <span class="comment">//b 1   0   1   0   1        </span></span><br><span class="line">        <span class="comment">//a     1   0   1   0     </span></span><br><span class="line">        <span class="comment">//b         1   0   1</span></span><br><span class="line">        <span class="comment">//a             1   0   </span></span><br><span class="line">        <span class="comment">//b                 1</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n= s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        ret +=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;<span class="number">-1</span> ; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==i+<span class="number">1</span>) dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j<span class="number">-1</span>]) dp[i][j] =<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(dp[i][j]) ret++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>648. Replace Words</title>
    <url>/blog/2023/02/12/leetcode/648_ReplaceWords/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/replace-words/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TrieNode *children[<span class="number">26</span>];</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="built_in">TrieNode</span> ()&#123;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode* &amp;child:<span class="keyword">this</span>-&gt;children) child = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isWord = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span> ()&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord= <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">shortestPrefixOf</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">char</span> c = word[i];</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                ret+=<span class="built_in">string</span>(<span class="number">1</span>,c);</span><br><span class="line">                p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(p-&gt;isWord) <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string sentence)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n= sentence.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;string&gt; words ;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n &amp;&amp; sentence[j]==<span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=j;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sentence[i] ==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                words.<span class="built_in">push_back</span>(sentence.<span class="built_in">substr</span>(j, i-j));</span><br><span class="line">                j=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        words.<span class="built_in">push_back</span>(sentence.<span class="built_in">substr</span>(j, i-j));</span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">replaceWords</span><span class="params">(vector&lt;string&gt;&amp; dictionary, string sentence)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 將dictionary 放入Trie  </span></span><br><span class="line">        Trie *t = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(string s:dictionary)&#123;</span><br><span class="line">            t-&gt;<span class="built_in">insert</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; words = <span class="built_in">split</span>(sentence);</span><br><span class="line">        string ret ;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len; ++i)&#123;</span><br><span class="line">            string prefix = t-&gt;<span class="built_in">shortestPrefixOf</span>(words[i]);</span><br><span class="line">            <span class="keyword">if</span>(!prefix.<span class="built_in">empty</span>()) ret+=prefix;</span><br><span class="line">            <span class="keyword">else</span> ret+=words[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>) ret+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>64. Minimum Path Sum</title>
    <url>/blog/2023/02/12/leetcode/64_MinimumPathSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-path-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= grid.<span class="built_in">size</span>(),  m =grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp = grid;</span><br><span class="line">        <span class="comment">//  1   3   1       1   4   4</span></span><br><span class="line">        <span class="comment">//  1   5   1</span></span><br><span class="line">        <span class="comment">//  4   2   1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt; m ; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>) dp[i][j]+=dp[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) dp[i][j]+=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] += <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= grid.<span class="built_in">size</span>(),  m =grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(m,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//  1   3   1       1   4   4</span></span><br><span class="line">        <span class="comment">//  1   5   1       </span></span><br><span class="line">        <span class="comment">//  4   2   1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt; m ; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) dp[j] = grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>) dp[j] = grid[i][j] + dp[j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) dp[j] += grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> dp[j] = <span class="built_in">min</span>(dp[j], dp[j<span class="number">-1</span>])+ grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-dp"><a href="#option-3-dp" class="headerlink" title="option 3 - dp"></a>option 3 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= grid.<span class="built_in">size</span>(),  m =grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//  1   3   1       1   4   4</span></span><br><span class="line">        <span class="comment">//  1   5   1       </span></span><br><span class="line">        <span class="comment">//  4   2   1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt; m ; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>) grid[i][j] += grid[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) grid[i][j] += grid[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> grid[i][j] += <span class="built_in">min</span>(grid[i<span class="number">-1</span>][j], grid[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code> <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>652. Find Duplicate Subtrees</title>
    <url>/blog/2023/02/12/leetcode/652_FindDuplicateSubtrees/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-duplicate-subtrees/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; memo;</span><br><span class="line">    <span class="function">string <span class="title">checkDuplicate</span><span class="params">(TreeNode * root, vector&lt;TreeNode*&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        string cur ;</span><br><span class="line">        cur += <span class="built_in">checkDuplicate</span>(root-&gt;left, ret) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        cur += <span class="built_in">checkDuplicate</span>(root-&gt;right, ret) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        cur+= <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(memo.<span class="built_in">find</span>(cur)!=memo.<span class="built_in">end</span>() &amp;&amp; memo[cur] ==<span class="number">1</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(root);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        memo[cur]++;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;TreeNode*&gt;  ret;</span><br><span class="line">        <span class="built_in">checkDuplicate</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>653. Two Sum IV - Input is a BST</title>
    <url>/blog/2023/02/12/leetcode/653_TwoSumIV-InputisaBST/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-vector-record"><a href="#option-1-vector-record" class="headerlink" title="option 1 - vector record"></a>option 1 - vector record</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode * node, vector&lt;<span class="type">int</span>&gt;&amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;left, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="built_in">traverse</span>(node-&gt;right, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findTarget</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">traverse</span>(root, ret);</span><br><span class="line">        <span class="type">int</span> n = ret.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ret[l] + ret[r] ==k)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ret[l] + ret[r] &lt; k) l++;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-dfs"><a href="#option-2-dfs" class="headerlink" title="option 2 - dfs"></a>option 2 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">traverse</span><span class="params">(TreeNode *node, <span class="type">int</span> k )</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// pre-order traverse</span></span><br><span class="line">        <span class="type">bool</span> left = <span class="built_in">traverse</span>(node-&gt;left, k);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(visited.<span class="built_in">find</span>(k-node-&gt;val)!=visited.<span class="built_in">end</span>() ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        visited.<span class="built_in">insert</span>(node-&gt;val);</span><br><span class="line">        </span><br><span class="line">        <span class="type">bool</span> right = <span class="built_in">traverse</span>(node-&gt;right, k);</span><br><span class="line">        <span class="keyword">return</span> left || right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findTarget</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">traverse</span>(root, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="option-3-bfs"><a href="#option-3-bfs" class="headerlink" title="option 3 - bfs"></a>option 3 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findTarget</span><span class="params">(TreeNode* root, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode *&gt; q;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(visited.<span class="built_in">find</span>(k-p-&gt;val)!=visited.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                visited.<span class="built_in">insert</span>(p-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code> n is number of node</li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code> </li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>658. Find K Closest Elements</title>
    <url>/blog/2023/02/12/leetcode/658_FindKClosestElements/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/find-k-closest-elements/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Center-expand"><a href="#option-1-Center-expand" class="headerlink" title="option 1 - Center expand"></a>option 1 - Center expand</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>, cand = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>( arr[i] - x) &lt; <span class="built_in">abs</span>(cand - x))&#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                cand = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = idx ,  r=idx+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&gt;<span class="number">-1</span> &amp;&amp; r&lt;n &amp;&amp; <span class="built_in">abs</span>(arr[l] - x) &lt;= <span class="built_in">abs</span>(arr[r] - x))&#123;</span><br><span class="line">                ret.<span class="built_in">insert</span>(ret.<span class="built_in">begin</span>(), arr[l--]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>  <span class="keyword">if</span>(l&gt;<span class="number">-1</span> &amp;&amp; r&lt;n &amp;&amp; <span class="built_in">abs</span>(arr[l] - x) &gt; <span class="built_in">abs</span>(arr[r] - x))   ret.<span class="built_in">push_back</span>(arr[r++]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(l&gt;<span class="number">-1</span>) ret.<span class="built_in">insert</span>(ret.<span class="built_in">begin</span>(), arr[l--]);</span><br><span class="line">                <span class="keyword">else</span> ret.<span class="built_in">push_back</span>(arr[r++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>faster version<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>, cand = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>( arr[i] - x) &lt; <span class="built_in">abs</span>(cand - x))&#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                cand = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = idx ,  r=idx+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; left,ret;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&gt;<span class="number">-1</span> &amp;&amp; r&lt;n &amp;&amp; <span class="built_in">abs</span>(arr[l] - x) &lt;= <span class="built_in">abs</span>(arr[r] - x))&#123;</span><br><span class="line">                left.<span class="built_in">push_back</span>(arr[l--]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>  <span class="keyword">if</span>(l&gt;<span class="number">-1</span> &amp;&amp; r&lt;n &amp;&amp; <span class="built_in">abs</span>(arr[l] - x) &gt; <span class="built_in">abs</span>(arr[r] - x))   ret.<span class="built_in">push_back</span>(arr[r++]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(l&gt;<span class="number">-1</span>) left.<span class="built_in">push_back</span>(arr[l--]);</span><br><span class="line">                <span class="keyword">else</span> ret.<span class="built_in">push_back</span>(arr[r++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t:ret) left.<span class="built_in">push_back</span>(t);</span><br><span class="line">        <span class="keyword">return</span> left;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-heap"><a href="#option-2-heap" class="headerlink" title="option 2 - heap"></a>option 2 - heap</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](<span class="keyword">auto</span> &amp;a, <span class="keyword">auto</span> &amp;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.second == b.second) <span class="keyword">return</span> a.first&gt;b.first;</span><br><span class="line">            <span class="keyword">return</span> a.second&gt;b.second;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) pq.<span class="built_in">push</span>(&#123;i, <span class="built_in">abs</span>(arr[i]- x)&#125;);</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">auto</span> p = pq.<span class="built_in">top</span>(); pq.<span class="built_in">pop</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(arr[p.first]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Binary-Search-and-Center-expandCenter-expand"><a href="#option-3-Binary-Search-and-Center-expandCenter-expand" class="headerlink" title="option 3 - Binary Search and Center expandCenter expand"></a>option 3 - Binary Search and Center expandCenter expand</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// binary search closest value in array</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] == x) &#123; r = mid; <span class="keyword">break</span>;&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &lt; x) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        l = r , r = r+<span class="number">1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; left,ret;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&gt;<span class="number">-1</span> &amp;&amp; r&lt;n &amp;&amp; <span class="built_in">abs</span>(arr[l] - x) &lt;= <span class="built_in">abs</span>(arr[r] - x)) left.<span class="built_in">push_back</span>(arr[l--]);</span><br><span class="line">            <span class="keyword">else</span>  <span class="keyword">if</span>(l&gt;<span class="number">-1</span> &amp;&amp; r&lt;n &amp;&amp; <span class="built_in">abs</span>(arr[l] - x) &gt; <span class="built_in">abs</span>(arr[r] - x))   ret.<span class="built_in">push_back</span>(arr[r++]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(l&gt;<span class="number">-1</span>) left.<span class="built_in">push_back</span>(arr[l--]);</span><br><span class="line">                <span class="keyword">else</span> ret.<span class="built_in">push_back</span>(arr[r++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t:ret) left.<span class="built_in">push_back</span>(t);</span><br><span class="line">        <span class="keyword">return</span> left;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(nlog(k)) + O(nlog(n))</code></li>
<li>space complexity <code>O(k)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(logn + k)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>662. Maximum Width of Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/662_MaximumWidthofBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-width-of-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>需要用一個整數紀錄最左邊與最右邊的節點的</p>
<ul>
<li>overflow<br>因為同一層最左邊的節點會基於跟節點的值去往上疊加<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes are also counted into the length calculation.</span></span><br><span class="line">        <span class="comment">// 最左邊與最右邊非空的節點</span></span><br><span class="line">        <span class="comment">// bfs 變形</span></span><br><span class="line">        <span class="comment">// 需要用一個整數紀錄最左邊與最右邊的節點的</span></span><br><span class="line">        queue&lt;pair&lt;TreeNode *,<span class="type">int</span>&gt; &gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(root, <span class="number">1</span>));</span><br><span class="line">        <span class="type">int</span> width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> l = q.<span class="built_in">front</span>().second, r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                pair&lt;TreeNode*, <span class="type">int</span>&gt; p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i==size<span class="number">-1</span>) r = p.second;</span><br><span class="line">                <span class="keyword">if</span>(p.first-&gt;left) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(p.first-&gt;left, p.second*<span class="number">2</span>));</span><br><span class="line">                <span class="keyword">if</span>(p.first-&gt;right) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(p.first-&gt;right, p.second*<span class="number">2</span>+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            width = <span class="built_in">max</span>(width, r-l+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><p><code>if(i==0) l = p.second;</code>, <code>(p.second-l)</code> 確保不會overflow<br>確保同一層最左邊的空節點，應該為0 </p>
<blockquote>
<p>to make the id starting from zero</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes are also counted into the length calculation.</span></span><br><span class="line">        <span class="comment">// 最左邊與最右邊非空的節點</span></span><br><span class="line">        <span class="comment">// bfs 變形</span></span><br><span class="line">        <span class="comment">// 需要用一個整數紀錄最左邊與最右邊的節點的位置</span></span><br><span class="line">        queue&lt;pair&lt;TreeNode *,<span class="type">long</span>&gt; &gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(root, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">long</span> l ,r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                </span><br><span class="line">                pair&lt;TreeNode*, <span class="type">long</span>&gt; p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>) l = p.second;</span><br><span class="line">                <span class="keyword">if</span>(i==size<span class="number">-1</span>) r = p.second;</span><br><span class="line">                <span class="keyword">if</span>(p.first-&gt;left) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(p.first-&gt;left, (p.second-l)*<span class="number">2</span>));</span><br><span class="line">                <span class="keyword">if</span>(p.first-&gt;right) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(p.first-&gt;right, (p.second-l)*<span class="number">2</span>+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            width = <span class="built_in">max</span>(width, (<span class="type">int</span>)(r-l+<span class="number">1</span>));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>669. Trim a Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/669_TrimaBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/trim-a-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只是將Node的指向進行的更改，而不是實際刪除Node</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// Node 太小，那返回他的右子樹，右子樹比他大</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; L) <span class="keyword">return</span> <span class="built_in">trimBST</span>(root-&gt;right, L, R);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &gt; R) <span class="keyword">return</span> <span class="built_in">trimBST</span>(root-&gt;left, L, R);</span><br><span class="line">        <span class="comment">// 遞迴</span></span><br><span class="line">        root-&gt;left = <span class="built_in">trimBST</span>(root-&gt;left, L, R);</span><br><span class="line">        root-&gt;right = <span class="built_in">trimBST</span>(root-&gt;right, L, R);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>66. Plus One</title>
    <url>/blog/2023/02/12/leetcode/66_PlusOne/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/plus-one/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">plusOne</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>, n= digits.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[n] == <span class="number">9</span>)&#123;</span><br><span class="line">                digits[n]= <span class="number">0</span>;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                digits[n]++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(digits[<span class="number">0</span>] == <span class="number">0</span>) digits.<span class="built_in">insert</span>(digits.<span class="built_in">begin</span>() ,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>677. Map Sum Pairs</title>
    <url>/blog/2023/02/12/leetcode/677_MapSumPairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/map-sum-pairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> isWord;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TrieNode* children[<span class="number">26</span>];</span><br><span class="line">    <span class="built_in">TrieNode</span>()&#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">        isWord = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(TrieNode * &amp; child :children) child = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TrieNode *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TrieNode* <span class="title">put</span><span class="params">(TrieNode* node, string key, <span class="type">int</span> val, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) node = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">        <span class="keyword">if</span>(i == key.<span class="built_in">size</span>())&#123;</span><br><span class="line">            node-&gt;val = val;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = key[i];</span><br><span class="line">        node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="built_in">put</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], key, val, i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(string key, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">// iterative</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TrieNode *p = root;</span></span><br><span class="line">        <span class="comment">// for(char c:key)&#123;</span></span><br><span class="line">        <span class="comment">//     if(!p-&gt;children[c-&#x27;a&#x27;]) p-&gt;children[c-&#x27;a&#x27;] = new TrieNode();</span></span><br><span class="line">        <span class="comment">//     p=p-&gt;children[c-&#x27;a&#x27;];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// p-&gt;val = val;</span></span><br><span class="line">        <span class="comment">// p-&gt;isWord = true;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//recursive</span></span><br><span class="line">        root = <span class="built_in">put</span>(root, key, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span></span>&#123;</span><br><span class="line">        TrieNode *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:word)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p=p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 從節點 node 開始搜索 key，如果存在返回對應節點，否則返回 null</span></span><br><span class="line">    <span class="function">TrieNode* <span class="title">getNode</span><span class="params">(TrieNode *node, string key)</span></span>&#123;</span><br><span class="line">        TrieNode *p = node;</span><br><span class="line">        <span class="comment">// 從節點 node 開始搜索 key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p ) &#123;</span><br><span class="line">                <span class="comment">// 無往向下搜索</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下搜索</span></span><br><span class="line">            <span class="type">char</span> c = key[i];</span><br><span class="line">            p = p-&gt;children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搜索 key 對應的值，不存在則返回 null</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(string prefix)</span></span>&#123;</span><br><span class="line">        TrieNode * x = <span class="built_in">getNode</span>(root, prefix);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">nullptr</span> || x-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// x 為空或 x 的 val 字段為空都说明 key 没有對應的值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搜尋所有前綴為prefix 所有鍵</span></span><br><span class="line">    <span class="comment">// keysWithPrefix(&quot;th&quot;) -&gt; [&quot;that&quot;, &quot;the&quot;, &quot;them&quot;]</span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">keysWithPrefix</span><span class="params">(string prefix)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        TrieNode * x = <span class="built_in">getNode</span>(root, prefix);</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="literal">nullptr</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="comment">// DFS 遍歷以 x 為根的這棵 Trie 樹</span></span><br><span class="line">        <span class="built_in">traverse</span>(x, prefix, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍歷以 node 節點為根的 Trie 樹，找到所有鍵</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TrieNode *node, string path, vector&lt;string&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node-&gt;val!=<span class="number">0</span>) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;c&lt;=<span class="string">&#x27;z&#x27;</span> ; ++c)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="built_in">traverse</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], path, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍歷函数，嘗試在「以 node 為根的 Trie 樹中」匹配 pattern[i..]</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TrieNode * node, string path, string pattern, <span class="type">int</span> i, vector&lt;string&gt; &amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==pattern.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;val!=<span class="number">0</span>)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = pattern[i];</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j = <span class="string">&#x27;a&#x27;</span> ;j&lt;=<span class="string">&#x27;z&#x27;</span>;++j)&#123;</span><br><span class="line">                path.<span class="built_in">push_back</span>(j);</span><br><span class="line">                <span class="built_in">traverse</span>(node-&gt;children[j-<span class="string">&#x27;a&#x27;</span>], path,pattern, i+<span class="number">1</span>, ret);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="built_in">traverse</span>(node-&gt;children[c-<span class="string">&#x27;a&#x27;</span>], path,pattern, i+<span class="number">1</span>, ret);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapSum</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Trie *root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MapSum</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string key, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        root-&gt;<span class="built_in">put</span>(key, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; keys = root-&gt;<span class="built_in">keysWithPrefix</span>(prefix);</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string key:keys)&#123;</span><br><span class="line">            ret+= root-&gt;<span class="built_in">get</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MapSum object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MapSum* obj = new MapSum();</span></span><br><span class="line"><span class="comment"> * obj-&gt;insert(key,val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;sum(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>67. Add Binary</title>
    <url>/blog/2023/02/12/leetcode/67_AddBinary/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/add-binary/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =a.<span class="built_in">size</span>(), m = b.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">max</span>(n,m);</span><br><span class="line">        <span class="keyword">if</span>(n&lt;m) a = <span class="built_in">string</span>(m-n,<span class="string">&#x27;0&#x27;</span>) + a;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m) b = <span class="built_in">string</span>(n-m, <span class="string">&#x27;0&#x27;</span>) +b;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        n = len<span class="number">-1</span>, m = len<span class="number">-1</span>;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">-1</span> || m&gt;<span class="number">-1</span> || carry)&#123;</span><br><span class="line">            <span class="type">int</span> sum = carry;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="number">-1</span>) sum+=a[n--]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(m&gt;<span class="number">-1</span>) sum+=b[m--]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            carry = sum/<span class="number">2</span>;</span><br><span class="line">            ret = <span class="built_in">to_string</span>(sum%<span class="number">2</span>)+ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>680. Valid Palindrome II</title>
    <url>/blog/2023/02/12/leetcode/680_ValidPalindromeII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-palindrome-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l++]!=s[r--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[l]!=s[r]) <span class="keyword">return</span> <span class="built_in">isPalindrome</span>(s, l+<span class="number">1</span>,r) || <span class="built_in">isPalindrome</span>(s, l,r<span class="number">-1</span>);</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>682. Baseball Game</title>
    <url>/blog/2023/02/12/leetcode/682_BaseballGame/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/baseball-game/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Convert</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            pos = <span class="number">-1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i;i&lt;str.<span class="built_in">size</span>();++i) num = <span class="number">10</span>*num+str[i] -<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> pos*num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calPoints</span><span class="params">(vector&lt;string&gt;&amp; ops)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">        <span class="keyword">for</span>(string str:ops)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str == <span class="string">&quot;C&quot;</span>)&#123;</span><br><span class="line">                cur.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">&quot;D&quot;</span>)&#123;</span><br><span class="line">                cur.<span class="built_in">push_back</span>(cur.<span class="built_in">back</span>()*<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str==<span class="string">&quot;+&quot;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> size = cur.<span class="built_in">size</span>();</span><br><span class="line">                cur.<span class="built_in">push_back</span>(cur[size<span class="number">-1</span>]+cur[size<span class="number">-2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//conver to int</span></span><br><span class="line">                <span class="type">int</span> num = <span class="built_in">Convert</span>(str);</span><br><span class="line">                cur.<span class="built_in">push_back</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a:cur) total+=a;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>686. Repeated String Match</title>
    <url>/blog/2023/02/12/leetcode/686_RepeatedStringMatch/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/repeated-string-match/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先重複a多次，直到達到b長度，在遍歷aa尋找是否有字串相符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">repeatedStringMatch</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> m = b.<span class="built_in">size</span>(), repeat = <span class="number">1</span>;</span><br><span class="line">        string aa = a;</span><br><span class="line">        <span class="keyword">while</span>(aa.<span class="built_in">size</span>() &lt;m)&#123;</span><br><span class="line">            aa+=a;</span><br><span class="line">            repeat++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = aa.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (aa.<span class="built_in">find</span>(b) != string::npos) <span class="keyword">return</span> repeat;</span><br><span class="line">        aa += a;</span><br><span class="line">        <span class="keyword">return</span> (aa.<span class="built_in">find</span>(b) != string::npos) ? repeat + <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>68. Text Justification</title>
    <url>/blog/2023/02/12/leetcode/68_TextJustification/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/text-justification/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">process</span><span class="params">(vector&lt;string&gt;&amp; cur, <span class="type">int</span> len, <span class="type">int</span> cur_len)</span></span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> n = cur.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            ret+=cur[<span class="number">0</span>];</span><br><span class="line">            ret.<span class="built_in">append</span>(len-cur_len,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> blank_size = (len - cur_len)/(n<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> mod = (len - cur_len)%(n<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cur.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==cur.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">                ret+=cur[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret+=cur[i];</span><br><span class="line">                ret.<span class="built_in">append</span>(blank_size,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span>(mod&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    ret.<span class="built_in">append</span>(<span class="number">1</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                    mod--;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">fullJustify</span><span class="params">(vector&lt;string&gt;&amp; words, <span class="type">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        vector&lt;string&gt; cur;</span><br><span class="line">        <span class="type">int</span> cur_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;words.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            string word = words[i];</span><br><span class="line">            <span class="keyword">if</span>(cur_len + cur.<span class="built_in">size</span>()+word.<span class="built_in">size</span>()&lt;=maxWidth)&#123;</span><br><span class="line">                cur.<span class="built_in">push_back</span>(word);</span><br><span class="line">                cur_len += word.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                string temp =  <span class="built_in">process</span>(cur, maxWidth, cur_len);</span><br><span class="line">                ret.<span class="built_in">push_back</span>(temp);</span><br><span class="line">                cur_len = word.<span class="built_in">size</span>();</span><br><span class="line">                cur.<span class="built_in">clear</span>();</span><br><span class="line">                cur.<span class="built_in">push_back</span>(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!cur.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            string temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cur.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                temp+=cur[i];</span><br><span class="line">                <span class="keyword">if</span>(i!=cur.<span class="built_in">size</span>()<span class="number">-1</span>) temp.<span class="built_in">append</span>(<span class="number">1</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.<span class="built_in">size</span>() &lt; maxWidth) temp.<span class="built_in">append</span>(maxWidth-temp.<span class="built_in">size</span>(),<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        </span><br><span class="line">            ret.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>692. Top K Frequent Words</title>
    <url>/blog/2023/02/12/leetcode/692_TopKFrequentWords/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/top-k-frequent-elements/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) freq[n]++;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>]&lt;b[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:freq) pq.<span class="built_in">push</span>(&#123;m.first, m.second&#125;);</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; p = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(p[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>695. Max Area of Island</title>
    <url>/blog/2023/02/12/leetcode/695_MaxAreaofIsland/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/max-area-of-island/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; grid, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> &amp; area)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j&lt; <span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || grid[i][j] == <span class="number">0</span> ) <span class="keyword">return</span>;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        area++;</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i+<span class="number">1</span>, j, area);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i<span class="number">-1</span>, j, area);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i, j+<span class="number">1</span>, area);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, i, j<span class="number">-1</span>, area);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="type">int</span> area = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(grid, i, j, area);</span><br><span class="line">                ret= <span class="built_in">max</span>(ret, area);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>697. Degree of an Array</title>
    <url>/blog/2023/02/12/leetcode/697_DegreeofanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/degree-of-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findShortestSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mp[nums[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> degree = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.<span class="built_in">begin</span>();it!=mp.<span class="built_in">end</span>();it++) degree=<span class="built_in">max</span>(degree,<span class="built_in">int</span>(it-&gt;second.<span class="built_in">size</span>()));</span><br><span class="line">        <span class="type">int</span> shortest=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.<span class="built_in">begin</span>();it!=mp.<span class="built_in">end</span>();it++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">if</span>(it-&gt;second.<span class="built_in">size</span>()==degree)</span><br><span class="line">            &#123;</span><br><span class="line">                shortest=<span class="built_in">min</span>(shortest,it-&gt;second.<span class="built_in">back</span>()-it-&gt;second[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shortest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>698. Partition to K Equal Sum Subsets</title>
    <url>/blog/2023/02/12/leetcode/698_PartitiontoKEqualSumSubsets/</url>
    <content><![CDATA[<h2 id="problem17-Letter-Combinations-of-a-Phone-Number"><a href="#problem17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="problem17. Letter Combinations of a Phone Number"></a><a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">problem</a>17. Letter Combinations of a Phone Number</h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs-maybe-TLE"><a href="#option-1-dfs-maybe-TLE" class="headerlink" title="option 1 - dfs , maybe TLE"></a>option 1 - dfs , maybe TLE</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">bool</span>&gt; &amp; visited, <span class="type">int</span> start, <span class="type">int</span> sum, <span class="type">int</span> target, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(target == sum)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">backtracking</span>(nums, visited, <span class="number">0</span>,<span class="number">0</span>,target , k<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i] || sum+nums[i] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">backtracking</span>(nums, visited, i+<span class="number">1</span>,sum, target, k) ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            sum-=nums[i];</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartitionKSubsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) total +=n;</span><br><span class="line">        <span class="keyword">if</span>(total%k!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        total/= k;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">backtracking</span>(nums, visited, <span class="number">0</span>, <span class="number">0</span>, total, k);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>69. Sqrt(x)</title>
    <url>/blog/2023/02/12/leetcode/69_Sqrt(x)/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sqrtx/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt; <span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, i ;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i*i&lt;=x;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt; INT_MAX/(i+<span class="number">1</span>)) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - Binary Search"></a>option 2 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(sqrt(n))</code> <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>6. Zigzag Conversion</title>
    <url>/blog/2023/02/12/leetcode/6_ZigzagConversion/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/zigzag-conversion/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>mod</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows==<span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">nums</span><span class="params">(numRows)</span></span>;</span><br><span class="line">        <span class="type">int</span> period = <span class="number">2</span>*numRows<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> mod = i%period;</span><br><span class="line">            <span class="keyword">if</span>(mod &lt; numRows) nums[mod]+=s[i];</span><br><span class="line">            <span class="keyword">else</span> nums[period-mod]+=s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(string str:nums) ret+=str;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>700. Search in a Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/700_SearchinaBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/search-in-a-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &lt; val ) <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;right, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;left, val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>701. Insert into a Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/701_InsertintoaBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/insert-into-a-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找到插入位置</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 往右子樹尋找</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &lt; val) root-&gt;right = <span class="built_in">insertIntoBST</span>(root-&gt;right, val);</span><br><span class="line">        <span class="comment">// 往左子樹尋找</span></span><br><span class="line">        <span class="keyword">else</span> root-&gt;left = <span class="built_in">insertIntoBST</span>(root-&gt;left, val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>703. Kth Largest Element in a Stream</title>
    <url>/blog/2023/02/12/leetcode/703_KthLargestElementinaStream/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/kth-largest-element-in-a-stream/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">    <span class="type">int</span> size ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KthLargest</span>(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        size = k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; size) pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">if</span>(pq.<span class="built_in">size</span>() &gt; size) pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>實現BST</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>704. Binary Search</title>
    <url>/blog/2023/02/12/leetcode/704_BinarySearch/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-search/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>normal version<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt; target) l =mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>left bound<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt; target) l =mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r= mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;n &amp;&amp; nums[l] == target) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>705. Design HashSet</title>
    <url>/blog/2023/02/12/leetcode/705_DesignHashSet/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-hashset/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashSet</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; vec;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="built_in">MyHashSet</span>() &#123;</span><br><span class="line">        vec = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">1000001</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        vec[key] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        vec[key] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns true if this set contains the specified element */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vec[key]==<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyHashSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyHashSet* obj = new MyHashSet();</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;remove(key);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;contains(key);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>&#96;</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>706. Design HashMap</title>
    <url>/blog/2023/02/12/leetcode/706_DesignHashMap/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-hashmap/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashMap</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyHashMap</span>() &#123;</span><br><span class="line">        vec = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1000001</span>,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        vec[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vec[key];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        vec[key]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyHashMap object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyHashMap* obj = new MyHashMap();</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;remove(key);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>707. Design Linked List</title>
    <url>/blog/2023/02/12/leetcode/707_DesignLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/design-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Linked-List"><a href="#option-1-Linked-List" class="headerlink" title="option 1 - Linked List"></a>option 1 - Linked List</h4><ul>
<li>be carefull edge case<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val ;</span><br><span class="line">    Node *next;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next= <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    Node *head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        Node *p = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--)p=p-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node *node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        Node *post = head-&gt;next;</span><br><span class="line">        node-&gt;next = post;</span><br><span class="line">        head-&gt;next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node * p= head-&gt;next;</span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">            head-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next) p=p-&gt;next;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// be careful, index == size-1, equal append()</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt; size) <span class="keyword">return</span>;</span><br><span class="line">        size++;</span><br><span class="line">        Node *node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);   </span><br><span class="line">        Node *p = head-&gt;next, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = node;</span><br><span class="line">        node-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        size--;</span><br><span class="line">        Node *p = head-&gt;next, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next= p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="add-tail-pointer"><a href="#add-tail-pointer" class="headerlink" title="add tail pointer"></a>add tail pointer</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node *next;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *head, *tail;</span><br><span class="line">    <span class="type">int</span> size ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>);</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        Node * p = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--) p=p-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node *post = head-&gt;next;</span><br><span class="line">        Node * node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        head-&gt;next = node;</span><br><span class="line">        node-&gt;next = post;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node * p = head-&gt;next;</span><br><span class="line">        Node * node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        <span class="comment">// size ==0</span></span><br><span class="line">        <span class="keyword">if</span>(p==tail)&#123;</span><br><span class="line">            head-&gt;next = node;</span><br><span class="line">            node-&gt;next = tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next!=tail) p=p-&gt;next;</span><br><span class="line">            p-&gt;next = node;</span><br><span class="line">            node-&gt;next = tail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size ) <span class="keyword">return</span>;</span><br><span class="line">        size++;</span><br><span class="line">        Node *p = head-&gt;next, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node * node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        pre-&gt;next = node;</span><br><span class="line">        node-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        size--;</span><br><span class="line">        Node *p = head-&gt;next, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = p-&gt;next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="option-2-Double-Linked-List"><a href="#option-2-Double-Linked-List" class="headerlink" title="option 2 - Double Linked List"></a>option 2 - Double Linked List</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node *next, *prev;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *head, *tail;</span><br><span class="line">    <span class="type">int</span> size ;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>);</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">        tail-&gt;prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        Node * p = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--) p=p-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node *post = head-&gt;next;</span><br><span class="line">        Node * node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        node-&gt;prev = head;</span><br><span class="line">        node-&gt;next = post;</span><br><span class="line">        head-&gt;next = node;</span><br><span class="line">        post-&gt;prev = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        Node * p = head-&gt;next;</span><br><span class="line">        Node * node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        <span class="comment">// head-&gt;next == prev;</span></span><br><span class="line">        <span class="keyword">if</span>(p==tail)&#123;</span><br><span class="line">            node-&gt;next = tail;</span><br><span class="line">            tail-&gt;prev = node;</span><br><span class="line">            node-&gt;prev = head;</span><br><span class="line">            head-&gt;next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next!=tail) p=p-&gt;next;</span><br><span class="line">            p-&gt;next = node;</span><br><span class="line">            node-&gt;prev = p;</span><br><span class="line">            node-&gt;next = tail;</span><br><span class="line">            tail-&gt;prev = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size ) <span class="keyword">return</span>;</span><br><span class="line">        size++;</span><br><span class="line">        Node *p = head-&gt;next, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node * node = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line">        pre-&gt;next = node;</span><br><span class="line">        node-&gt;prev = pre;</span><br><span class="line">        node-&gt;next = p;</span><br><span class="line">        p-&gt;prev = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        size--;</span><br><span class="line">        Node *p = head-&gt;next, *pre = head;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = p-&gt;next;</span><br><span class="line">        pre-&gt;next-&gt;prev = pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>709. To Lower Case</title>
    <url>/blog/2023/02/12/leetcode/709_ToLowerCase/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/to-lower-case/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">toLowerCase</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c: s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span>) c+=<span class="number">32</span>;</span><br><span class="line">            str+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>70. Climbing Stairs</title>
    <url>/blog/2023/02/12/leetcode/70_ClimbingStairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/climbing-stairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>, dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] +dp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>recursive version &#x3D;&gt; time out<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">climbStairs</span>(n<span class="number">-1</span>)+<span class="built_in">climbStairs</span>(n<span class="number">-2</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>optimal recursive version</li>
</ul>
<p>使用 hash table 紀錄已經call 過的function()，避免重複運算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(n)) <span class="keyword">return</span> mp[n];</span><br><span class="line">        mp[n] = <span class="built_in">climbStairs</span>(n<span class="number">-1</span>) + <span class="built_in">climbStairs</span>(n<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span> mp[n];     </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-space"><a href="#option-2-reduce-space" class="headerlink" title="option 2 - reduce space"></a>option 2 - reduce space</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>, b= <span class="number">2</span>,c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            c= a+b;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>712. Minimum ASCII Delete Sum for Two Strings</title>
    <url>/blog/2023/02/12/leetcode/712_MinimumASCIIDeleteSumforTwoStrings/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDeleteSum</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      e   a   t   </span></span><br><span class="line">        <span class="comment">//      101 198 314</span></span><br><span class="line">        <span class="comment">//s 115</span></span><br><span class="line">        <span class="comment">//e 216</span></span><br><span class="line">        <span class="comment">//a 313</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = s1.<span class="built_in">size</span>(), m = s2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span> ;i++) dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + s1[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m+<span class="number">1</span>;j++) dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>] + s2[j<span class="number">-1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1[i<span class="number">-1</span>] == s2[j<span class="number">-1</span>]) dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j] + s1[i<span class="number">-1</span>] ,dp[i][j<span class="number">-1</span>] + s2[j<span class="number">-1</span>]) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>714. Best Time to Buy and Sell Stock with Transaction Fee</title>
    <url>/blog/2023/02/12/leetcode/714_BestTimetoBuyandSellStockwithTransactionFee/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//sell vs. buy</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>] -fee;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">1</span>] + prices[i] );</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>], dp[i<span class="number">-1</span>][<span class="number">0</span>] - prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-reduce-dp"><a href="#option-2-reduce-dp" class="headerlink" title="option 2 - reduce dp"></a>option 2 - reduce dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp_0 = <span class="number">0</span>,dp_1 = -prices[<span class="number">0</span>]-fee;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            dp_0 = <span class="built_in">max</span>(dp_0, dp_1+prices[i]);</span><br><span class="line">            dp_1 = <span class="built_in">max</span>(dp_1, dp_0-prices[i]-fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>71. Simplify Path</title>
    <url>/blog/2023/02/12/leetcode/71_SimplifyPath/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/simplify-path/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先用split 切分成個字串，在判斷字串是否為”.” 或是 “..”</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string str , <span class="type">char</span> del )</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        string path ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:str)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==del)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!path.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">                path=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> path+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!path.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">simplifyPath</span><span class="params">(string path)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; str = <span class="built_in">split</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(string tmp : str)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp == <span class="string">&quot;.&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp ==<span class="string">&quot;..&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ans.<span class="built_in">empty</span>()) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ans.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(string c:ans) ret+=<span class="string">&quot;/&quot;</span>+c;</span><br><span class="line">        <span class="keyword">return</span> ret.<span class="built_in">empty</span>()?<span class="string">&quot;/&quot;</span>:ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>72. Edit Distance</title>
    <url>/blog/2023/02/12/leetcode/72_EditDistance/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/edit-distance/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      r   o   s</span></span><br><span class="line">        <span class="comment">//  0   1   2   3</span></span><br><span class="line">        <span class="comment">//h 1   1   2   3   </span></span><br><span class="line">        <span class="comment">//o 2   2   1   2</span></span><br><span class="line">        <span class="comment">//r 3   2   2   2</span></span><br><span class="line">        <span class="comment">//s 4   3   3   2</span></span><br><span class="line">        <span class="comment">//e 5   4   4   3</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// word1[i]!=word[j] dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) +1;</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = word1.<span class="built_in">size</span>(), m = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;++i) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m+<span class="number">1</span>;++j) dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;m+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>] !=word2[j<span class="number">-1</span>]) dp[i][j] = \</span><br><span class="line">                    <span class="built_in">min</span>(</span><br><span class="line">                        <span class="built_in">min</span>(</span><br><span class="line">                            dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]        <span class="comment">// insert or delete</span></span><br><span class="line">                        ) ,</span><br><span class="line">                        dp[i<span class="number">-1</span>][j<span class="number">-1</span>] <span class="comment">// replace</span></span><br><span class="line">                        ) +<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>().<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>733. Flood Fill</title>
    <url>/blog/2023/02/12/leetcode/733_FloodFill/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/flood-fill/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; image, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> newColor, <span class="type">int</span> oldColor)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> n = image.<span class="built_in">size</span>(), m=image[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || image[i][j] !=oldColor) <span class="keyword">return</span> ;</span><br><span class="line">        image[i][j] = newColor;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dfs</span>(image, i<span class="number">-1</span>, j, newColor, oldColor);</span><br><span class="line">        <span class="built_in">dfs</span>(image, i+<span class="number">1</span>, j, newColor, oldColor);</span><br><span class="line">        <span class="built_in">dfs</span>(image, i, j<span class="number">-1</span>, newColor, oldColor);</span><br><span class="line">        <span class="built_in">dfs</span>(image, i, j+<span class="number">1</span>, newColor, oldColor);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">floodFill</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">if</span>(newColor == image[sr][sc]) <span class="keyword">return</span> image;</span><br><span class="line">        <span class="built_in">dfs</span>(image, sr, sc, newColor, image[sr][sc]);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">floodFill</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> newColor) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == newColor) <span class="keyword">return</span> image;</span><br><span class="line">        <span class="type">int</span> n= image.<span class="built_in">size</span>(), m = image[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> oldColor= image[sr][sc];</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;sr,sc&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> i = cur[<span class="number">0</span>], j = cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || image[i][j] != oldColor) <span class="keyword">continue</span>;</span><br><span class="line">            image[i][j] = newColor;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;i+<span class="number">1</span>,j&#125;);</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;i,j+<span class="number">1</span>&#125;);</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;i<span class="number">-1</span>,j&#125;);</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;i,j<span class="number">-1</span>&#125;);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - dfs<ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
</li>
<li>option 2 - bfs<ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>739. Daily Temperatures</title>
    <url>/blog/2023/02/12/leetcode/739_DailyTemperatures/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/daily-temperatures/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>brute force so time out<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =temperatures.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temperatures[j] &gt; temperatures[i])&#123;</span><br><span class="line">                    ret[i] = j-i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>monotonic stack with index to compute number of days you have to wait after to get a warmer temperature</li>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> n = temperatures.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; temperatures[sta.<span class="built_in">top</span>()] &lt; temperatures[i] )&#123;</span><br><span class="line">                <span class="type">int</span> t = sta.<span class="built_in">top</span>();</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                ret[t] = i-t;</span><br><span class="line">            &#125;</span><br><span class="line">            sta.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>monotonic stack</tag>
      </tags>
  </entry>
  <entry>
    <title>73. Set Matrix Zeroes</title>
    <url>/blog/2023/02/12/leetcode/73_SetMatrixZeroes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/set-matrix-zeroes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol>
<li>將第一列與第一行是否有出現零，設置<code>flag = true;</code></li>
<li>除了第一列第一行的其餘陣列，如果有0出現，則將對應的第一行或第一列設為0</li>
<li>遍歷除了第一列第一行得其餘數陣列，如果當前第一行第一列為0，則該位置設置為0</li>
<li>根據<code>flag</code> 更新第一行第一列為0</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">bool</span> isFirstCol = <span class="literal">false</span>, isFirstRow = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][<span class="number">0</span>] == <span class="number">0</span>) isFirstCol = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[<span class="number">0</span>][j] ==<span class="number">0</span> ) isFirstRow = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][<span class="number">0</span>] ==<span class="number">0</span> || matrix[<span class="number">0</span>][j] ==<span class="number">0</span>) matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(isFirstRow)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j) matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isFirstCol)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>740. Delete and Earn</title>
    <url>/blog/2023/02/12/leetcode/740_DeleteandEarn/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/delete-and-earn/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>這就是變形的強盜問題<code>198. House Robber</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteAndEarn</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  </span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums) dp[n]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;++i) dp[i] = i*dp[i];</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        ret = <span class="built_in">max</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10000</span>;++i)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+dp[i], dp[i<span class="number">-1</span>]);</span><br><span class="line">            ret = <span class="built_in">max</span>(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>746. Min Cost Climbing Stairs</title>
    <url>/blog/2023/02/12/leetcode/746_MinCostClimbingStairs/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>當前位置的花費，是前兩個位置累積的花費加上前兩個位置的花費<code>min(cost[i-1]+dp[i-1], cost[i-2]+dp[i-2]);</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  10  15  20</span></span><br><span class="line">        <span class="comment">//          15  </span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  1   100 1   1   1   1   100 1   1   100 1</span></span><br><span class="line">        <span class="comment">//          1   </span></span><br><span class="line">        <span class="type">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>]+cost[i<span class="number">-1</span>], dp[i<span class="number">-2</span>]+cost[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>74. Search a 2D Matrix</title>
    <url>/blog/2023/02/12/leetcode/74_Searcha2DMatrix/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/search-a-2d-matrix/submissions/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>() , m=matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, j = m<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">-1</span> &amp;&amp; i&lt;n &amp;&amp; j&gt;<span class="number">-1</span> &amp;&amp; j&lt;m)&#123;</span><br><span class="line">            cur = matrix[i][j];</span><br><span class="line">            <span class="keyword">if</span>(cur == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur&lt;target) i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-Binary-Search"><a href="#option-2-Binary-Search" class="headerlink" title="option 2 - Binary Search"></a>option 2 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">BinarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m= matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target &gt;=matrix[i][<span class="number">0</span>] &amp;&amp; target&lt;= matrix[i][m<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">BinarySearch</span>(matrix[i], target)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="option-3-Binary-Search"><a href="#option-3-Binary-Search" class="headerlink" title="option 3 - Binary Search"></a>option 3 - Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n*m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[mid/m][mid%m] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[mid/m][mid%m] &gt; target) r = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - Two Pointers<ul>
<li>time complexity <code>O(n+m)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - Binary Search<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3 - Binary Search<ul>
<li>time complexity <code>O(log(n+m))</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>752. Open the Lock</title>
    <url>/blog/2023/02/12/leetcode/752_OpentheLock/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/open-the-lock/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">plusOne</span><span class="params">(string &amp; str, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] ==<span class="string">&#x27;9&#x27;</span>) str[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> str[i]++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">minusOne</span><span class="params">(string &amp; str, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] ==<span class="string">&#x27;0&#x27;</span>) str[i] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> str[i]--;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">openLock</span><span class="params">(vector&lt;string&gt;&amp; deadends, string target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bfs </span></span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">dead</span><span class="params">(deadends.begin(), deadends.end())</span></span>;</span><br><span class="line">        <span class="comment">// visited set record what has seen</span></span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">visited</span><span class="params">(&#123;<span class="string">&quot;0000&quot;</span>&#125;)</span></span>;</span><br><span class="line">        <span class="function">queue&lt;string&gt; <span class="title">q</span><span class="params">(&#123;<span class="string">&quot;0000&quot;</span>&#125;)</span></span>;</span><br><span class="line">        <span class="type">int</span> turns = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                string p =q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(dead.<span class="built_in">find</span>(p) !=dead.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(p==target) <span class="keyword">return</span> turns;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;<span class="number">4</span>;++j)&#123;</span><br><span class="line">                    string str = p;</span><br><span class="line">                    <span class="built_in">plusOne</span>(str, j);</span><br><span class="line">                    <span class="keyword">if</span>(visited.<span class="built_in">find</span>(str) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(str);</span><br><span class="line">                        visited.<span class="built_in">insert</span>(str);</span><br><span class="line">                    &#125;</span><br><span class="line">                    string str2 = p;</span><br><span class="line">                    <span class="built_in">minusOne</span>(str2, j);</span><br><span class="line">                    <span class="keyword">if</span>(visited.<span class="built_in">find</span>(str2) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(str2);</span><br><span class="line">                        visited.<span class="built_in">insert</span>(str2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            turns++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>75. Sort Colors</title>
    <url>/blog/2023/02/12/leetcode/75_SortColors/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-colors/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>sorting<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="option-1-STL-to-store"><a href="#option-1-STL-to-store" class="headerlink" title="option 1 - STL to store"></a>option 1 - STL to store</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> zeros = <span class="number">0</span>, ones = <span class="number">0</span>, seconds = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>) zeros++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) ones++;</span><br><span class="line">            <span class="keyword">else</span> seconds++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; zeros&gt;<span class="number">0</span>)&#123;nums[i++] = <span class="number">0</span>;zeros--;&#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; ones&gt;<span class="number">0</span>)&#123;nums[i++] = <span class="number">1</span>;ones--;&#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; seconds&gt;<span class="number">0</span>)&#123;nums[i++] = <span class="number">2</span>;seconds--;&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-2-Two-Pointers"><a href="#option-2-Two-Pointers" class="headerlink" title="option 2 - Two Pointers"></a>option 2 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// because of only three colors</span></span><br><span class="line">        <span class="comment">// two pass</span></span><br><span class="line">        <span class="comment">// slow fast pointer to swap</span></span><br><span class="line">        <span class="comment">// setting zero</span></span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>, n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]==<span class="number">0</span>) <span class="built_in">swap</span>(nums[fast], nums[slow++]);</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = slow;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]==<span class="number">1</span>) <span class="built_in">swap</span>(nums[fast], nums[slow++]);</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Two-Pointer-One-Pass"><a href="#option-3-Two-Pointer-One-Pass" class="headerlink" title="option 3 Two Pointer , One Pass"></a>option 3 Two Pointer , One Pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>() , red = <span class="number">0</span>, blue = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=blue;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) <span class="built_in">swap</span>(nums[i], nums[red++]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]==<span class="number">2</span>) <span class="built_in">swap</span>(nums[i--], nums[blue--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>763. Partition Labels</title>
    <url>/blog/2023/02/12/leetcode/763_PartitionLabels/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/partition-labels/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> n= s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 統計各字元出現的索引區間</span></span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; intervals;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n ;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(s[i])==mp.<span class="built_in">end</span>())&#123;</span><br><span class="line">                mp[s[i]] = &#123;i,i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mp[s[i]].second = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:mp)&#123;</span><br><span class="line">            intervals.<span class="built_in">push_back</span>(&#123;m.second.first,m.second.second&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再將個區間看是否有無重疊，若可重疊使其重疊變成一個大區間，並尋找非重疊的大區間的長度</span></span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(&#123;intervals[<span class="number">0</span>][<span class="number">0</span>], intervals[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;intervals.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; &amp; cur = intervals[i];</span><br><span class="line">            <span class="comment">// non-overlap</span></span><br><span class="line">            <span class="keyword">if</span>(cur[<span class="number">0</span>] &gt; ret.<span class="built_in">back</span>()[<span class="number">1</span>])&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(ret.<span class="built_in">back</span>()[<span class="number">1</span>] - ret.<span class="built_in">back</span>()[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">                ret.<span class="built_in">push_back</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// overlap</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret.<span class="built_in">back</span>()[<span class="number">1</span>] = <span class="built_in">max</span>(ret.<span class="built_in">back</span>()[<span class="number">1</span>], cur[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(ret.<span class="built_in">back</span>()[<span class="number">1</span>] - ret.<span class="built_in">back</span>()[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-opt-option-1"><a href="#option-2-opt-option-1" class="headerlink" title="option 2 - opt option 1"></a>option 2 - opt option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), start = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) m[s[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            last = <span class="built_in">max</span>(last, m[s[i]]);</span><br><span class="line">            <span class="keyword">if</span> (i == last) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(i - start + <span class="number">1</span>);</span><br><span class="line">                start = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Interval</tag>
      </tags>
  </entry>
  <entry>
    <title>769. Max Chunks To Make Sorted</title>
    <url>/blog/2023/02/12/leetcode/769_MaxChunksToMakeSorted/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/max-chunks-to-make-sorted/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-stack"><a href="#option-1-stack" class="headerlink" title="option 1 - stack"></a>option 1 - stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        stack&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; sta;</span><br><span class="line">        <span class="type">int</span> n =arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> mn = arr[i], mx = arr[i];</span><br><span class="line">            <span class="keyword">while</span>(!sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="keyword">auto</span> top = sta.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &lt; top.second)&#123;</span><br><span class="line">                    mn = <span class="built_in">min</span>(top.first, mn);</span><br><span class="line">                    mx = <span class="built_in">max</span>(top.second, mx);</span><br><span class="line">                    sta.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sta.<span class="built_in">push</span>(&#123;mn, mx&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="type">int</span> cur = arr[i], j= i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;=cur;++j)&#123;</span><br><span class="line">                cur = <span class="built_in">max</span>(cur, arr[j]);</span><br><span class="line">                <span class="keyword">if</span>(cur &gt;= arr.<span class="built_in">back</span>()) <span class="keyword">return</span> ret+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = j<span class="number">-1</span>;</span><br><span class="line">            ++ret;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-greedy"><a href="#option-3-greedy" class="headerlink" title="option 3 - greedy"></a>option 3 - greedy</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mx = <span class="number">0</span>, ret =<span class="number">0</span>, n= arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(arr[i], mx);</span><br><span class="line">            <span class="keyword">if</span>(mx == i) ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code> <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>stack</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>76. Minimum Window Substring</title>
    <url>/blog/2023/02/12/leetcode/76_MinimumWindowSubstring/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-window-substring/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>兩指標，分別指向窗口的左右索引，窗口不斷向右移動，當滿足條件(<code>window==need</code>)時，則收縮左邊的索引。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; need, window;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t) need[c]++;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">-1</span>, len = INT_MAX,l=<span class="number">0</span>,r=<span class="number">0</span>, n = s.<span class="built_in">size</span>(),valid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            <span class="type">char</span> c = s[r++];</span><br><span class="line">            <span class="keyword">if</span>(need.<span class="built_in">find</span>(c)!=need.<span class="built_in">end</span>())&#123;</span><br><span class="line">                window[c]++;</span><br><span class="line">                <span class="keyword">if</span>(need[c] == window[c]) valid++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(valid == need.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="comment">// valid == need.size() 代表window = need</span></span><br><span class="line">                <span class="keyword">if</span>(r-l&lt;len)&#123;</span><br><span class="line">                    len = r-l;</span><br><span class="line">                    start = l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> d =s[l++];</span><br><span class="line">                <span class="keyword">if</span>(need.<span class="built_in">find</span>(d) != need.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(need[d] == window[d]) valid--;</span><br><span class="line">                    window[d]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len==INT_MAX?<span class="string">&quot;&quot;</span>:s.<span class="built_in">substr</span>(start, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>773. Sliding Puzzle</title>
    <url>/blog/2023/02/12/leetcode/773_SlidingPuzzle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sliding-puzzle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">encode</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; board)</span></span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>(), m=board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                str+= <span class="built_in">to_string</span>(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">slidingPuzzle</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// bfs </span></span><br><span class="line">        <span class="comment">//  [[1,2,3],[4,0,5]]</span></span><br><span class="line">        <span class="comment">//  encode = &quot;123405&quot;</span></span><br><span class="line">        </span><br><span class="line">        string target = <span class="string">&quot;123450&quot;</span>;</span><br><span class="line">        <span class="comment">// 紀錄鄰居的index</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; nei&#123;</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">5</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        string str = <span class="built_in">encode</span>(board);</span><br><span class="line">        <span class="function">queue&lt;string&gt; <span class="title">q</span><span class="params">(&#123;str&#125;)</span></span>;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">visited</span><span class="params">(&#123;str&#125;)</span></span>;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                string p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p==target) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="comment">// find index of zero</span></span><br><span class="line">                <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(;p[idx]!=<span class="string">&#x27;0&#x27;</span>;idx++);</span><br><span class="line">                <span class="comment">// 零可以跟他的鄰居做交換</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j:nei[idx])&#123;</span><br><span class="line">                    <span class="comment">// 備份一份 p</span></span><br><span class="line">                    string temp = p;</span><br><span class="line">                    <span class="built_in">swap</span>(temp[idx], temp[j]);</span><br><span class="line">                    <span class="keyword">if</span>(visited.<span class="built_in">find</span>(temp) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(temp);</span><br><span class="line">                        visited.<span class="built_in">insert</span>(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>77. Combinations</title>
    <url>/blog/2023/02/12/leetcode/77_Combinations/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/combinations/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt; &amp; path, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 終止條件</span></span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() ==k)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=n;++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// [2,4] OK , [4,2] not OK -&gt; 只允許遞增，避免重複</span></span><br><span class="line">            <span class="built_in">traverse</span>(n,k,path, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(n,k,path, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>783. Minimum Distance Between BST Nodes</title>
    <url>/blog/2023/02/12/leetcode/783_MinimumDistanceBetweenBSTNodes/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-distance-between-bst-nodes/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode *root, <span class="type">int</span>&amp; prev, <span class="type">int</span> &amp;diff)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, prev, diff);</span><br><span class="line">        <span class="keyword">if</span>(prev == <span class="number">-1</span>)&#123;</span><br><span class="line">            prev = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            diff = <span class="built_in">min</span>(diff, root-&gt;val - prev);</span><br><span class="line">            prev = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, prev, diff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDiffInBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> diff = INT_MAX, prev = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root, prev, diff);</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>784. Letter Case Permutation</title>
    <url>/blog/2023/02/12/leetcode/784_LetterCasePermutation/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/letter-case-permutation/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(string s, string path,<span class="type">int</span> l)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;s.<span class="built_in">size</span>() ; ++i)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 因為只會有大小寫與數字</span></span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                path.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">                <span class="built_in">traverse</span>(s, path, i+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if(( s[i]&gt;=&#x27;a&#x27; &amp;&amp; s[i]&lt;=&#x27;z&#x27;) || (s[i]&gt;=&#x27;A&#x27; &amp;&amp; s[i]&lt;=&#x27;Z&#x27;))&#123;</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 選擇小寫</span></span><br><span class="line">                path.<span class="built_in">push_back</span>(<span class="built_in">tolower</span>(s[i]));</span><br><span class="line">                <span class="built_in">traverse</span>(s, path, i+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 選擇大寫</span></span><br><span class="line">                path.<span class="built_in">push_back</span>(<span class="built_in">toupper</span>(s[i]));</span><br><span class="line">                <span class="built_in">traverse</span>(s, path, i+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">traverse</span>(s, path, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>785. Is Graph Bipartite?</title>
    <url>/blog/2023/02/12/leetcode/785_IsGraphBipartite?/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/is-graph-bipartite/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; color, visited;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph, <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 已經確定不是二分圖了</span></span><br><span class="line">        <span class="keyword">if</span>(!ok) <span class="keyword">return</span>;</span><br><span class="line">        visited[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w:graph[v])&#123;</span><br><span class="line">            <span class="comment">// 拜訪鄰居 w</span></span><br><span class="line">            <span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">                color[w] = !color[v];</span><br><span class="line">                <span class="built_in">traverse</span>(graph, w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 鄰居w 已經被拜訪過了</span></span><br><span class="line">                <span class="keyword">if</span>(color[w] == color[v])&#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBipartite</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = graph.<span class="built_in">size</span>();</span><br><span class="line">        color = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>);</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;++v)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">                <span class="built_in">traverse</span>(graph, v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-bfs"><a href="#option-2-bfs" class="headerlink" title="option 2 - bfs"></a>option 2 - bfs</h4>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>788. Rotated Digits</title>
    <url>/blog/2023/02/12/leetcode/788_RotatedDigits/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rotated-digits/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        string str = <span class="built_in">to_string</span>(k);</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:str)&#123;</span><br><span class="line">            <span class="keyword">if</span>( c==<span class="string">&#x27;3&#x27;</span> || c==<span class="string">&#x27;4&#x27;</span> || c==<span class="string">&#x27;7&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;2&#x27;</span> || c==<span class="string">&#x27;5&#x27;</span> || c==<span class="string">&#x27;6&#x27;</span> || c==<span class="string">&#x27;9&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rotatedDigits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) count+=(<span class="built_in">check</span>(i));</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>78. Subsets</title>
    <url>/blog/2023/02/12/leetcode/78_Subsets/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/subsets/">problem</a></h2><p>給定一個陣列，假設其元素都唯一，返回所有的子集。可以是任何順序</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>先new 一個<code>vector&lt;vector&lt;int&gt;&gt;</code>，然後用backtracking方式搜尋所有子集，直到長度超過陣列長度為止。</li>
<li>樹的每個節點的拜訪</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 關鍵</span></span><br><span class="line">        ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="comment">// 終止條件，s==nums.size()</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 因為不可以重複元素需要有索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, ret, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsets</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, ret, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><p>time complexity <code>O(2^n)</code><br>space complexity <code>O(n)</code></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>793. Preimage Size of Factorial Zeroes Function</title>
    <url>/blog/2023/02/12/leetcode/793_PreimageSizeofFactorialZeroesFunction/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>用二元搜尋尋找左右邊界。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">trailingZeroes</span><span class="params">(<span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> d=n;d&gt;<span class="number">4</span>;d/=<span class="number">5</span>)&#123;</span><br><span class="line">            ret += d/<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">right_bound</span><span class="params">( <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> l =<span class="number">0</span>, r = LONG_MAX;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">long</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> eval = <span class="built_in">trailingZeroes</span>(mid);</span><br><span class="line">            <span class="keyword">if</span>(eval == k) l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(eval&lt; k) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(eval &gt;k) r = mid; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> l =<span class="number">0</span>, r = LONG_MAX;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">long</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> eval = <span class="built_in">trailingZeroes</span>(mid);</span><br><span class="line">            <span class="keyword">if</span>(eval == k) r = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(eval &lt; k) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">preimageSizeFZF</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  ... 25</span></span><br><span class="line">        <span class="comment">//      1   1   2   6   24  20  20  40  20  80  800 800 600 800 200 3000 8000 6000 8000 2000 40000</span></span><br><span class="line">        <span class="comment">//nums  0   0   0   0   0   1   1   1   1   1   2   2   2   2   2   3   3   3   3   3   4       6</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  從nums 找到 nums[i] = k 最左邊的索引與最右邊的索引相減加一</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">right_bound</span>(k)  -<span class="built_in">left_bound</span>(k) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(1)</code>  ，因為k最大也就是<code>LONG_MAX</code> <code>O(log(LONG_MAX) = O(32) = O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>797. All Paths From Source to Target</title>
    <url>/blog/2023/02/12/leetcode/797_AllPathsFromSourcetoTarget/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/all-paths-from-source-to-target/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> cur, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加節點至路徑</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">back</span>() == graph.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">// 抵達終點</span></span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遞迴每個相鄰節點</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>  neighbor:graph[cur])&#123;</span><br><span class="line">            <span class="built_in">traverse</span>(graph, neighbor, path, ret);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">allPathsSourceTarget</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph) &#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(graph, <span class="number">0</span>, path, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;graph, vector&lt;<span class="type">int</span>&gt; &amp;path, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        path.<span class="built_in">push_back</span>(start);</span><br><span class="line">        <span class="keyword">if</span>(!path.<span class="built_in">empty</span>() &amp;&amp; path.<span class="built_in">back</span>() == graph.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a:graph[start])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(graph, path, a);</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">allPathsSourceTarget</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">dfs</span>(graph, path, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(V+E)</code></li>
<li>space complexity <code>O(V)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>79. Word Search</title>
    <url>/blog/2023/02/12/leetcode/79_WordSearch/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/word-search/">problem</a></h2><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>終止條件 <code>if(word.size() == k) return true;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word, <span class="type">int</span> i, <span class="type">int</span> j,<span class="type">int</span> k,  vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp; visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word.<span class="built_in">size</span>() == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>() , m= board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt; <span class="number">0</span> || i&gt;n<span class="number">-1</span> || j&gt;m<span class="number">-1</span> || visited[i][j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(board[i][j] !=word[k]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">bool</span> ret =  <span class="built_in">backtracking</span>(board, word, i+<span class="number">1</span>,j, k+<span class="number">1</span>, visited) || \</span><br><span class="line">            <span class="built_in">backtracking</span>(board, word, i,j+<span class="number">1</span>, k+<span class="number">1</span>, visited) || \</span><br><span class="line">            <span class="built_in">backtracking</span>(board, word, i<span class="number">-1</span>,j, k+<span class="number">1</span>, visited) || \</span><br><span class="line">            <span class="built_in">backtracking</span>(board, word, i,j<span class="number">-1</span>, k+<span class="number">1</span>, visited) ;</span><br><span class="line">        </span><br><span class="line">        visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = board.<span class="built_in">size</span>() , m= board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(n,<span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;   </span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == word[<span class="number">0</span>] &amp;&amp;  <span class="built_in">backtracking</span>(board, word, i, j, <span class="number">0</span>, visited)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<ul>
<li>也可以不用visited 額外空間，只需要拜訪到的對board進行修改，結束後再恢復之前的狀態。</li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(4*n^2)</code></li>
<li>space complexity <code>O(n^2)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>7. Reverse Integer</title>
    <url>/blog/2023/02/12/leetcode/7_ReverseInteger/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-integer/">problem</a></h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li>要注意是否會overflow，在每次將結果加到ret變數時都必須檢查是否overflow<h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(ret) &gt; INT_MAX/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ret = <span class="number">10</span>*ret + (x%<span class="number">10</span>);</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(1)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>809. Expressive Words</title>
    <url>/blog/2023/02/12/leetcode/809_ExpressiveWords/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/expressive-words/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expressiveWords</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= s.<span class="built_in">size</span>(), m = words.<span class="built_in">size</span>(), count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string word:words)&#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;i&lt;n;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;word.<span class="built_in">size</span>() &amp;&amp; s[i] == word[j]) j++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp;s[i] == s[i<span class="number">-1</span>] &amp;&amp; i+<span class="number">1</span> &lt; n &amp;&amp; s[i] ==s[i+<span class="number">1</span>]) i++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!(i&gt;<span class="number">1</span> &amp;&amp; s[i] == s[i<span class="number">-1</span>] &amp;&amp; s[i]== s[i<span class="number">-2</span>])) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == n &amp;&amp; j == word.<span class="built_in">size</span>()) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>80. Remove Duplicates from Sorted Array II</title>
    <url>/blog/2023/02/12/leetcode/80_RemoveDuplicatesfromSortedArrayII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>, fast = <span class="number">1</span>, count =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] == nums[slow] &amp;&amp; count==<span class="number">1</span>)&#123;</span><br><span class="line">                count ++;</span><br><span class="line">                nums[++slow] = nums[fast];</span><br><span class="line">                fast++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[fast] == nums[slow] &amp;&amp; count==<span class="number">2</span>)  fast++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[fast]!=nums[slow])&#123;</span><br><span class="line">                nums[++slow] = nums[fast];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                fast++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>81. Search in Rotated Sorted Array II</title>
    <url>/blog/2023/02/12/leetcode/81_SearchinRotatedSortedArrayII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>如果最左邊或最右邊與中間一樣(因為可能重複數值)，就往將右索引往左移動一個</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+ (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 右半部遞增</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[r])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt; target &amp;&amp; target&lt;= nums[r]) l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; nums[r])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[l] &lt;= target &amp;&amp; target &lt; nums[mid]) r = mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>82. Remove Duplicates from Sorted List II</title>
    <url>/blog/2023/02/12/leetcode/82_RemoveDuplicatesfromSortedListII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-101</span>), *ret = slow;</span><br><span class="line">        slow-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(slow-&gt;next)&#123;</span><br><span class="line">            ListNode * fast = slow-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;val ==fast-&gt;val ) &#123;</span><br><span class="line">                fast=fast-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(slow-&gt;next ==fast) slow=slow-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> slow-&gt;next = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>83. Remove Duplicates from Sorted List</title>
    <url>/blog/2023/02/12/leetcode/83_RemoveDuplicatesfromSortedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Two-Pointers"><a href="#option-1-Two-Pointers" class="headerlink" title="option 1 - Two Pointers"></a>option 1 - Two Pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *slow = head, * fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast)&#123;</span><br><span class="line">            <span class="keyword">if</span>(slow-&gt;val !=fast-&gt;val)&#123;</span><br><span class="line">                slow-&gt;next = fast;</span><br><span class="line">                slow = slow=slow-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>other version<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        ret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(head-&gt;val);</span><br><span class="line">        ret = ret-&gt;next;</span><br><span class="line">        head= head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;val!=ret-&gt;val)&#123;</span><br><span class="line">                ret-&gt;next = head;</span><br><span class="line">                ret =ret-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            head= head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ret-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="option-2-improve-option-1"><a href="#option-2-improve-option-1" class="headerlink" title="option 2 - improve option 1"></a>option 2 - improve option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next &amp;&amp; p-&gt;val ==p-&gt;next-&gt;val) p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">            p=p-&gt;next;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-use-STL"><a href="#option-3-use-STL" class="headerlink" title="option 3 - use STL"></a>option 3 - use STL</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        ListNode *ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *ans = ret;</span><br><span class="line">        <span class="comment">// 利用set ordered</span></span><br><span class="line">        <span class="keyword">for</span>(ListNode *p = head;p;p=p-&gt;next) s.<span class="built_in">insert</span>(p-&gt;val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter = s.<span class="built_in">begin</span>(); iter!=s.<span class="built_in">end</span>();iter++)&#123;</span><br><span class="line">            ret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(*iter);</span><br><span class="line">            ret= ret-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>844. Backspace String Compare</title>
    <url>/blog/2023/02/12/leetcode/844_BackspaceStringCompare/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/backspace-string-compare/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">process</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        string ret ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ret.<span class="built_in">empty</span>()) ret.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ret+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        string ret, ans;</span><br><span class="line">        string a = <span class="built_in">process</span>(s), b = <span class="built_in">process</span>(t);</span><br><span class="line">        <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>852. Peak Index in a Mountain Array</title>
    <url>/blog/2023/02/12/leetcode/852_PeakIndexinaMountainArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-brute-force"><a href="#option-1-brute-force" class="headerlink" title="option  1 brute force"></a>option  1 brute force</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;arr[i<span class="number">-1</span>] &amp;&amp; arr[i]&gt;arr[i+<span class="number">1</span>]) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r =n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>&lt;n &amp;&amp; arr[l] &lt; arr[l+<span class="number">1</span>]) l++;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-Binary-Search"><a href="#option-3-Binary-Search" class="headerlink" title="option 3 Binary Search"></a>option 3 Binary Search</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peakIndexInMountainArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = arr.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid]&lt;arr[mid+<span class="number">1</span>]) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>868. Binary Gap</title>
    <url>/blog/2023/02/12/leetcode/868_BinaryGap/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-gap/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">binaryGap</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if n is 2-power return false;</span></span><br><span class="line">        <span class="keyword">if</span>( (n&amp;(n<span class="number">-1</span>))==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> gap = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="comment">// 第一次</span></span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    gap = <span class="built_in">max</span>(gap , i-j);</span><br><span class="line">                &#125;</span><br><span class="line">                j =i ;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>86. Partition List</title>
    <url>/blog/2023/02/12/leetcode/86_PartitionList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/partition-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>建立兩個指標分別收集大於等於x的節點與小於x的節點</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode *smaller = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *a = smaller , *bigger = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *b = bigger;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;val &gt;= x)&#123;</span><br><span class="line">                b-&gt;next = p;</span><br><span class="line">                b=b-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                a-&gt;next = p;</span><br><span class="line">                a=a-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        b-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        a-&gt;next = bigger-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> smaller-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>870. Advantage Shuffle</title>
    <url>/blog/2023/02/12/leetcode/870_AdvantageShuffle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/advantage-shuffle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>將nums1 排序，將nums2 <code>&#123;nums2[i], i&#125; </code>push 進heap，每次從heap 派出最大，與<code>nums1[r]</code> 比較大小，如果大於等於<code>nums1[r]</code>，打不過，那就派出最爛的<code>nums1[l]</code>，反之派出最強的<code>nums[r]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">advantageCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp; a, pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.first&lt;b.first;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp) &gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums2.<span class="built_in">size</span>();++i) pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(nums2[i], i) );</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(),nums1.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">ret</span>(nums1.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums1.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> maxVal = pq.<span class="built_in">top</span>().first, i = pq.<span class="built_in">top</span>().second;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(maxVal &gt;= nums1[r])&#123;</span><br><span class="line">                ret[i] = nums1[l++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret[i] = nums1[r--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>875. Koko Eating Bananas</title>
    <url>/blog/2023/02/12/leetcode/875_KokoEatingBananas/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/koko-eating-bananas/">problem</a></h2><p>KoKo 要在警衛回來之前(h 小時)吃完所有香蕉<code>piles</code>，KoKo可以決定自己吃的速度k 。<br>計算他可以在h小時內吃掉所有香蕉的最小速度。</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>Binary 變形題，不是直接比較陣列中的元素，而是將陣列中元素餵進函數得到輸出，在比較大小，去決定左右索引如何移動。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> speed)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> hours = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:piles)&#123;</span><br><span class="line">            hours += p/speed;</span><br><span class="line">            <span class="keyword">if</span>(p%speed) hours++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hours;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minEatingSpeed</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">1</span>,r =<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 每小時最多吃多少根，取決於最大堆數量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:piles) r = <span class="built_in">max</span>(p, r);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> speed = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 如果用每小時 speed 速度吃的話，需要hours 小時才吃得完</span></span><br><span class="line">            <span class="type">int</span> hours = <span class="built_in">cost</span>(piles, speed);</span><br><span class="line">            <span class="keyword">if</span>(hours == h) r = speed;</span><br><span class="line">            <span class="comment">// 警衛回來前吃不完，需要加快速度</span></span><br><span class="line">            <span class="keyword">if</span>(hours &gt; h) l= speed+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 吃太快，放慢速度</span></span><br><span class="line">            <span class="keyword">else</span> r =  speed;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cost</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;piles, <span class="type">int</span> speed)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> hours = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:piles)&#123;</span><br><span class="line">            hours+=p/speed;</span><br><span class="line">            <span class="keyword">if</span>(p%speed) hours++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hours;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minEatingSpeed</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">1</span> , r  = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:piles) r = <span class="built_in">max</span>(r, p);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+ (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> hours = <span class="built_in">cost</span>(piles, mid);</span><br><span class="line">            <span class="comment">// eat fast</span></span><br><span class="line">            <span class="keyword">if</span>(hours &lt;= h ) r = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// eat slow</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(hours &gt; h) l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogm)</code> , n is number of piles and m os range of k</li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>876. Middle of the Linked List</title>
    <url>/blog/2023/02/12/leetcode/876_MiddleoftheLinkedList/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/middle-of-the-linked-list/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next )&#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow= slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>speed complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>889. Construct Binary Tree from Preorder and Postorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/889_ConstructBinaryTreefromPreorderandPostorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode * <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, <span class="type">int</span> l, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt;&amp; postorder, <span class="type">int</span> lo, <span class="type">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r || lo&gt;hi) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[l]);</span><br><span class="line">        <span class="keyword">if</span>(lo == hi )<span class="keyword">return</span> root;</span><br><span class="line">        <span class="type">int</span> val = preorder[l+<span class="number">1</span>], idx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=lo;i&lt;=hi;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val == postorder[i])&#123;</span><br><span class="line">                idx = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(preorder, l+<span class="number">1</span>, l+<span class="number">1</span>+idx-lo, postorder, lo, idx);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(preorder, l+<span class="number">1</span>+idx-lo+<span class="number">1</span>,r, postorder, idx+<span class="number">1</span>, hi<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructFromPrePost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(preorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>()<span class="number">-1</span>, postorder, <span class="number">0</span>, postorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(n^2)</code>  n is node number</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>88. Merge Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/88_MergeSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/merge-sorted-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-insert-sort"><a href="#option-1-insert-sort" class="headerlink" title="option 1 - insert sort"></a>option 1 - insert sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=m , j=<span class="number">0</span>; i&lt;m+n &amp;&amp; j&lt;n;++i, j++)&#123;</span><br><span class="line">            <span class="comment">// insert sort</span></span><br><span class="line">            <span class="type">int</span> key = nums2[j];</span><br><span class="line">            <span class="type">int</span> k = i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(k&gt;<span class="number">-1</span> &amp;&amp; nums1[k]&gt;key)&#123;</span><br><span class="line">                nums1[k+<span class="number">1</span>] = nums1[k];</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[k+<span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-merge-sort"><a href="#option-2-merge-sort" class="headerlink" title="option 2 - merge sort"></a>option 2 - merge sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// merge sort</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(m+n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;m &amp;&amp; r&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[l] &lt; nums2[r]) nums[i] = nums1[l++];</span><br><span class="line">            <span class="keyword">else</span> nums[i] = nums2[r++];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;m) nums[i++] = nums1[l++];</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n) nums[i++] = nums2[r++];</span><br><span class="line">        nums1 = nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - insert sort <ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2 - merge sort<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>895. Maximum Frequency Stack</title>
    <url>/blog/2023/02/12/leetcode/895_MaximumFrequencyStack/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-frequency-stack/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FreqStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span> ,<span class="type">int</span>&gt; valToFreq;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span> ,stack&lt;<span class="type">int</span>&gt;&gt; freqToVals; </span><br><span class="line">    <span class="type">int</span> maxFreq ;   </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FreqStack</span>() &#123;</span><br><span class="line">        maxFreq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> freq = valToFreq[val];</span><br><span class="line">        valToFreq[val]++;</span><br><span class="line">        maxFreq = <span class="built_in">max</span>(maxFreq, freq);</span><br><span class="line">        freqToVals[freq].<span class="built_in">push</span>(val);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; &amp;vals = freqToVals[maxFreq];</span><br><span class="line">        <span class="type">int</span> ret = vals.<span class="built_in">top</span>();</span><br><span class="line">        valToFreq[ret]--;</span><br><span class="line">        vals.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vals.<span class="built_in">empty</span>()) maxFreq--;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FreqStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FreqStack* obj = new FreqStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>897. Increasing Order Search Tree</title>
    <url>/blog/2023/02/12/leetcode/897_IncreasingOrderSearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/increasing-order-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-extra-space"><a href="#option-1-extra-space" class="headerlink" title="option 1 - extra space"></a>option 1 - extra space</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left);</span><br><span class="line">        vec.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">preorder</span>(root);</span><br><span class="line">        TreeNode *p = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">-1</span>), *ans = p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> val:vec)&#123;</span><br><span class="line">            p-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;right;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-without-extra-space"><a href="#option-2-without-extra-space" class="headerlink" title="option 2 - without extra space"></a>option 2 - without extra space</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode * p = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        TreeNode *left = root-&gt;left;</span><br><span class="line">        TreeNode *right = root-&gt;right;</span><br><span class="line">        root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">preorder</span>(left);</span><br><span class="line">        </span><br><span class="line">        p-&gt;right = root;</span><br><span class="line">        p=p-&gt;right;</span><br><span class="line">        <span class="built_in">preorder</span>(right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        TreeNode *ans = p;;</span><br><span class="line">        <span class="built_in">preorder</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;right;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>backtracking</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>89. Gray Code</title>
    <url>/blog/2023/02/12/leetcode/89_GrayCode/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/gray-code/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-Bit-Manipulation"><a href="#option-1-Bit-Manipulation" class="headerlink" title="option 1 - Bit Manipulation"></a>option 1 - Bit Manipulation</h4><p><code>i^(i&gt;&gt;1)</code> 與自己本身一半的值做xor</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">grayCode</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n&lt;&lt;<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;(n&lt;&lt;<span class="number">1</span>);++i)&#123;</span><br><span class="line">            ret[i] = i^(i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">grayCode</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if n= 1 ,  &#123;0,1&#125;</span></span><br><span class="line">        <span class="comment">// if n=2 , &#123;00,01,11,10&#125;</span></span><br><span class="line">        <span class="comment">// if n= 3, &#123;000,001,011,010,110,111,101,100&#125;</span></span><br><span class="line">        <span class="comment">// 以n=3當例子，前半段&#123;000,001,011,010&#125; 可以當作是n=2 &#123;00,01,11,10&#125; 在前面加上0，</span></span><br><span class="line">        <span class="comment">// 後半段&#123;110,111,101,100&#125; ，沒那麼直觀，是 reverse &#123;00,01,11,10&#125;(=&#123;10,11,01,00&#125;) 再前面加上1</span></span><br><span class="line">        </span><br><span class="line">        vector&lt;string&gt; gray = &#123;<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> size = gray.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;string&gt; second = gray; </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;r :gray)&#123;</span><br><span class="line">                r = <span class="string">&quot;0&quot;</span>+r;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">reverse</span>(second.<span class="built_in">begin</span>(), second.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;s:second)&#123;</span><br><span class="line">                s = <span class="string">&quot;1&quot;</span> +s;</span><br><span class="line">            &#125;</span><br><span class="line">            gray.<span class="built_in">insert</span>(gray.<span class="built_in">end</span>(), second.<span class="built_in">begin</span>(), second.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// consert string to int </span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(string g:gray) ret.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(g,<span class="number">0</span>,<span class="number">2</span>)); <span class="comment">// better than stoi(g);</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>8. String to Integer (atoi)</title>
    <url>/blog/2023/02/12/leetcode/8_StringtoInteger(atoi)/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/string-to-integer-atoi/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i] == <span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;-&#x27;</span> || s[i] == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(s[i] ==<span class="string">&#x27;-&#x27;</span>) flag = <span class="number">-1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i;j&lt;s.<span class="built_in">size</span>() ; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]-<span class="string">&#x27;0&#x27;</span> &gt;=<span class="number">0</span> &amp;&amp; s[j]-<span class="string">&#x27;0&#x27;</span>&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ret&gt;INT_MAX/<span class="number">10</span> || (ret==INT_MAX/<span class="number">10</span> &amp;&amp; s[j]-<span class="string">&#x27;0&#x27;</span>&gt;INT_MAX%<span class="number">10</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> flag==<span class="number">1</span>?INT_MAX:INT_MIN;</span><br><span class="line">                &#125;</span><br><span class="line">                ret*= <span class="number">10</span>;</span><br><span class="line">                ret += s[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret*flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code> </li>
<li>space compleity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>905. Sort Array By Parity</title>
    <url>/blog/2023/02/12/leetcode/905_SortArrayByParity/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-array-by-parity/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-two-pass"><a href="#option-1-two-pass" class="headerlink" title="option 1 - two pass"></a>option 1 - two pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArrayByParity</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> j = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]%<span class="number">2</span>==<span class="number">0</span>) ret.<span class="built_in">push_back</span>(nums[j]); </span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&amp;<span class="number">1</span>) ret.<span class="built_in">push_back</span>(nums[j]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-one-pass-two-pointers"><a href="#option-2-one-pass-two-pointers" class="headerlink" title="option 2 - one pass , two pointers"></a>option 2 - one pass , two pointers</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArrayByParity</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]%<span class="number">2</span>==<span class="number">0</span>) ret[l++] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> ret[r--] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-3-in-place"><a href="#option-3-in-place" class="headerlink" title="option 3 - in-place"></a>option 3 - in-place</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArrayByParity</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[l]%<span class="number">2</span>==<span class="number">0</span>) l++;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r &amp;&amp; nums[r]%<span class="number">2</span>!=<span class="number">0</span>) r--;</span><br><span class="line">            <span class="built_in">swap</span>(nums[l++], nums[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>90. Subsets II</title>
    <url>/blog/2023/02/12/leetcode/90_SubsetsII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-sorting"><a href="#option-1-sorting" class="headerlink" title="option 1 - sorting"></a>option 1 - sorting</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 關鍵</span></span><br><span class="line">        ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="comment">// 終止條件，s==nums.size()</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 因為不可以重複元素需要有索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="comment">// avoid duplicate</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;s &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, ret, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">// avoid duplicate</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, ret, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-set"><a href="#option-2-set" class="headerlink" title="option 2 - set"></a>option 2 - set</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; path, set&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ret, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 關鍵</span></span><br><span class="line">        ret.<span class="built_in">insert</span>(path);</span><br><span class="line">        <span class="comment">// 終止條件，s==nums.size()</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 因為不可以重複元素需要有索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">traverse</span>(nums, path, ret, i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        set&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">traverse</span>(nums, path, ret, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>912. Sort an Array</title>
    <url>/blog/2023/02/12/leetcode/912_SortanArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-an-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-merge-sort"><a href="#option-1-merge-sort" class="headerlink" title="option 1 - merge sort"></a>option 1 - merge sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, <span class="type">int</span> l, <span class="type">int</span> mid , <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(nums.begin()+l, nums.begin()+mid+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(nums.begin()+mid+<span class="number">1</span>, nums.begin()+r+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>, k=l, n=left.<span class="built_in">size</span>(), m = right.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left[i] &lt; right[j]) nums[k++] = left[i++];</span><br><span class="line">            <span class="keyword">else</span> nums[k++] = right[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n) nums[k++] = left[i++];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;m) nums[k++] = right[j++];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">mergeSort</span>(nums, l, mid);</span><br><span class="line">            <span class="built_in">mergeSort</span>(nums, mid+<span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">merge</span>(nums, l,mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">mergeSort</span>(nums, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-quick-sort"><a href="#option-2-quick-sort" class="headerlink" title="option 2 - quick sort"></a>option 2 - quick sort</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> pivot = nums[r];</span><br><span class="line">        <span class="type">int</span> j = l<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;r;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt;pivot )&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[++j], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">swap</span>(nums[++j], nums[r]);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> p = <span class="built_in">partition</span>(nums, l, r);</span><br><span class="line">            <span class="built_in">quickSort</span>(nums, l, p<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">quickSort</span>(nums, p+<span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>918. Maximum Sum Circular Subarray</title>
    <url>/blog/2023/02/12/leetcode/918_MaximumSumCircularSubarray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/maximum-sum-circular-subarray/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  5   -3  5   </span></span><br><span class="line">        <span class="comment">//  5   -3  2   </span></span><br><span class="line">        <span class="comment">// 尋找最大非循環子陣列 與 最大循環子陣列  = total sum - 最小和的子陣列</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> global_mx = INT_MIN, local = <span class="number">0</span>;</span><br><span class="line">        local = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            local = <span class="built_in">max</span>(n, local+n);</span><br><span class="line">            global_mx =  <span class="built_in">max</span>(global_mx, local);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> global_mn = INT_MAX;</span><br><span class="line">        local = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            total+=n;</span><br><span class="line">            local = <span class="built_in">min</span>(n+local, n);</span><br><span class="line">            global_mn = <span class="built_in">min</span>(local, global_mn);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( total == global_mn) <span class="keyword">return</span> global_mx;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(global_mx, total - global_mn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>91. Decode Ways</title>
    <url>/blog/2023/02/12/leetcode/91_DecodeWays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/decode-ways/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">empty</span>() || s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            dp[i] = (s[i<span class="number">-1</span>] == <span class="string">&#x27;0&#x27;</span>) ?<span class="number">0</span>:dp[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; (s[i<span class="number">-2</span>] == <span class="string">&#x27;1&#x27;</span> || (s[i<span class="number">-2</span>] == <span class="string">&#x27;2&#x27;</span> &amp;&amp; s[i<span class="number">-1</span>] &lt;=<span class="string">&#x27;6&#x27;</span>)) )dp[i] +=dp[i<span class="number">-2</span>];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>921. Minimum Add to Make Parentheses Valid</title>
    <url>/blog/2023/02/12/leetcode/921_MinimumAddtoMakeParenthesesValid/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-stack"><a href="#option-1-stack" class="headerlink" title="option 1 - stack"></a>option 1 - stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minAddToMakeValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 右括號多於左括號</span></span><br><span class="line">                <span class="keyword">if</span>(sta.<span class="built_in">empty</span>()) count++;</span><br><span class="line">                <span class="keyword">else</span> sta.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 為匹配的左括號數量</span></span><br><span class="line">        count+=sta.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minAddToMakeValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>, r = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r++;</span><br><span class="line">                <span class="comment">// 拜訪到&#x27;)&#x27; ，檢查之前出現過的 &#x27;(&#x27; 個數必須一樣</span></span><br><span class="line">                <span class="keyword">if</span>(r&gt;l) &#123;</span><br><span class="line">                    count+=(r-l);</span><br><span class="line">                    l+=(r-l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左括號多於右括號</span></span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) count+=(l-r);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3"><a href="#option-3" class="headerlink" title="option 3"></a>option 3</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minAddToMakeValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ret : 插入次數，need : 右括號需求量</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>, need = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                need++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                need--;</span><br><span class="line">                <span class="keyword">if</span>(need==<span class="number">-1</span>)&#123;</span><br><span class="line">                    ret++;</span><br><span class="line">                    need = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret+need;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1 - stack<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2 <ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>922. Sort Array By Parity II</title>
    <url>/blog/2023/02/12/leetcode/922_SortArrayByParityII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/sort-array-by-parity-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-one-pass"><a href="#option-1-one-pass" class="headerlink" title="option 1 - one pass"></a>option 1 - one pass</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArrayByParityII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>() ,  l = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                ret[l] = nums[i];</span><br><span class="line">                l+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret[r] = nums[i];</span><br><span class="line">                r+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sorting</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>929. Unique Email Addresses</title>
    <url>/blog/2023/02/12/leetcode/929_UniqueEmailAddresses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/unique-email-addresses/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">process</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        string local_name , domain_name;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[i]!=<span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;+&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i]!=<span class="string">&#x27;.&#x27;</span>) local_name += str[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(str[i]!=<span class="string">&#x27;@&#x27;</span>) i++;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;str.<span class="built_in">size</span>()) domain_name+=str[i++];</span><br><span class="line">        </span><br><span class="line">        string ans = local_name + <span class="string">&quot;@&quot;</span>+domain_name;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numUniqueEmails</span><span class="params">(vector&lt;string&gt;&amp; emails)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(string strs:emails) s.<span class="built_in">insert</span>(<span class="built_in">process</span>(strs));</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>92. Reverse Linked List II</title>
    <url>/blog/2023/02/12/leetcode/92_ReverseLinkedListII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/reverse-linked-list-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode * l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        ListNode *pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        pre-&gt;next = l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;r;++i)&#123;</span><br><span class="line">            ListNode *temp = l-&gt;next;</span><br><span class="line">            l-&gt;next = temp-&gt;next;</span><br><span class="line">            temp-&gt;next= pre-&gt;next;</span><br><span class="line">            pre-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left ==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">reverse</span>(head, right<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            head-&gt;next = <span class="built_in">reverseBetween</span>(head-&gt;next, left<span class="number">-1</span>, right<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>931. Minimum Falling Path Sum</title>
    <url>/blog/2023/02/12/leetcode/931_MinimumFallingPathSum/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-falling-path-sum/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dp"><a href="#option-1-dp" class="headerlink" title="option 1 - dp"></a>option 1 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minFallingPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp = matrix;</span><br><span class="line">        <span class="type">int</span> ret = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:matrix[<span class="number">0</span>]) ret = <span class="built_in">min</span>(ret, n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        ret = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>) dp[i][j] += <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==m<span class="number">-1</span>) dp[i][j] += <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] += <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j]), dp[i<span class="number">-1</span>][j+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(i==n<span class="number">-1</span>) ret = <span class="built_in">min</span>(ret, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(nm)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>93. Restore IP Addresses</title>
    <url>/blog/2023/02/12/leetcode/93_RestoreIPAddresses/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/restore-ip-addresses/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ret;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || s.<span class="built_in">size</span>() &gt; <span class="number">3</span> || (s.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">atoi</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> res &lt;= <span class="number">255</span> &amp;&amp; res &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string s, <span class="type">int</span> k, string path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">empty</span>()) ret.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">size</span>() &gt;= i  &amp;&amp; <span class="built_in">isValid</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>,i) ))&#123;</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="built_in">dfs</span>(s.<span class="built_in">substr</span>(i) , k<span class="number">-1</span>, path+s.<span class="built_in">substr</span>(<span class="number">0</span>,i));</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">dfs</span>(s.<span class="built_in">substr</span>(i), k<span class="number">-1</span>, path+s.<span class="built_in">substr</span>(<span class="number">0</span>,i)+<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">restoreIpAddresses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(s, <span class="number">4</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>941. Valid Mountain Array</title>
    <url>/blog/2023/02/12/leetcode/941_ValidMountainArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/valid-mountain-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>只會有一個peak</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validMountainArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span> , r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; arr[l] &lt; arr[l+<span class="number">1</span>]) l++;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; arr[r<span class="number">-1</span>] &gt; arr[r]) r--;</span><br><span class="line">        <span class="keyword">return</span> (l!=<span class="number">0</span>) &amp;&amp; (r!=n<span class="number">-1</span>) &amp;&amp;(l==r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>946. Validate Stack Sequences</title>
    <url>/blog/2023/02/12/leetcode/946_ValidateStackSequences/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/validate-stack-sequences/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validateStackSequences</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; pushed, vector&lt;<span class="type">int</span>&gt;&amp; popped)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = pushed.<span class="built_in">size</span>(), i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pushed[i] == popped[j])&#123;i++;j++;&#125;</span><br><span class="line">            <span class="keyword">else</span> sta.<span class="built_in">push</span>(pushed[i++]);</span><br><span class="line">            <span class="comment">// 檢查當前j 指向的值是否為stack.top()</span></span><br><span class="line">            <span class="keyword">while</span>(j&lt;n &amp;&amp; !sta.<span class="built_in">empty</span>() &amp;&amp;  sta.<span class="built_in">top</span>() == popped[j])&#123;</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j==n &amp;&amp; sta.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>947. Most Stones Removed with Same Row or Column</title>
    <url>/blog/2023/02/12/leetcode/947_MostStonesRemovedwithSameRoworColumn/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent, size;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        size = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        count = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pRoot = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> qRoot = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">return</span> pRoot == qRoot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(parent[x]!=x)&#123;</span><br><span class="line">            parent[x] = parent[parent[x]];</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pRoot = <span class="built_in">find</span>(p);</span><br><span class="line">        <span class="type">int</span> qRoot = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(pRoot == qRoot) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(size[pRoot]&gt;=size[qRoot])&#123;</span><br><span class="line">            parent[qRoot] = parent[pRoot];</span><br><span class="line">            size[pRoot] += size[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent[pRoot] = parent[qRoot];</span><br><span class="line">            size[qRoot] += size[pRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:parent) cout&lt;&lt;p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s:size) cout&lt;&lt;s&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeStones</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        UnionFind * uf = <span class="keyword">new</span> <span class="built_in">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;n ; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stones[i][<span class="number">0</span>] == stones[j][<span class="number">0</span>] || stones[i][<span class="number">1</span>] == stones[j][<span class="number">1</span>])&#123;</span><br><span class="line">                    uf-&gt;<span class="built_in">unionSet</span>(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// uf-&gt;print();</span></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(uf-&gt;<span class="built_in">find</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  n - s.<span class="built_in">size</span>() ;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>94. Binary Tree Inorder Traversal</title>
    <url>/blog/2023/02/12/leetcode/94_BinaryTreeInorderTraversal/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs"><a href="#option-1-dfs" class="headerlink" title="option 1 - dfs"></a>option 1 - dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; ret)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, ret);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">inorder</span>(root, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-iterative-stack"><a href="#option-2-iterative-stack" class="headerlink" title="option 2 - iterative + stack"></a>option 2 - iterative + stack</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; sta;</span><br><span class="line">        TreeNode *p = root;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">while</span> (p || !sta.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p) &#123; <span class="comment">// L</span></span><br><span class="line">                sta.<span class="built_in">push</span>(p);</span><br><span class="line">                p=p-&gt;left; </span><br><span class="line">            &#125;</span><br><span class="line">            p = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(p-&gt;val);  <span class="comment">// V</span></span><br><span class="line">            p = p-&gt;right;   <span class="comment">// R</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>95. Unique Binary Search Trees II</title>
    <url>/blog/2023/02/12/leetcode/95_UniqueBinarySearchTreesII/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">        vector&lt;TreeNode *&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">            vector&lt;TreeNode*&gt; left = <span class="built_in">generateTrees</span>(l, i<span class="number">-1</span>);</span><br><span class="line">            vector&lt;TreeNode*&gt; right = <span class="built_in">generateTrees</span>(i+<span class="number">1</span>, r);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> l:left)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> r:right)&#123;</span><br><span class="line">                    TreeNode *t = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">                    t-&gt;left = l;</span><br><span class="line">                    t-&gt;right = r;</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">generateTrees</span>(<span class="number">1</span>, n);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>memo pattern<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;vector&lt;TreeNode*&gt;&gt;&gt; memo;</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(!memo[l][r].<span class="built_in">empty</span>()) <span class="keyword">return</span> memo[l][r];</span><br><span class="line">        vector&lt;TreeNode *&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">            vector&lt;TreeNode*&gt; left = <span class="built_in">generateTrees</span>(l, i<span class="number">-1</span>);</span><br><span class="line">            vector&lt;TreeNode*&gt; right = <span class="built_in">generateTrees</span>(i+<span class="number">1</span>, r);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> l:left)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> r:right)&#123;</span><br><span class="line">                    TreeNode *t = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">                    t-&gt;left = l;</span><br><span class="line">                    t-&gt;right = r;</span><br><span class="line">                    ret.<span class="built_in">push_back</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  memo[l][r] = ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        memo = vector&lt;vector&lt;vector&lt;TreeNode * &gt;&gt;&gt;(n+<span class="number">1</span>, vector&lt;vector&lt;TreeNode*&gt;&gt;(n+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">generateTrees</span>(<span class="number">1</span>, n);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li>time complexity <code>O(n^2)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>965. Univalued Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/965_UnivaluedBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">isUnval</span><span class="params">(TreeNode * root, <span class="type">bool</span> &amp;ret, <span class="type">int</span> &amp; val)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//preorder</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val !=val)&#123;</span><br><span class="line">            ret = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">isUnval</span>(root-&gt;left, ret, val);</span><br><span class="line">        <span class="built_in">isUnval</span>(root-&gt;right, ret, val);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnivalTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> val = root-&gt;val;</span><br><span class="line">        <span class="built_in">isUnval</span>(root, ret, val);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnivalTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// preorder</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left &amp;&amp; root-&gt;left-&gt;val !=root-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right &amp;&amp; root-&gt;right-&gt;val !=root-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isUnivalTree</span>(root-&gt;left) &amp;&amp; <span class="built_in">isUnivalTree</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">isUnval</span><span class="params">(TreeNode * root, <span class="type">bool</span> &amp;ret, <span class="type">int</span> &amp; val)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//preorder</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val !=val)&#123;</span><br><span class="line">            ret = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">isUnval</span>(root-&gt;left, ret, val);</span><br><span class="line">        <span class="built_in">isUnval</span>(root-&gt;right, ret, val);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUnivalTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> val = root-&gt;val;</span><br><span class="line">        <span class="function">queue&lt;TreeNode*&gt; <span class="title">q</span><span class="params">(&#123;root&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode *p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;val !=val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;left) q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;right) q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>96. Unique Binary Search Trees</title>
    <url>/blog/2023/02/12/leetcode/96_UniqueBinarySearchTrees/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/unique-binary-search-trees/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-dfs-memo"><a href="#option-1-dfs-memo" class="headerlink" title="option 1 - dfs + memo"></a>option 1 - dfs + memo</h4><p>memo pattern</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; memo;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTree</span><span class="params">(<span class="type">int</span> l,  <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(memo[l][r]!= <span class="number">-1</span>) <span class="keyword">return</span> memo[l][r];</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">            <span class="type">int</span> root = i;</span><br><span class="line">            <span class="type">int</span> left = <span class="built_in">numTree</span>(l,root<span class="number">-1</span>);</span><br><span class="line">            <span class="type">int</span> right = <span class="built_in">numTree</span>(root+<span class="number">1</span>,r);</span><br><span class="line">            count+=left*right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[l][r] = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        memo = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>,<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">numTree</span>(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-dp"><a href="#option-2-dp" class="headerlink" title="option 2 - dp"></a>option 2 - dp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        <span class="comment">//  1   2   3   4   5</span></span><br><span class="line">        <span class="comment">//  1   2   5   14  42</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i<span class="number">-1</span> ;++j)&#123;</span><br><span class="line">                <span class="comment">// j 左子樹區間</span></span><br><span class="line">                dp[i]+= dp[j]*dp[i-j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>976. Largest Perimeter Triangle</title>
    <url>/blog/2023/02/12/leetcode/976_LargestPerimeterTriangle/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/largest-perimeter-triangle/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestPerimeter</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> perimeter = <span class="number">0</span>, n= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt; nums[i+<span class="number">1</span>] - nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                perimeter = <span class="built_in">max</span>(perimeter, nums[i]+ nums[i+<span class="number">1</span>]+nums[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> perimeter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>977. Squares of a Sorted Array</title>
    <url>/blog/2023/02/12/leetcode/977_SquaresofaSortedArray/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1"><a href="#option-1" class="headerlink" title="option 1"></a>option 1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> &amp; a:nums) a=a*a;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-2-Two-Pointers"><a href="#option-2-Two-Pointers" class="headerlink" title="option 2 - Two Pointers"></a>option 2 - Two Pointers</h4><p>利用雙索引，去比較左右索引對應到的數字的平方，比較大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), l=<span class="number">0</span>, r = n<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">ret</span>(n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">-1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]*nums[l] &gt; nums[r]*nums[r])&#123;</span><br><span class="line">                ret[i] = nums[l]*nums[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ret[i] = nums[r]* nums[r];</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>other version<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ret</span><span class="params">(nums.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>,r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> k =nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(nums[l])&gt;=<span class="built_in">abs</span>(nums[r])) ret[k--] =<span class="built_in">pow</span>(nums[l++],<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ret[k--] = <span class="built_in">pow</span>(nums[r--],<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>983. Minimum Cost For Tickets</title>
    <url>/blog/2023/02/12/leetcode/983_MinimumCostForTickets/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/minimum-cost-for-tickets/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mincostTickets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; days, vector&lt;<span class="type">int</span>&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//      1   4   6   7   8   20</span></span><br><span class="line">        <span class="comment">//1     2   4   6   8   10  12</span></span><br><span class="line">        <span class="comment">//7     2   4   6   7   9   11</span></span><br><span class="line">        <span class="comment">//30    2   4   6   7   9   11</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> n = days.<span class="built_in">size</span>(), m = costs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">            <span class="comment">// 確定第 i 天花最少錢</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// one day</span></span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + costs[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;++j)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>( days[i<span class="number">-1</span>] - days[j<span class="number">-1</span>] &lt; <span class="number">7</span>) dp[i] = <span class="built_in">min</span>(dp[i], dp[j<span class="number">-1</span>] + costs[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>( days[i<span class="number">-1</span>] - days[j<span class="number">-1</span>] &lt; <span class="number">30</span>) dp[i] = <span class="built_in">min</span>(dp[i], dp[j<span class="number">-1</span>] + costs[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nm)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>986. Interval List Intersections</title>
    <url>/blog/2023/02/12/leetcode/986_IntervalListIntersections/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/interval-list-intersections/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">intervalIntersection</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; firstList, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; secondList) &#123;</span><br><span class="line">        <span class="comment">// 假設以排序了，所以逐一比較各區間，在適時向右移動</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = firstList.<span class="built_in">size</span>(), m = secondList.<span class="built_in">size</span>(), l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 重疊一定要兩個串列都能索引</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            <span class="comment">// 兩區間比較，會有四種狀況</span></span><br><span class="line">            <span class="comment">//case 1 [0,3], [2,5] =&gt; [2,3]</span></span><br><span class="line">            <span class="comment">//case 2 [2,5], [0,3] =&gt; [2,3]</span></span><br><span class="line">            <span class="comment">//case 3 [0,3], [1,2] =&gt; [1,2]</span></span><br><span class="line">            <span class="comment">//case 4 [1,2], [0,3] =&gt; [1,2]</span></span><br><span class="line">            <span class="comment">//case 5 [0,2], [3,4] =&gt; X</span></span><br><span class="line">            <span class="comment">//case 6 [3,4], [0,2] =&gt; X</span></span><br><span class="line">            <span class="comment">// case1~4 合併區間都是 [max(start_i), min(end_i)]</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 重疊案例太多，判斷不重疊</span></span><br><span class="line">            <span class="comment">// non-overlap </span></span><br><span class="line">            <span class="keyword">if</span>(firstList[l][<span class="number">1</span>] &lt; secondList[r][<span class="number">0</span>] || firstList[l][<span class="number">0</span>] &gt; secondList[r][<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(firstList[l][<span class="number">1</span>] &lt; secondList[r][<span class="number">0</span>]) l++;</span><br><span class="line">                <span class="keyword">else</span> r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                ret.<span class="built_in">push_back</span>(&#123;<span class="built_in">max</span>(firstList[l][<span class="number">0</span>], secondList[r][<span class="number">0</span>]), <span class="built_in">min</span>(firstList[l][<span class="number">1</span>]  ,secondList[r][<span class="number">1</span>] ) &#125;);</span><br><span class="line">                <span class="comment">// 決定誰右往右移</span></span><br><span class="line">                <span class="keyword">if</span>(firstList[l][<span class="number">1</span>] &lt; secondList[r][<span class="number">1</span>]) l++;</span><br><span class="line">                <span class="keyword">else</span> r++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>other version</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">intervalIntersection</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; firstList, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; secondList) &#123;</span><br><span class="line">        <span class="comment">// 假設以排序了，所以逐一比較各區間，在適時向右移動</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="type">int</span> n = firstList.<span class="built_in">size</span>(), m = secondList.<span class="built_in">size</span>(), l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 重疊一定要兩個串列都能索引</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;n &amp;&amp; r&lt;m)&#123;</span><br><span class="line">            <span class="type">int</span> a1 = firstList[l][<span class="number">0</span>], a2 = firstList[l][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> b1 = secondList[r][<span class="number">0</span>], b2 = secondList[r][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// overlap</span></span><br><span class="line">            <span class="keyword">if</span>(b2&gt;=a1 &amp;&amp; a2&gt;=b1)&#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(&#123;<span class="built_in">max</span>(a1,b1), <span class="built_in">min</span>(a2,b2)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a2&lt;b2) l++;</span><br><span class="line">            <span class="keyword">else</span> r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>span complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>987. Vertical Order Traversal of a Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/987_VerticalOrderTraversalofaBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">verticalTraversal</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ret;</span><br><span class="line">        map&lt;<span class="type">int</span>, map&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt; &gt; m;</span><br><span class="line">        queue&lt;pair&lt;TreeNode*, vector&lt;<span class="type">int</span>&gt;&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;root, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            TreeNode *node = t.first ;</span><br><span class="line">            <span class="type">int</span> x = t.second[<span class="number">0</span>], h = t.second[<span class="number">1</span>];</span><br><span class="line">            m[x][h].<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(&#123;node-&gt;left, &#123;x<span class="number">-1</span>, h+<span class="number">1</span>&#125;&#125;);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(&#123;node-&gt;right, &#123;x+<span class="number">1</span>, h+<span class="number">1</span>&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a :m)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; col;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it :a.second)&#123;</span><br><span class="line">                <span class="built_in">sort</span>(it.second.<span class="built_in">begin</span>(), it.second.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> v:it.second) col.<span class="built_in">push_back</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(col);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>98. Validate Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/98_ValidateBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-inorder-traverse"><a href="#option-1-inorder-traverse" class="headerlink" title="option 1 - inorder traverse"></a>option 1 - inorder traverse</h4><p>按照inorder 拜訪每一節點，並存到vector，拜訪完，檢查vector是否為單調遞增陣列即可。</p>
<h4 id="option-2-dfs"><a href="#option-2-dfs" class="headerlink" title="option 2 - dfs"></a>option 2 - dfs</h4><p>拜訪每一個節點，並檢查該節點的值介於左右孩子的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode *root, <span class="type">long</span> mn, <span class="type">long</span> mx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt;= mn || root-&gt;val &gt;= mx ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root-&gt;left, mn, root-&gt;val) &amp;&amp; <span class="built_in">isValidBST</span>(root-&gt;right, root-&gt;val , mx);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// avoid overflow</span></span><br><span class="line">        <span class="type">long</span> mx = LONG_MAX, mn =LONG_MIN;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root, mn, mx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3"><a href="#option-3" class="headerlink" title="option 3"></a>option 3</h4><p>請參考 <code>morris traversal</code> 可以做到 <code>O(1)</code> space</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(TreeNode* root, <span class="type">long</span> l, <span class="type">long</span> r)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt;= l || root-&gt;val &gt;= r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValid</span>(root-&gt;left, l, root-&gt;val) &amp;&amp; <span class="built_in">isValid</span>(root-&gt;right, root-&gt;val, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValid</span>(root, LONG_MIN, LONG_MAX);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>optnio 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(h)</code>  since recursive inorder traversal will lead to stack frame creation equal to the height of the tree.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>991. Broken Calculator</title>
    <url>/blog/2023/02/12/leetcode/991_BrokenCalculator/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/broken-calculator/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ul>
<li><p>iterative</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">brokenCalc</span><span class="params">(<span class="type">int</span> startValue, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(target &gt; startValue)&#123;</span><br><span class="line">            target = (target%<span class="number">2</span>==<span class="number">0</span>)?target/<span class="number">2</span>:target+<span class="number">1</span>;</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret+startValue-target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>recursive</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">brokenCalc</span><span class="params">(<span class="type">int</span> startValue, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(startValue==target ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(startValue &gt; target) <span class="keyword">return</span> startValue-target;</span><br><span class="line">        <span class="keyword">if</span>( target%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">brokenCalc</span>(startValue, target+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">brokenCalc</span>(startValue, target/<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2></li>
<li><p>time complexity <code>O(logn)</code></p>
</li>
<li><p>space complexity <code>O(1)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>993. Cousins in Binary Tree</title>
    <url>/blog/2023/02/12/leetcode/993_CousinsinBinaryTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/cousins-in-binary-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cousin</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> parent;</span><br><span class="line">    <span class="type">int</span> depth;</span><br><span class="line">    <span class="built_in">Cousin</span>()&#123;</span><br><span class="line">        parent = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Cousin</span>(<span class="type">int</span> val, <span class="type">int</span> parent, <span class="type">int</span> depth)&#123;</span><br><span class="line">        val = val;</span><br><span class="line">        parent = parent;</span><br><span class="line">        depth = depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCousins</span><span class="params">(TreeNode* root, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        TreeNode *a = <span class="literal">nullptr</span>, *b = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> ia =  <span class="number">-1</span>, ib=<span class="number">-1</span>,depth = <span class="number">1</span>;</span><br><span class="line">        Cousin *coux = <span class="keyword">new</span> <span class="built_in">Cousin</span>(), *couy  = <span class="keyword">new</span> <span class="built_in">Cousin</span>();</span><br><span class="line">        <span class="function">queue&lt;TreeNode* &gt; <span class="title">q</span><span class="params">(&#123;root&#125;)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;++i)&#123;</span><br><span class="line">                TreeNode* p= q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left)&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;left-&gt;val == x)&#123;</span><br><span class="line">                        coux-&gt;val = x;</span><br><span class="line">                        coux-&gt;parent= p-&gt;val;</span><br><span class="line">                        coux-&gt;depth = depth;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;left-&gt;val == y)&#123;</span><br><span class="line">                        couy-&gt;val = y;</span><br><span class="line">                        couy-&gt;parent= p-&gt;val;</span><br><span class="line">                        couy-&gt;depth = depth;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right)&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;right-&gt;val == x)&#123;</span><br><span class="line">                        coux-&gt;val = x;</span><br><span class="line">                        coux-&gt;parent= p-&gt;val;</span><br><span class="line">                        coux-&gt;depth = depth;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;right-&gt;val == y)&#123;</span><br><span class="line">                        couy-&gt;val = y;</span><br><span class="line">                        couy-&gt;parent= p-&gt;val;</span><br><span class="line">                        couy-&gt;depth = depth;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// check</span></span><br><span class="line">                <span class="keyword">if</span>(couy-&gt;parent!=<span class="number">-1</span> &amp;&amp; coux-&gt;parent!=<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>( couy-&gt;depth == coux-&gt;depth &amp;&amp; couy-&gt;parent!=coux-&gt;parent) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// 找不到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>994. Rotting Oranges</title>
    <url>/blog/2023/02/12/leetcode/994_RottingOranges/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/rotting-oranges/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orangesRotting</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="comment">// 紀錄新鮮的橘子個數 (grid[i][j] = 1)</span></span><br><span class="line">        <span class="type">int</span> fresh_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n= grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>) q.<span class="built_in">push</span>(&#123;i,j&#125;);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) fresh_cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; fresh_cnt)&#123;</span><br><span class="line">            <span class="type">int</span> size =q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size ; ++i)&#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; p = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> d:dirs)&#123;</span><br><span class="line">                    <span class="type">int</span> x= p[<span class="number">0</span>]+d[<span class="number">0</span>], y = p[<span class="number">1</span>] + d[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt; <span class="number">0</span> || y&lt;<span class="number">0</span> || x&gt;n<span class="number">-1</span> || y&gt;m<span class="number">-1</span>  || grid[x][y] !=<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    grid[x][y] = <span class="number">2</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">                    <span class="comment">// 拜訪過所以腐爛，所以減一</span></span><br><span class="line">                    </span><br><span class="line">                    fresh_cnt--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果還有新鮮橘子</span></span><br><span class="line">        <span class="keyword">if</span>(fresh_cnt&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(n*m)</code></li>
<li>space complexity <code>O(n*m)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>996. Number of Squareful Arrays</title>
    <url>/blog/2023/02/12/leetcode/996_NumberofSquarefulArrays/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/number-of-squareful-arrays/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ans ;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; nums, vector&lt;<span class="type">int</span>&gt; &amp; path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; visited[i - <span class="number">1</span>] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(visited[i] ) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!path.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">double</span> root = <span class="built_in">sqrt</span>(nums[i]+path.<span class="built_in">back</span>());</span><br><span class="line">                <span class="keyword">if</span>(root- <span class="built_in">floor</span>(root)!= <span class="number">0</span> ) <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">dfs</span>(nums, path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquarefulPerms</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(nums.<span class="built_in">size</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(nums, path);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>99. Recover Binary Search Tree</title>
    <url>/blog/2023/02/12/leetcode/99_RecoverBinarySearchTree/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/recover-binary-search-tree/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h4 id="option-1-STL-to-store"><a href="#option-1-STL-to-store" class="headerlink" title="option 1 - STL to store"></a>option 1 - STL to store</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(TreeNode *root, vector&lt;TreeNode*&gt;&amp; list, vector&lt;<span class="type">int</span>&gt;&amp; vals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;left, list, vals);</span><br><span class="line">        list.<span class="built_in">push_back</span>(root);</span><br><span class="line">        vals.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">traverse</span>(root-&gt;right, list, vals);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只會有兩個節點放錯</span></span><br><span class="line">        <span class="comment">// 遍歷變存下來在對調</span></span><br><span class="line">        vector&lt;TreeNode*&gt; list;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vals;</span><br><span class="line">        <span class="built_in">traverse</span>(root, list, vals);</span><br><span class="line">        <span class="built_in">sort</span>(vals.<span class="built_in">begin</span>(), vals.<span class="built_in">end</span>());      </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">            list[i]-&gt;val = vals[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-2-recursive-preorder-two-Pointers"><a href="#option-2-recursive-preorder-two-Pointers" class="headerlink" title="option 2 - recursive + preorder + two Pointers"></a>option 2 - recursive + preorder + two Pointers</h4><p>因為只會有兩個節點放錯位置且inorder遍歷應該是有序的，故先找到哪兩個節點在交換</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode *prev = <span class="literal">nullptr</span>, *a = <span class="literal">nullptr</span>, *b = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(prev &amp;&amp; prev-&gt;val &gt; root-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a) a = prev;</span><br><span class="line">            b = root;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = root;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">inorder</span>(root);</span><br><span class="line">        <span class="built_in">swap</span>(a-&gt;val,b-&gt;val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="option-3-stack-preorder"><a href="#option-3-stack-preorder" class="headerlink" title="option 3 - stack + preorder"></a>option 3 - stack + preorder</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        TreeNode *pre = <span class="literal">nullptr</span>, *a = <span class="literal">nullptr</span>, *b = <span class="literal">nullptr</span>;</span><br><span class="line">        stack&lt;TreeNode*&gt;sta;</span><br><span class="line">        TreeNode *p = root;</span><br><span class="line">        <span class="keyword">while</span>(p || !sta.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(p)&#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(p);</span><br><span class="line">                p=p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            p = sta.<span class="built_in">top</span>();</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (pre) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pre-&gt;val &gt; p-&gt;val) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!a) a = pre;</span><br><span class="line">                    b = p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = p;</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a-&gt;val, b-&gt;val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="option-4-Morris-traverse"><a href="#option-4-Morris-traverse" class="headerlink" title="option 4 - Morris traverse"></a>option 4 - Morris traverse</h4><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>option 1<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 2<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
</li>
<li>option 3<ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>9. Palindrome Number</title>
    <url>/blog/2023/02/12/leetcode/9_PalindromeNumber/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a><a href="https://leetcode.com/problems/palindrome-number/">problem</a></h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0, 1,2,3,4,5,6,7,8,9 =&gt; true</span></span><br><span class="line">        <span class="comment">// 10 , 100, x0, x00 =&gt; false</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ret &lt; x)&#123;</span><br><span class="line">            ret = <span class="number">10</span>*ret + (x%<span class="number">10</span>);</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ( ret==x || ret/<span class="number">10</span> == x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity <code>O(logn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>templated</title>
    <url>/blog/2023/02/12/leetcode/template/</url>
    <content><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><ul>
<li>time complexity </li>
<li>space complexity</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Dictionaries and Hashmaps</title>
    <url>/blog/2023/02/12/HackerRank/interview-preparation-kit/DictionariesandHashmaps/</url>
    <content><![CDATA[<h2 id="Hash-Tables-Ransom-Note"><a href="#Hash-Tables-Ransom-Note" class="headerlink" title="Hash Tables: Ransom Note"></a>Hash Tables: Ransom Note</h2><p>字典的使用</p>
<h3 id="python-solution"><a href="#python-solution" class="headerlink" title="python solution"></a>python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkMagazine</span>(<span class="params">magazine, note</span>):</span><br><span class="line">    <span class="comment"># Write your code here</span></span><br><span class="line">    mp = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> magazine:</span><br><span class="line">        mp[word] = mp.get(word, <span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> note:</span><br><span class="line">        <span class="keyword">if</span> mp.get(word,<span class="number">0</span>)==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            mp[word]-=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="c-solution"><a href="#c-solution" class="headerlink" title="c++ solution"></a>c++ solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkMagazine</span><span class="params">(vector&lt;string&gt; magazine, vector&lt;string&gt; note)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(string str:magazine) mp[str]++;</span><br><span class="line">    <span class="keyword">for</span>(string n:note)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[n]==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> mp[n]--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h3><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code><h2 id="Two-Strings"><a href="#Two-Strings" class="headerlink" title="Two Strings"></a>Two Strings</h2></li>
</ul>
<h3 id="python-solution-1"><a href="#python-solution-1" class="headerlink" title="python solution"></a>python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twoStrings</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    <span class="comment"># Write your code here</span></span><br><span class="line">    s = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s1:</span><br><span class="line">        s.add(c)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s2:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="c-solution-1"><a href="#c-solution-1" class="headerlink" title="c++ solution"></a>c++ solution</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">twoStrings</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s1) s.<span class="built_in">insert</span>(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">find</span>(c)!=s.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="analysis-1"><a href="#analysis-1" class="headerlink" title="analysis"></a>analysis</h3><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
<h2 id="Frequency-Queries"><a href="#Frequency-Queries" class="headerlink" title="Frequency Queries"></a>Frequency Queries</h2><p>需要兩組字典</p>
<h3 id="python-solution-2"><a href="#python-solution-2" class="headerlink" title="python solution"></a>python solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">freqQuery</span>(<span class="params">queries</span>):</span><br><span class="line">    freq = <span class="built_in">dict</span>()</span><br><span class="line">    freq2num = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    ans = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> (op, val) <span class="keyword">in</span> queries:</span><br><span class="line">        <span class="keyword">if</span> op ==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> freq:</span><br><span class="line">                freq[val] = <span class="number">1</span></span><br><span class="line">                freq2num[<span class="number">1</span>]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                idx = freq[val]</span><br><span class="line">                freq2num[idx]-=<span class="number">1</span></span><br><span class="line">                freq[val] +=<span class="number">1</span></span><br><span class="line">                freq2num[idx+<span class="number">1</span>]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> op ==<span class="number">2</span>:</span><br><span class="line">            idx = freq.get(val,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> idx==<span class="number">0</span>:</span><br><span class="line">                 <span class="keyword">continue</span></span><br><span class="line">            freq[val]-=<span class="number">1</span></span><br><span class="line">            freq2num[idx]-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> idx-<span class="number">1</span>&gt;<span class="number">0</span>:</span><br><span class="line">                freq2num[idx-<span class="number">1</span>]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> freq2num[val]:</span><br><span class="line">                ans.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h3 id="analysis-2"><a href="#analysis-2" class="headerlink" title="analysis"></a>analysis</h3><ul>
<li>time complexity <code>O(n)</code></li>
<li>space complexity <code>O(n)</code></li>
</ul>
]]></content>
      <categories>
        <category>HackerRank</category>
      </categories>
  </entry>
  <entry>
    <title>Sorting</title>
    <url>/blog/2023/02/12/HackerRank/interview-preparation-kit/Sorting/</url>
    <content><![CDATA[<h2 id="Sorting-Bubble-Sort"><a href="#Sorting-Bubble-Sort" class="headerlink" title="Sorting: Bubble Sort"></a>Sorting: Bubble Sort</h2><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countSwaps</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="comment"># Write your code here</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[j]&gt;a[j+<span class="number">1</span>]:</span><br><span class="line">                a[j],a[j+<span class="number">1</span>] = a[j+<span class="number">1</span>],a[j]</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Array is sorted in <span class="subst">&#123;count&#125;</span> swaps.\nFirst Element: <span class="subst">&#123;a[<span class="number">0</span>]&#125;</span>  \nLast Element: <span class="subst">&#123;a[-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h3><ul>
<li>time complexity <code>O(n^2)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
<h2 id="Mark-and-Toys"><a href="#Mark-and-Toys" class="headerlink" title="Mark and Toys"></a>Mark and Toys</h2><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maximumToys</span>(<span class="params">prices, k</span>):</span><br><span class="line">    <span class="comment"># Write your code here</span></span><br><span class="line">    prices.sort()</span><br><span class="line">    count =<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> prices:</span><br><span class="line">        <span class="keyword">if</span> k-p&gt;=<span class="number">0</span>:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            k-=p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="analysis-1"><a href="#analysis-1" class="headerlink" title="analysis"></a>analysis</h3><ul>
<li>time complexity <code>O(nlogn)</code></li>
<li>space complexity <code>O(1)</code></li>
</ul>
<h2 id="Sorting-Comparator"><a href="#Sorting-Comparator" class="headerlink" title="Sorting: Comparator"></a>Sorting: Comparator</h2><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;name is <span class="subst">&#123;self.name&#125;</span>, score is <span class="subst">&#123;self.score&#125;</span>\n&quot;</span>            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">comparator</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> a.score &gt; b.score:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> a.score &lt; b.score:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span>(a.score == b.score):</span><br><span class="line">            <span class="keyword">if</span> a.name&gt; b.name:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HackerRank</category>
      </categories>
  </entry>
</search>
